#include "gemm.hpp"
#include "kvazaar.hpp"
#include "mve.hpp"
#include <cstdint>
#include <cstdio>

void gemm_rvv(int LANE_NUM,
              config_t *config,
              input_t *input,
              output_t *output) {

    gemm_config_t *gemm_config = (gemm_config_t *)config;
    gemm_input_t *gemm_input = (gemm_input_t *)input;
    gemm_output_t *gemm_output = (gemm_output_t *)output;

    int M = gemm_config->M;
    int N = gemm_config->N;
    int K = gemm_config->K;
    int32_t min = gemm_config->min;
    int32_t max = gemm_config->max;
    int32_t *in = gemm_input->input;
    int32_t *bias = gemm_input->bias;
    int32_t *weights = gemm_input->weights;
    int32_t *out = gemm_output->output;

    // Dim0: M, Dim1: N
    _mve_set_dim_count(2);

    // Dim0: writing output to consequetive cells in M direction (Handled by stride mode)
    // Dim1: Writing output rows to rows of N direction
    _mve_set_store_stride(1, M);
    __vidx_var output_stride = {1, 3, 0, 0};

    // Dim0: Reading input from consequetive cells in M direction (Handled by stride mode)
    // Dim1: Reading the same input rows from rows of N direction (Handled by stride mode)
    __vidx_var input_stride = {1, 0, 0, 0};

    // Dim0: Reading the same weight for all cells of M direction (Handled by stride mode)
    // Dim1: Reading weights column wise for cells in N direction (Handled by stride mode)
    _mve_set_load_stride(1, K);
    __vidx_var weight_stride = {0, 3, 0, 0};

    // Bias is loaded the same for all cells of M direction
    // and consequetively for rows in N direction
    __vidx_var bias_stride = {0, 1, 0, 0};

    __mdvdw min_v = _mve_set1_dw(min);
    __mdvdw max_v = _mve_set1_dw(max);

    int32_t *bias_addr;
    int32_t *weight_addr;
    int32_t *input_addr;
    int32_t *output_addr;

    int m = 0;

    if (LANE_NUM == 8192) {
        if (m + 8192 <= M) {
            // First Dim: M
            _mve_set_dim_length(0, 8192);
        }
        while (m + 8192 <= M) {

            bias_addr = bias;
            weight_addr = weights;
            output_addr = out;

            int n = 0;

            if (n + 1 <= N) {
                // Second Dim: N
                _mve_set_dim_length(1, 1);
            }

            while (n + 1 <= N) {

                // Loading bias - Dim1.length = 1 - Dim0.length = 8192, Stride: 0 (dim0) and 1 (dim1)
                __mdvdw acc_v = _mve_set1_dw(0);
                _mve_set_only_element(1, 0);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_all_elements(1);

                bias_addr += 1;

                input_addr = in;
                int32_t *weight_addr_tmp = weight_addr;
                weight_addr += 1 * K;

                for (int k = 0; k < K; k++) {

                    // Loading input - Dim1.length = 1 - Dim0.length = 8192, Stride: 1 (dim0) and 0 (dim1)
                    // Loading weight - Dim1.length = 1 - Dim0.length = 8192, Stride: 0 (dim0) and 3 (K) (dim1)
                    __mdvdw input_v = _mve_set1_dw(0);
                    __mdvdw weight_v = _mve_set1_dw(0);
                    _mve_set_only_element(1, 0);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_all_elements(1);

                    input_addr += M;
                    weight_addr_tmp += 1;

                    __mdvdw mult_v = _mve_mul_dw(input_v, weight_v);

                    acc_v = _mve_add_dw(acc_v, mult_v);
                }

                // Caculating Min and Max

                // R4 = R2 min R1
                acc_v = _mve_min_dw(acc_v, max_v);
                acc_v = _mve_max_dw(acc_v, min_v);

                // Storing the results, Stride: 1 (dim0) and 3 (M) (dim1)
                _mve_set_only_element(1, 0);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_all_elements(1);

                output_addr += 1 * M;

                mve_flusher();
                n += 1;
            }

            in += 8192;
            out += 8192;
            m += 8192;
        }
        if (m + 4096 <= M) {
            // First Dim: M
            _mve_set_dim_length(0, 4096);
        }
        while (m + 4096 <= M) {

            bias_addr = bias;
            weight_addr = weights;
            output_addr = out;

            int n = 0;

            if (n + 2 <= N) {
                // Second Dim: N
                _mve_set_dim_length(1, 2);
            }

            while (n + 2 <= N) {

                // Loading bias - Dim1.length = 2 - Dim0.length = 4096, Stride: 0 (dim0) and 1 (dim1)
                __mdvdw acc_v = _mve_set1_dw(0);
                _mve_set_only_element(1, 0);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 1);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_all_elements(1);

                bias_addr += 2;

                input_addr = in;
                int32_t *weight_addr_tmp = weight_addr;
                weight_addr += 2 * K;

                for (int k = 0; k < K; k++) {

                    // Loading input - Dim1.length = 2 - Dim0.length = 4096, Stride: 1 (dim0) and 0 (dim1)
                    // Loading weight - Dim1.length = 2 - Dim0.length = 4096, Stride: 0 (dim0) and 3 (K) (dim1)
                    __mdvdw input_v = _mve_set1_dw(0);
                    __mdvdw weight_v = _mve_set1_dw(0);
                    _mve_set_only_element(1, 0);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 1);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_all_elements(1);

                    input_addr += M;
                    weight_addr_tmp += 1;

                    __mdvdw mult_v = _mve_mul_dw(input_v, weight_v);

                    acc_v = _mve_add_dw(acc_v, mult_v);
                }

                // Caculating Min and Max

                // R4 = R2 min R1
                acc_v = _mve_min_dw(acc_v, max_v);
                acc_v = _mve_max_dw(acc_v, min_v);

                // Storing the results, Stride: 1 (dim0) and 3 (M) (dim1)
                _mve_set_only_element(1, 0);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 1);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_all_elements(1);

                output_addr += 2 * M;

                mve_flusher();
                n += 2;
            }

            if (n + 1 <= N) {
                // Second Dim: N
                _mve_set_dim_length(1, 1);
            }

            while (n + 1 <= N) {

                // Loading bias - Dim1.length = 1 - Dim0.length = 4096, Stride: 0 (dim0) and 1 (dim1)
                __mdvdw acc_v = _mve_set1_dw(0);
                _mve_set_only_element(1, 0);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_all_elements(1);

                bias_addr += 1;

                input_addr = in;
                int32_t *weight_addr_tmp = weight_addr;
                weight_addr += 1 * K;

                for (int k = 0; k < K; k++) {

                    // Loading input - Dim1.length = 1 - Dim0.length = 4096, Stride: 1 (dim0) and 0 (dim1)
                    // Loading weight - Dim1.length = 1 - Dim0.length = 4096, Stride: 0 (dim0) and 3 (K) (dim1)
                    __mdvdw input_v = _mve_set1_dw(0);
                    __mdvdw weight_v = _mve_set1_dw(0);
                    _mve_set_only_element(1, 0);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_all_elements(1);

                    input_addr += M;
                    weight_addr_tmp += 1;

                    __mdvdw mult_v = _mve_mul_dw(input_v, weight_v);

                    acc_v = _mve_add_dw(acc_v, mult_v);
                }

                // Caculating Min and Max

                // R4 = R2 min R1
                acc_v = _mve_min_dw(acc_v, max_v);
                acc_v = _mve_max_dw(acc_v, min_v);

                // Storing the results, Stride: 1 (dim0) and 3 (M) (dim1)
                _mve_set_only_element(1, 0);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_all_elements(1);

                output_addr += 1 * M;

                mve_flusher();
                n += 1;
            }

            in += 4096;
            out += 4096;
            m += 4096;
        }
        if (m + 2048 <= M) {
            // First Dim: M
            _mve_set_dim_length(0, 2048);
        }
        while (m + 2048 <= M) {

            bias_addr = bias;
            weight_addr = weights;
            output_addr = out;

            int n = 0;

            if (n + 4 <= N) {
                // Second Dim: N
                _mve_set_dim_length(1, 4);
            }

            while (n + 4 <= N) {

                // Loading bias - Dim1.length = 4 - Dim0.length = 2048, Stride: 0 (dim0) and 1 (dim1)
                __mdvdw acc_v = _mve_set1_dw(0);
                _mve_set_only_element(1, 0);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 1);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 2);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 3);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_all_elements(1);

                bias_addr += 4;

                input_addr = in;
                int32_t *weight_addr_tmp = weight_addr;
                weight_addr += 4 * K;

                for (int k = 0; k < K; k++) {

                    // Loading input - Dim1.length = 4 - Dim0.length = 2048, Stride: 1 (dim0) and 0 (dim1)
                    // Loading weight - Dim1.length = 4 - Dim0.length = 2048, Stride: 0 (dim0) and 3 (K) (dim1)
                    __mdvdw input_v = _mve_set1_dw(0);
                    __mdvdw weight_v = _mve_set1_dw(0);
                    _mve_set_only_element(1, 0);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 1);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 2);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 3);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_all_elements(1);

                    input_addr += M;
                    weight_addr_tmp += 1;

                    __mdvdw mult_v = _mve_mul_dw(input_v, weight_v);

                    acc_v = _mve_add_dw(acc_v, mult_v);
                }

                // Caculating Min and Max

                // R4 = R2 min R1
                acc_v = _mve_min_dw(acc_v, max_v);
                acc_v = _mve_max_dw(acc_v, min_v);

                // Storing the results, Stride: 1 (dim0) and 3 (M) (dim1)
                _mve_set_only_element(1, 0);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 1);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 2);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 3);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_all_elements(1);

                output_addr += 4 * M;

                mve_flusher();
                n += 4;
            }

            if (n + 2 <= N) {
                // Second Dim: N
                _mve_set_dim_length(1, 2);
            }

            while (n + 2 <= N) {

                // Loading bias - Dim1.length = 2 - Dim0.length = 2048, Stride: 0 (dim0) and 1 (dim1)
                __mdvdw acc_v = _mve_set1_dw(0);
                _mve_set_only_element(1, 0);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 1);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_all_elements(1);

                bias_addr += 2;

                input_addr = in;
                int32_t *weight_addr_tmp = weight_addr;
                weight_addr += 2 * K;

                for (int k = 0; k < K; k++) {

                    // Loading input - Dim1.length = 2 - Dim0.length = 2048, Stride: 1 (dim0) and 0 (dim1)
                    // Loading weight - Dim1.length = 2 - Dim0.length = 2048, Stride: 0 (dim0) and 3 (K) (dim1)
                    __mdvdw input_v = _mve_set1_dw(0);
                    __mdvdw weight_v = _mve_set1_dw(0);
                    _mve_set_only_element(1, 0);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 1);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_all_elements(1);

                    input_addr += M;
                    weight_addr_tmp += 1;

                    __mdvdw mult_v = _mve_mul_dw(input_v, weight_v);

                    acc_v = _mve_add_dw(acc_v, mult_v);
                }

                // Caculating Min and Max

                // R4 = R2 min R1
                acc_v = _mve_min_dw(acc_v, max_v);
                acc_v = _mve_max_dw(acc_v, min_v);

                // Storing the results, Stride: 1 (dim0) and 3 (M) (dim1)
                _mve_set_only_element(1, 0);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 1);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_all_elements(1);

                output_addr += 2 * M;

                mve_flusher();
                n += 2;
            }

            if (n + 1 <= N) {
                // Second Dim: N
                _mve_set_dim_length(1, 1);
            }

            while (n + 1 <= N) {

                // Loading bias - Dim1.length = 1 - Dim0.length = 2048, Stride: 0 (dim0) and 1 (dim1)
                __mdvdw acc_v = _mve_set1_dw(0);
                _mve_set_only_element(1, 0);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_all_elements(1);

                bias_addr += 1;

                input_addr = in;
                int32_t *weight_addr_tmp = weight_addr;
                weight_addr += 1 * K;

                for (int k = 0; k < K; k++) {

                    // Loading input - Dim1.length = 1 - Dim0.length = 2048, Stride: 1 (dim0) and 0 (dim1)
                    // Loading weight - Dim1.length = 1 - Dim0.length = 2048, Stride: 0 (dim0) and 3 (K) (dim1)
                    __mdvdw input_v = _mve_set1_dw(0);
                    __mdvdw weight_v = _mve_set1_dw(0);
                    _mve_set_only_element(1, 0);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_all_elements(1);

                    input_addr += M;
                    weight_addr_tmp += 1;

                    __mdvdw mult_v = _mve_mul_dw(input_v, weight_v);

                    acc_v = _mve_add_dw(acc_v, mult_v);
                }

                // Caculating Min and Max

                // R4 = R2 min R1
                acc_v = _mve_min_dw(acc_v, max_v);
                acc_v = _mve_max_dw(acc_v, min_v);

                // Storing the results, Stride: 1 (dim0) and 3 (M) (dim1)
                _mve_set_only_element(1, 0);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_all_elements(1);

                output_addr += 1 * M;

                mve_flusher();
                n += 1;
            }

            in += 2048;
            out += 2048;
            m += 2048;
        }
        if (m + 1024 <= M) {
            // First Dim: M
            _mve_set_dim_length(0, 1024);
        }
        while (m + 1024 <= M) {

            bias_addr = bias;
            weight_addr = weights;
            output_addr = out;

            int n = 0;

            if (n + 8 <= N) {
                // Second Dim: N
                _mve_set_dim_length(1, 8);
            }

            while (n + 8 <= N) {

                // Loading bias - Dim1.length = 8 - Dim0.length = 1024, Stride: 0 (dim0) and 1 (dim1)
                __mdvdw acc_v = _mve_set1_dw(0);
                _mve_set_only_element(1, 0);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 1);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 2);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 3);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 4);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 5);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 6);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 7);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_all_elements(1);

                bias_addr += 8;

                input_addr = in;
                int32_t *weight_addr_tmp = weight_addr;
                weight_addr += 8 * K;

                for (int k = 0; k < K; k++) {

                    // Loading input - Dim1.length = 8 - Dim0.length = 1024, Stride: 1 (dim0) and 0 (dim1)
                    // Loading weight - Dim1.length = 8 - Dim0.length = 1024, Stride: 0 (dim0) and 3 (K) (dim1)
                    __mdvdw input_v = _mve_set1_dw(0);
                    __mdvdw weight_v = _mve_set1_dw(0);
                    _mve_set_only_element(1, 0);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 1);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 2);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 3);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 4);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 5);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 6);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 7);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_all_elements(1);

                    input_addr += M;
                    weight_addr_tmp += 1;

                    __mdvdw mult_v = _mve_mul_dw(input_v, weight_v);

                    acc_v = _mve_add_dw(acc_v, mult_v);
                }

                // Caculating Min and Max

                // R4 = R2 min R1
                acc_v = _mve_min_dw(acc_v, max_v);
                acc_v = _mve_max_dw(acc_v, min_v);

                // Storing the results, Stride: 1 (dim0) and 3 (M) (dim1)
                _mve_set_only_element(1, 0);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 1);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 2);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 3);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 4);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 5);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 6);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 7);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_all_elements(1);

                output_addr += 8 * M;

                mve_flusher();
                n += 8;
            }

            if (n + 4 <= N) {
                // Second Dim: N
                _mve_set_dim_length(1, 4);
            }

            while (n + 4 <= N) {

                // Loading bias - Dim1.length = 4 - Dim0.length = 1024, Stride: 0 (dim0) and 1 (dim1)
                __mdvdw acc_v = _mve_set1_dw(0);
                _mve_set_only_element(1, 0);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 1);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 2);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 3);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_all_elements(1);

                bias_addr += 4;

                input_addr = in;
                int32_t *weight_addr_tmp = weight_addr;
                weight_addr += 4 * K;

                for (int k = 0; k < K; k++) {

                    // Loading input - Dim1.length = 4 - Dim0.length = 1024, Stride: 1 (dim0) and 0 (dim1)
                    // Loading weight - Dim1.length = 4 - Dim0.length = 1024, Stride: 0 (dim0) and 3 (K) (dim1)
                    __mdvdw input_v = _mve_set1_dw(0);
                    __mdvdw weight_v = _mve_set1_dw(0);
                    _mve_set_only_element(1, 0);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 1);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 2);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 3);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_all_elements(1);

                    input_addr += M;
                    weight_addr_tmp += 1;

                    __mdvdw mult_v = _mve_mul_dw(input_v, weight_v);

                    acc_v = _mve_add_dw(acc_v, mult_v);
                }

                // Caculating Min and Max

                // R4 = R2 min R1
                acc_v = _mve_min_dw(acc_v, max_v);
                acc_v = _mve_max_dw(acc_v, min_v);

                // Storing the results, Stride: 1 (dim0) and 3 (M) (dim1)
                _mve_set_only_element(1, 0);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 1);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 2);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 3);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_all_elements(1);

                output_addr += 4 * M;

                mve_flusher();
                n += 4;
            }

            if (n + 2 <= N) {
                // Second Dim: N
                _mve_set_dim_length(1, 2);
            }

            while (n + 2 <= N) {

                // Loading bias - Dim1.length = 2 - Dim0.length = 1024, Stride: 0 (dim0) and 1 (dim1)
                __mdvdw acc_v = _mve_set1_dw(0);
                _mve_set_only_element(1, 0);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 1);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_all_elements(1);

                bias_addr += 2;

                input_addr = in;
                int32_t *weight_addr_tmp = weight_addr;
                weight_addr += 2 * K;

                for (int k = 0; k < K; k++) {

                    // Loading input - Dim1.length = 2 - Dim0.length = 1024, Stride: 1 (dim0) and 0 (dim1)
                    // Loading weight - Dim1.length = 2 - Dim0.length = 1024, Stride: 0 (dim0) and 3 (K) (dim1)
                    __mdvdw input_v = _mve_set1_dw(0);
                    __mdvdw weight_v = _mve_set1_dw(0);
                    _mve_set_only_element(1, 0);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 1);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_all_elements(1);

                    input_addr += M;
                    weight_addr_tmp += 1;

                    __mdvdw mult_v = _mve_mul_dw(input_v, weight_v);

                    acc_v = _mve_add_dw(acc_v, mult_v);
                }

                // Caculating Min and Max

                // R4 = R2 min R1
                acc_v = _mve_min_dw(acc_v, max_v);
                acc_v = _mve_max_dw(acc_v, min_v);

                // Storing the results, Stride: 1 (dim0) and 3 (M) (dim1)
                _mve_set_only_element(1, 0);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 1);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_all_elements(1);

                output_addr += 2 * M;

                mve_flusher();
                n += 2;
            }

            if (n + 1 <= N) {
                // Second Dim: N
                _mve_set_dim_length(1, 1);
            }

            while (n + 1 <= N) {

                // Loading bias - Dim1.length = 1 - Dim0.length = 1024, Stride: 0 (dim0) and 1 (dim1)
                __mdvdw acc_v = _mve_set1_dw(0);
                _mve_set_only_element(1, 0);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_all_elements(1);

                bias_addr += 1;

                input_addr = in;
                int32_t *weight_addr_tmp = weight_addr;
                weight_addr += 1 * K;

                for (int k = 0; k < K; k++) {

                    // Loading input - Dim1.length = 1 - Dim0.length = 1024, Stride: 1 (dim0) and 0 (dim1)
                    // Loading weight - Dim1.length = 1 - Dim0.length = 1024, Stride: 0 (dim0) and 3 (K) (dim1)
                    __mdvdw input_v = _mve_set1_dw(0);
                    __mdvdw weight_v = _mve_set1_dw(0);
                    _mve_set_only_element(1, 0);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_all_elements(1);

                    input_addr += M;
                    weight_addr_tmp += 1;

                    __mdvdw mult_v = _mve_mul_dw(input_v, weight_v);

                    acc_v = _mve_add_dw(acc_v, mult_v);
                }

                // Caculating Min and Max

                // R4 = R2 min R1
                acc_v = _mve_min_dw(acc_v, max_v);
                acc_v = _mve_max_dw(acc_v, min_v);

                // Storing the results, Stride: 1 (dim0) and 3 (M) (dim1)
                _mve_set_only_element(1, 0);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_all_elements(1);

                output_addr += 1 * M;

                mve_flusher();
                n += 1;
            }

            in += 1024;
            out += 1024;
            m += 1024;
        }
        if (m + 512 <= M) {
            // First Dim: M
            _mve_set_dim_length(0, 512);
        }
        while (m + 512 <= M) {

            bias_addr = bias;
            weight_addr = weights;
            output_addr = out;

            int n = 0;

            if (n + 16 <= N) {
                // Second Dim: N
                _mve_set_dim_length(1, 16);
            }

            while (n + 16 <= N) {

                // Loading bias - Dim1.length = 16 - Dim0.length = 512, Stride: 0 (dim0) and 1 (dim1)
                __mdvdw acc_v = _mve_set1_dw(0);
                _mve_set_only_element(1, 0);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 1);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 2);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 3);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 4);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 5);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 6);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 7);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 8);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 9);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 10);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 11);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 12);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 13);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 14);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 15);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_all_elements(1);

                bias_addr += 16;

                input_addr = in;
                int32_t *weight_addr_tmp = weight_addr;
                weight_addr += 16 * K;

                for (int k = 0; k < K; k++) {

                    // Loading input - Dim1.length = 16 - Dim0.length = 512, Stride: 1 (dim0) and 0 (dim1)
                    // Loading weight - Dim1.length = 16 - Dim0.length = 512, Stride: 0 (dim0) and 3 (K) (dim1)
                    __mdvdw input_v = _mve_set1_dw(0);
                    __mdvdw weight_v = _mve_set1_dw(0);
                    _mve_set_only_element(1, 0);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 1);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 2);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 3);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 4);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 5);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 6);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 7);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 8);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 9);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 10);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 11);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 12);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 13);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 14);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 15);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_all_elements(1);

                    input_addr += M;
                    weight_addr_tmp += 1;

                    __mdvdw mult_v = _mve_mul_dw(input_v, weight_v);

                    acc_v = _mve_add_dw(acc_v, mult_v);
                }

                // Caculating Min and Max

                // R4 = R2 min R1
                acc_v = _mve_min_dw(acc_v, max_v);
                acc_v = _mve_max_dw(acc_v, min_v);

                // Storing the results, Stride: 1 (dim0) and 3 (M) (dim1)
                _mve_set_only_element(1, 0);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 1);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 2);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 3);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 4);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 5);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 6);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 7);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 8);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 9);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 10);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 11);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 12);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 13);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 14);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 15);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_all_elements(1);

                output_addr += 16 * M;

                mve_flusher();
                n += 16;
            }

            if (n + 8 <= N) {
                // Second Dim: N
                _mve_set_dim_length(1, 8);
            }

            while (n + 8 <= N) {

                // Loading bias - Dim1.length = 8 - Dim0.length = 512, Stride: 0 (dim0) and 1 (dim1)
                __mdvdw acc_v = _mve_set1_dw(0);
                _mve_set_only_element(1, 0);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 1);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 2);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 3);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 4);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 5);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 6);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 7);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_all_elements(1);

                bias_addr += 8;

                input_addr = in;
                int32_t *weight_addr_tmp = weight_addr;
                weight_addr += 8 * K;

                for (int k = 0; k < K; k++) {

                    // Loading input - Dim1.length = 8 - Dim0.length = 512, Stride: 1 (dim0) and 0 (dim1)
                    // Loading weight - Dim1.length = 8 - Dim0.length = 512, Stride: 0 (dim0) and 3 (K) (dim1)
                    __mdvdw input_v = _mve_set1_dw(0);
                    __mdvdw weight_v = _mve_set1_dw(0);
                    _mve_set_only_element(1, 0);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 1);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 2);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 3);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 4);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 5);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 6);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 7);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_all_elements(1);

                    input_addr += M;
                    weight_addr_tmp += 1;

                    __mdvdw mult_v = _mve_mul_dw(input_v, weight_v);

                    acc_v = _mve_add_dw(acc_v, mult_v);
                }

                // Caculating Min and Max

                // R4 = R2 min R1
                acc_v = _mve_min_dw(acc_v, max_v);
                acc_v = _mve_max_dw(acc_v, min_v);

                // Storing the results, Stride: 1 (dim0) and 3 (M) (dim1)
                _mve_set_only_element(1, 0);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 1);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 2);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 3);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 4);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 5);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 6);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 7);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_all_elements(1);

                output_addr += 8 * M;

                mve_flusher();
                n += 8;
            }

            if (n + 4 <= N) {
                // Second Dim: N
                _mve_set_dim_length(1, 4);
            }

            while (n + 4 <= N) {

                // Loading bias - Dim1.length = 4 - Dim0.length = 512, Stride: 0 (dim0) and 1 (dim1)
                __mdvdw acc_v = _mve_set1_dw(0);
                _mve_set_only_element(1, 0);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 1);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 2);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 3);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_all_elements(1);

                bias_addr += 4;

                input_addr = in;
                int32_t *weight_addr_tmp = weight_addr;
                weight_addr += 4 * K;

                for (int k = 0; k < K; k++) {

                    // Loading input - Dim1.length = 4 - Dim0.length = 512, Stride: 1 (dim0) and 0 (dim1)
                    // Loading weight - Dim1.length = 4 - Dim0.length = 512, Stride: 0 (dim0) and 3 (K) (dim1)
                    __mdvdw input_v = _mve_set1_dw(0);
                    __mdvdw weight_v = _mve_set1_dw(0);
                    _mve_set_only_element(1, 0);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 1);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 2);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 3);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_all_elements(1);

                    input_addr += M;
                    weight_addr_tmp += 1;

                    __mdvdw mult_v = _mve_mul_dw(input_v, weight_v);

                    acc_v = _mve_add_dw(acc_v, mult_v);
                }

                // Caculating Min and Max

                // R4 = R2 min R1
                acc_v = _mve_min_dw(acc_v, max_v);
                acc_v = _mve_max_dw(acc_v, min_v);

                // Storing the results, Stride: 1 (dim0) and 3 (M) (dim1)
                _mve_set_only_element(1, 0);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 1);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 2);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 3);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_all_elements(1);

                output_addr += 4 * M;

                mve_flusher();
                n += 4;
            }

            if (n + 2 <= N) {
                // Second Dim: N
                _mve_set_dim_length(1, 2);
            }

            while (n + 2 <= N) {

                // Loading bias - Dim1.length = 2 - Dim0.length = 512, Stride: 0 (dim0) and 1 (dim1)
                __mdvdw acc_v = _mve_set1_dw(0);
                _mve_set_only_element(1, 0);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 1);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_all_elements(1);

                bias_addr += 2;

                input_addr = in;
                int32_t *weight_addr_tmp = weight_addr;
                weight_addr += 2 * K;

                for (int k = 0; k < K; k++) {

                    // Loading input - Dim1.length = 2 - Dim0.length = 512, Stride: 1 (dim0) and 0 (dim1)
                    // Loading weight - Dim1.length = 2 - Dim0.length = 512, Stride: 0 (dim0) and 3 (K) (dim1)
                    __mdvdw input_v = _mve_set1_dw(0);
                    __mdvdw weight_v = _mve_set1_dw(0);
                    _mve_set_only_element(1, 0);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 1);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_all_elements(1);

                    input_addr += M;
                    weight_addr_tmp += 1;

                    __mdvdw mult_v = _mve_mul_dw(input_v, weight_v);

                    acc_v = _mve_add_dw(acc_v, mult_v);
                }

                // Caculating Min and Max

                // R4 = R2 min R1
                acc_v = _mve_min_dw(acc_v, max_v);
                acc_v = _mve_max_dw(acc_v, min_v);

                // Storing the results, Stride: 1 (dim0) and 3 (M) (dim1)
                _mve_set_only_element(1, 0);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 1);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_all_elements(1);

                output_addr += 2 * M;

                mve_flusher();
                n += 2;
            }

            if (n + 1 <= N) {
                // Second Dim: N
                _mve_set_dim_length(1, 1);
            }

            while (n + 1 <= N) {

                // Loading bias - Dim1.length = 1 - Dim0.length = 512, Stride: 0 (dim0) and 1 (dim1)
                __mdvdw acc_v = _mve_set1_dw(0);
                _mve_set_only_element(1, 0);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_all_elements(1);

                bias_addr += 1;

                input_addr = in;
                int32_t *weight_addr_tmp = weight_addr;
                weight_addr += 1 * K;

                for (int k = 0; k < K; k++) {

                    // Loading input - Dim1.length = 1 - Dim0.length = 512, Stride: 1 (dim0) and 0 (dim1)
                    // Loading weight - Dim1.length = 1 - Dim0.length = 512, Stride: 0 (dim0) and 3 (K) (dim1)
                    __mdvdw input_v = _mve_set1_dw(0);
                    __mdvdw weight_v = _mve_set1_dw(0);
                    _mve_set_only_element(1, 0);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_all_elements(1);

                    input_addr += M;
                    weight_addr_tmp += 1;

                    __mdvdw mult_v = _mve_mul_dw(input_v, weight_v);

                    acc_v = _mve_add_dw(acc_v, mult_v);
                }

                // Caculating Min and Max

                // R4 = R2 min R1
                acc_v = _mve_min_dw(acc_v, max_v);
                acc_v = _mve_max_dw(acc_v, min_v);

                // Storing the results, Stride: 1 (dim0) and 3 (M) (dim1)
                _mve_set_only_element(1, 0);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_all_elements(1);

                output_addr += 1 * M;

                mve_flusher();
                n += 1;
            }

            in += 512;
            out += 512;
            m += 512;
        }
        if (m + 256 <= M) {
            // First Dim: M
            _mve_set_dim_length(0, 256);
        }
        while (m + 256 <= M) {

            bias_addr = bias;
            weight_addr = weights;
            output_addr = out;

            int n = 0;

            if (n + 32 <= N) {
                // Second Dim: N
                _mve_set_dim_length(1, 32);
            }

            while (n + 32 <= N) {

                // Loading bias - Dim1.length = 32 - Dim0.length = 256, Stride: 0 (dim0) and 1 (dim1)
                __mdvdw acc_v = _mve_set1_dw(0);
                _mve_set_only_element(1, 0);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 1);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 2);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 3);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 4);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 5);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 6);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 7);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 8);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 9);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 10);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 11);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 12);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 13);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 14);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 15);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 16);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 17);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 18);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 19);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 20);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 21);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 22);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 23);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 24);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 25);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 26);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 27);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 28);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 29);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 30);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 31);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_all_elements(1);

                bias_addr += 32;

                input_addr = in;
                int32_t *weight_addr_tmp = weight_addr;
                weight_addr += 32 * K;

                for (int k = 0; k < K; k++) {

                    // Loading input - Dim1.length = 32 - Dim0.length = 256, Stride: 1 (dim0) and 0 (dim1)
                    // Loading weight - Dim1.length = 32 - Dim0.length = 256, Stride: 0 (dim0) and 3 (K) (dim1)
                    __mdvdw input_v = _mve_set1_dw(0);
                    __mdvdw weight_v = _mve_set1_dw(0);
                    _mve_set_only_element(1, 0);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 1);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 2);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 3);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 4);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 5);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 6);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 7);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 8);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 9);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 10);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 11);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 12);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 13);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 14);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 15);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 16);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 17);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 18);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 19);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 20);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 21);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 22);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 23);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 24);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 25);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 26);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 27);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 28);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 29);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 30);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 31);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_all_elements(1);

                    input_addr += M;
                    weight_addr_tmp += 1;

                    __mdvdw mult_v = _mve_mul_dw(input_v, weight_v);

                    acc_v = _mve_add_dw(acc_v, mult_v);
                }

                // Caculating Min and Max

                // R4 = R2 min R1
                acc_v = _mve_min_dw(acc_v, max_v);
                acc_v = _mve_max_dw(acc_v, min_v);

                // Storing the results, Stride: 1 (dim0) and 3 (M) (dim1)
                _mve_set_only_element(1, 0);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 1);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 2);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 3);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 4);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 5);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 6);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 7);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 8);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 9);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 10);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 11);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 12);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 13);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 14);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 15);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 16);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 17);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 18);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 19);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 20);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 21);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 22);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 23);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 24);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 25);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 26);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 27);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 28);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 29);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 30);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 31);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_all_elements(1);

                output_addr += 32 * M;

                mve_flusher();
                n += 32;
            }

            if (n + 16 <= N) {
                // Second Dim: N
                _mve_set_dim_length(1, 16);
            }

            while (n + 16 <= N) {

                // Loading bias - Dim1.length = 16 - Dim0.length = 256, Stride: 0 (dim0) and 1 (dim1)
                __mdvdw acc_v = _mve_set1_dw(0);
                _mve_set_only_element(1, 0);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 1);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 2);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 3);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 4);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 5);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 6);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 7);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 8);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 9);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 10);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 11);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 12);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 13);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 14);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 15);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_all_elements(1);

                bias_addr += 16;

                input_addr = in;
                int32_t *weight_addr_tmp = weight_addr;
                weight_addr += 16 * K;

                for (int k = 0; k < K; k++) {

                    // Loading input - Dim1.length = 16 - Dim0.length = 256, Stride: 1 (dim0) and 0 (dim1)
                    // Loading weight - Dim1.length = 16 - Dim0.length = 256, Stride: 0 (dim0) and 3 (K) (dim1)
                    __mdvdw input_v = _mve_set1_dw(0);
                    __mdvdw weight_v = _mve_set1_dw(0);
                    _mve_set_only_element(1, 0);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 1);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 2);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 3);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 4);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 5);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 6);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 7);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 8);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 9);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 10);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 11);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 12);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 13);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 14);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 15);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_all_elements(1);

                    input_addr += M;
                    weight_addr_tmp += 1;

                    __mdvdw mult_v = _mve_mul_dw(input_v, weight_v);

                    acc_v = _mve_add_dw(acc_v, mult_v);
                }

                // Caculating Min and Max

                // R4 = R2 min R1
                acc_v = _mve_min_dw(acc_v, max_v);
                acc_v = _mve_max_dw(acc_v, min_v);

                // Storing the results, Stride: 1 (dim0) and 3 (M) (dim1)
                _mve_set_only_element(1, 0);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 1);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 2);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 3);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 4);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 5);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 6);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 7);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 8);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 9);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 10);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 11);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 12);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 13);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 14);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 15);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_all_elements(1);

                output_addr += 16 * M;

                mve_flusher();
                n += 16;
            }

            if (n + 8 <= N) {
                // Second Dim: N
                _mve_set_dim_length(1, 8);
            }

            while (n + 8 <= N) {

                // Loading bias - Dim1.length = 8 - Dim0.length = 256, Stride: 0 (dim0) and 1 (dim1)
                __mdvdw acc_v = _mve_set1_dw(0);
                _mve_set_only_element(1, 0);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 1);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 2);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 3);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 4);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 5);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 6);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 7);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_all_elements(1);

                bias_addr += 8;

                input_addr = in;
                int32_t *weight_addr_tmp = weight_addr;
                weight_addr += 8 * K;

                for (int k = 0; k < K; k++) {

                    // Loading input - Dim1.length = 8 - Dim0.length = 256, Stride: 1 (dim0) and 0 (dim1)
                    // Loading weight - Dim1.length = 8 - Dim0.length = 256, Stride: 0 (dim0) and 3 (K) (dim1)
                    __mdvdw input_v = _mve_set1_dw(0);
                    __mdvdw weight_v = _mve_set1_dw(0);
                    _mve_set_only_element(1, 0);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 1);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 2);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 3);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 4);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 5);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 6);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 7);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_all_elements(1);

                    input_addr += M;
                    weight_addr_tmp += 1;

                    __mdvdw mult_v = _mve_mul_dw(input_v, weight_v);

                    acc_v = _mve_add_dw(acc_v, mult_v);
                }

                // Caculating Min and Max

                // R4 = R2 min R1
                acc_v = _mve_min_dw(acc_v, max_v);
                acc_v = _mve_max_dw(acc_v, min_v);

                // Storing the results, Stride: 1 (dim0) and 3 (M) (dim1)
                _mve_set_only_element(1, 0);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 1);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 2);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 3);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 4);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 5);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 6);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 7);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_all_elements(1);

                output_addr += 8 * M;

                mve_flusher();
                n += 8;
            }

            if (n + 4 <= N) {
                // Second Dim: N
                _mve_set_dim_length(1, 4);
            }

            while (n + 4 <= N) {

                // Loading bias - Dim1.length = 4 - Dim0.length = 256, Stride: 0 (dim0) and 1 (dim1)
                __mdvdw acc_v = _mve_set1_dw(0);
                _mve_set_only_element(1, 0);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 1);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 2);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 3);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_all_elements(1);

                bias_addr += 4;

                input_addr = in;
                int32_t *weight_addr_tmp = weight_addr;
                weight_addr += 4 * K;

                for (int k = 0; k < K; k++) {

                    // Loading input - Dim1.length = 4 - Dim0.length = 256, Stride: 1 (dim0) and 0 (dim1)
                    // Loading weight - Dim1.length = 4 - Dim0.length = 256, Stride: 0 (dim0) and 3 (K) (dim1)
                    __mdvdw input_v = _mve_set1_dw(0);
                    __mdvdw weight_v = _mve_set1_dw(0);
                    _mve_set_only_element(1, 0);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 1);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 2);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 3);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_all_elements(1);

                    input_addr += M;
                    weight_addr_tmp += 1;

                    __mdvdw mult_v = _mve_mul_dw(input_v, weight_v);

                    acc_v = _mve_add_dw(acc_v, mult_v);
                }

                // Caculating Min and Max

                // R4 = R2 min R1
                acc_v = _mve_min_dw(acc_v, max_v);
                acc_v = _mve_max_dw(acc_v, min_v);

                // Storing the results, Stride: 1 (dim0) and 3 (M) (dim1)
                _mve_set_only_element(1, 0);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 1);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 2);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 3);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_all_elements(1);

                output_addr += 4 * M;

                mve_flusher();
                n += 4;
            }

            if (n + 2 <= N) {
                // Second Dim: N
                _mve_set_dim_length(1, 2);
            }

            while (n + 2 <= N) {

                // Loading bias - Dim1.length = 2 - Dim0.length = 256, Stride: 0 (dim0) and 1 (dim1)
                __mdvdw acc_v = _mve_set1_dw(0);
                _mve_set_only_element(1, 0);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 1);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_all_elements(1);

                bias_addr += 2;

                input_addr = in;
                int32_t *weight_addr_tmp = weight_addr;
                weight_addr += 2 * K;

                for (int k = 0; k < K; k++) {

                    // Loading input - Dim1.length = 2 - Dim0.length = 256, Stride: 1 (dim0) and 0 (dim1)
                    // Loading weight - Dim1.length = 2 - Dim0.length = 256, Stride: 0 (dim0) and 3 (K) (dim1)
                    __mdvdw input_v = _mve_set1_dw(0);
                    __mdvdw weight_v = _mve_set1_dw(0);
                    _mve_set_only_element(1, 0);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 1);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_all_elements(1);

                    input_addr += M;
                    weight_addr_tmp += 1;

                    __mdvdw mult_v = _mve_mul_dw(input_v, weight_v);

                    acc_v = _mve_add_dw(acc_v, mult_v);
                }

                // Caculating Min and Max

                // R4 = R2 min R1
                acc_v = _mve_min_dw(acc_v, max_v);
                acc_v = _mve_max_dw(acc_v, min_v);

                // Storing the results, Stride: 1 (dim0) and 3 (M) (dim1)
                _mve_set_only_element(1, 0);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 1);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_all_elements(1);

                output_addr += 2 * M;

                mve_flusher();
                n += 2;
            }

            if (n + 1 <= N) {
                // Second Dim: N
                _mve_set_dim_length(1, 1);
            }

            while (n + 1 <= N) {

                // Loading bias - Dim1.length = 1 - Dim0.length = 256, Stride: 0 (dim0) and 1 (dim1)
                __mdvdw acc_v = _mve_set1_dw(0);
                _mve_set_only_element(1, 0);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_all_elements(1);

                bias_addr += 1;

                input_addr = in;
                int32_t *weight_addr_tmp = weight_addr;
                weight_addr += 1 * K;

                for (int k = 0; k < K; k++) {

                    // Loading input - Dim1.length = 1 - Dim0.length = 256, Stride: 1 (dim0) and 0 (dim1)
                    // Loading weight - Dim1.length = 1 - Dim0.length = 256, Stride: 0 (dim0) and 3 (K) (dim1)
                    __mdvdw input_v = _mve_set1_dw(0);
                    __mdvdw weight_v = _mve_set1_dw(0);
                    _mve_set_only_element(1, 0);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_all_elements(1);

                    input_addr += M;
                    weight_addr_tmp += 1;

                    __mdvdw mult_v = _mve_mul_dw(input_v, weight_v);

                    acc_v = _mve_add_dw(acc_v, mult_v);
                }

                // Caculating Min and Max

                // R4 = R2 min R1
                acc_v = _mve_min_dw(acc_v, max_v);
                acc_v = _mve_max_dw(acc_v, min_v);

                // Storing the results, Stride: 1 (dim0) and 3 (M) (dim1)
                _mve_set_only_element(1, 0);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_all_elements(1);

                output_addr += 1 * M;

                mve_flusher();
                n += 1;
            }

            in += 256;
            out += 256;
            m += 256;
        }
        if (m + 128 <= M) {
            // First Dim: M
            _mve_set_dim_length(0, 128);
        }
        while (m + 128 <= M) {

            bias_addr = bias;
            weight_addr = weights;
            output_addr = out;

            int n = 0;

            if (n + 64 <= N) {
                // Second Dim: N
                _mve_set_dim_length(1, 64);
            }

            while (n + 64 <= N) {

                // Loading bias - Dim1.length = 64 - Dim0.length = 128, Stride: 0 (dim0) and 1 (dim1)
                __mdvdw acc_v = _mve_set1_dw(0);
                _mve_set_only_element(1, 0);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 1);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 2);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 3);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 4);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 5);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 6);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 7);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 8);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 9);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 10);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 11);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 12);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 13);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 14);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 15);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 16);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 17);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 18);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 19);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 20);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 21);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 22);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 23);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 24);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 25);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 26);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 27);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 28);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 29);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 30);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 31);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 32);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 33);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 34);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 35);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 36);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 37);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 38);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 39);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 40);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 41);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 42);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 43);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 44);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 45);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 46);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 47);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 48);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 49);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 50);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 51);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 52);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 53);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 54);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 55);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 56);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 57);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 58);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 59);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 60);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 61);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 62);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 63);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_all_elements(1);

                bias_addr += 64;

                input_addr = in;
                int32_t *weight_addr_tmp = weight_addr;
                weight_addr += 64 * K;

                for (int k = 0; k < K; k++) {

                    // Loading input - Dim1.length = 64 - Dim0.length = 128, Stride: 1 (dim0) and 0 (dim1)
                    // Loading weight - Dim1.length = 64 - Dim0.length = 128, Stride: 0 (dim0) and 3 (K) (dim1)
                    __mdvdw input_v = _mve_set1_dw(0);
                    __mdvdw weight_v = _mve_set1_dw(0);
                    _mve_set_only_element(1, 0);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 1);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 2);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 3);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 4);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 5);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 6);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 7);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 8);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 9);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 10);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 11);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 12);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 13);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 14);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 15);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 16);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 17);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 18);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 19);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 20);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 21);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 22);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 23);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 24);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 25);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 26);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 27);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 28);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 29);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 30);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 31);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 32);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 33);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 34);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 35);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 36);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 37);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 38);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 39);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 40);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 41);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 42);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 43);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 44);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 45);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 46);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 47);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 48);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 49);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 50);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 51);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 52);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 53);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 54);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 55);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 56);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 57);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 58);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 59);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 60);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 61);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 62);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 63);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_all_elements(1);

                    input_addr += M;
                    weight_addr_tmp += 1;

                    __mdvdw mult_v = _mve_mul_dw(input_v, weight_v);

                    acc_v = _mve_add_dw(acc_v, mult_v);
                }

                // Caculating Min and Max

                // R4 = R2 min R1
                acc_v = _mve_min_dw(acc_v, max_v);
                acc_v = _mve_max_dw(acc_v, min_v);

                // Storing the results, Stride: 1 (dim0) and 3 (M) (dim1)
                _mve_set_only_element(1, 0);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 1);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 2);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 3);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 4);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 5);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 6);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 7);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 8);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 9);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 10);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 11);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 12);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 13);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 14);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 15);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 16);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 17);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 18);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 19);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 20);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 21);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 22);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 23);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 24);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 25);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 26);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 27);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 28);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 29);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 30);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 31);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 32);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 33);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 34);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 35);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 36);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 37);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 38);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 39);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 40);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 41);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 42);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 43);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 44);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 45);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 46);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 47);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 48);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 49);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 50);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 51);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 52);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 53);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 54);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 55);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 56);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 57);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 58);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 59);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 60);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 61);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 62);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 63);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_all_elements(1);

                output_addr += 64 * M;

                mve_flusher();
                n += 64;
            }

            if (n + 32 <= N) {
                // Second Dim: N
                _mve_set_dim_length(1, 32);
            }

            while (n + 32 <= N) {

                // Loading bias - Dim1.length = 32 - Dim0.length = 128, Stride: 0 (dim0) and 1 (dim1)
                __mdvdw acc_v = _mve_set1_dw(0);
                _mve_set_only_element(1, 0);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 1);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 2);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 3);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 4);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 5);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 6);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 7);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 8);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 9);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 10);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 11);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 12);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 13);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 14);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 15);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 16);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 17);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 18);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 19);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 20);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 21);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 22);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 23);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 24);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 25);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 26);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 27);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 28);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 29);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 30);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 31);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_all_elements(1);

                bias_addr += 32;

                input_addr = in;
                int32_t *weight_addr_tmp = weight_addr;
                weight_addr += 32 * K;

                for (int k = 0; k < K; k++) {

                    // Loading input - Dim1.length = 32 - Dim0.length = 128, Stride: 1 (dim0) and 0 (dim1)
                    // Loading weight - Dim1.length = 32 - Dim0.length = 128, Stride: 0 (dim0) and 3 (K) (dim1)
                    __mdvdw input_v = _mve_set1_dw(0);
                    __mdvdw weight_v = _mve_set1_dw(0);
                    _mve_set_only_element(1, 0);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 1);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 2);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 3);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 4);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 5);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 6);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 7);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 8);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 9);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 10);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 11);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 12);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 13);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 14);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 15);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 16);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 17);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 18);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 19);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 20);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 21);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 22);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 23);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 24);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 25);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 26);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 27);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 28);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 29);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 30);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 31);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_all_elements(1);

                    input_addr += M;
                    weight_addr_tmp += 1;

                    __mdvdw mult_v = _mve_mul_dw(input_v, weight_v);

                    acc_v = _mve_add_dw(acc_v, mult_v);
                }

                // Caculating Min and Max

                // R4 = R2 min R1
                acc_v = _mve_min_dw(acc_v, max_v);
                acc_v = _mve_max_dw(acc_v, min_v);

                // Storing the results, Stride: 1 (dim0) and 3 (M) (dim1)
                _mve_set_only_element(1, 0);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 1);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 2);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 3);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 4);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 5);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 6);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 7);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 8);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 9);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 10);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 11);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 12);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 13);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 14);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 15);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 16);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 17);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 18);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 19);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 20);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 21);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 22);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 23);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 24);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 25);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 26);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 27);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 28);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 29);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 30);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 31);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_all_elements(1);

                output_addr += 32 * M;

                mve_flusher();
                n += 32;
            }

            if (n + 16 <= N) {
                // Second Dim: N
                _mve_set_dim_length(1, 16);
            }

            while (n + 16 <= N) {

                // Loading bias - Dim1.length = 16 - Dim0.length = 128, Stride: 0 (dim0) and 1 (dim1)
                __mdvdw acc_v = _mve_set1_dw(0);
                _mve_set_only_element(1, 0);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 1);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 2);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 3);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 4);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 5);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 6);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 7);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 8);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 9);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 10);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 11);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 12);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 13);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 14);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 15);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_all_elements(1);

                bias_addr += 16;

                input_addr = in;
                int32_t *weight_addr_tmp = weight_addr;
                weight_addr += 16 * K;

                for (int k = 0; k < K; k++) {

                    // Loading input - Dim1.length = 16 - Dim0.length = 128, Stride: 1 (dim0) and 0 (dim1)
                    // Loading weight - Dim1.length = 16 - Dim0.length = 128, Stride: 0 (dim0) and 3 (K) (dim1)
                    __mdvdw input_v = _mve_set1_dw(0);
                    __mdvdw weight_v = _mve_set1_dw(0);
                    _mve_set_only_element(1, 0);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 1);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 2);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 3);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 4);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 5);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 6);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 7);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 8);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 9);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 10);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 11);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 12);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 13);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 14);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 15);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_all_elements(1);

                    input_addr += M;
                    weight_addr_tmp += 1;

                    __mdvdw mult_v = _mve_mul_dw(input_v, weight_v);

                    acc_v = _mve_add_dw(acc_v, mult_v);
                }

                // Caculating Min and Max

                // R4 = R2 min R1
                acc_v = _mve_min_dw(acc_v, max_v);
                acc_v = _mve_max_dw(acc_v, min_v);

                // Storing the results, Stride: 1 (dim0) and 3 (M) (dim1)
                _mve_set_only_element(1, 0);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 1);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 2);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 3);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 4);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 5);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 6);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 7);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 8);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 9);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 10);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 11);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 12);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 13);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 14);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 15);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_all_elements(1);

                output_addr += 16 * M;

                mve_flusher();
                n += 16;
            }

            if (n + 8 <= N) {
                // Second Dim: N
                _mve_set_dim_length(1, 8);
            }

            while (n + 8 <= N) {

                // Loading bias - Dim1.length = 8 - Dim0.length = 128, Stride: 0 (dim0) and 1 (dim1)
                __mdvdw acc_v = _mve_set1_dw(0);
                _mve_set_only_element(1, 0);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 1);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 2);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 3);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 4);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 5);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 6);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 7);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_all_elements(1);

                bias_addr += 8;

                input_addr = in;
                int32_t *weight_addr_tmp = weight_addr;
                weight_addr += 8 * K;

                for (int k = 0; k < K; k++) {

                    // Loading input - Dim1.length = 8 - Dim0.length = 128, Stride: 1 (dim0) and 0 (dim1)
                    // Loading weight - Dim1.length = 8 - Dim0.length = 128, Stride: 0 (dim0) and 3 (K) (dim1)
                    __mdvdw input_v = _mve_set1_dw(0);
                    __mdvdw weight_v = _mve_set1_dw(0);
                    _mve_set_only_element(1, 0);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 1);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 2);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 3);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 4);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 5);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 6);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 7);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_all_elements(1);

                    input_addr += M;
                    weight_addr_tmp += 1;

                    __mdvdw mult_v = _mve_mul_dw(input_v, weight_v);

                    acc_v = _mve_add_dw(acc_v, mult_v);
                }

                // Caculating Min and Max

                // R4 = R2 min R1
                acc_v = _mve_min_dw(acc_v, max_v);
                acc_v = _mve_max_dw(acc_v, min_v);

                // Storing the results, Stride: 1 (dim0) and 3 (M) (dim1)
                _mve_set_only_element(1, 0);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 1);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 2);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 3);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 4);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 5);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 6);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 7);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_all_elements(1);

                output_addr += 8 * M;

                mve_flusher();
                n += 8;
            }

            if (n + 4 <= N) {
                // Second Dim: N
                _mve_set_dim_length(1, 4);
            }

            while (n + 4 <= N) {

                // Loading bias - Dim1.length = 4 - Dim0.length = 128, Stride: 0 (dim0) and 1 (dim1)
                __mdvdw acc_v = _mve_set1_dw(0);
                _mve_set_only_element(1, 0);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 1);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 2);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 3);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_all_elements(1);

                bias_addr += 4;

                input_addr = in;
                int32_t *weight_addr_tmp = weight_addr;
                weight_addr += 4 * K;

                for (int k = 0; k < K; k++) {

                    // Loading input - Dim1.length = 4 - Dim0.length = 128, Stride: 1 (dim0) and 0 (dim1)
                    // Loading weight - Dim1.length = 4 - Dim0.length = 128, Stride: 0 (dim0) and 3 (K) (dim1)
                    __mdvdw input_v = _mve_set1_dw(0);
                    __mdvdw weight_v = _mve_set1_dw(0);
                    _mve_set_only_element(1, 0);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 1);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 2);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 3);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_all_elements(1);

                    input_addr += M;
                    weight_addr_tmp += 1;

                    __mdvdw mult_v = _mve_mul_dw(input_v, weight_v);

                    acc_v = _mve_add_dw(acc_v, mult_v);
                }

                // Caculating Min and Max

                // R4 = R2 min R1
                acc_v = _mve_min_dw(acc_v, max_v);
                acc_v = _mve_max_dw(acc_v, min_v);

                // Storing the results, Stride: 1 (dim0) and 3 (M) (dim1)
                _mve_set_only_element(1, 0);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 1);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 2);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 3);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_all_elements(1);

                output_addr += 4 * M;

                mve_flusher();
                n += 4;
            }

            if (n + 2 <= N) {
                // Second Dim: N
                _mve_set_dim_length(1, 2);
            }

            while (n + 2 <= N) {

                // Loading bias - Dim1.length = 2 - Dim0.length = 128, Stride: 0 (dim0) and 1 (dim1)
                __mdvdw acc_v = _mve_set1_dw(0);
                _mve_set_only_element(1, 0);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 1);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_all_elements(1);

                bias_addr += 2;

                input_addr = in;
                int32_t *weight_addr_tmp = weight_addr;
                weight_addr += 2 * K;

                for (int k = 0; k < K; k++) {

                    // Loading input - Dim1.length = 2 - Dim0.length = 128, Stride: 1 (dim0) and 0 (dim1)
                    // Loading weight - Dim1.length = 2 - Dim0.length = 128, Stride: 0 (dim0) and 3 (K) (dim1)
                    __mdvdw input_v = _mve_set1_dw(0);
                    __mdvdw weight_v = _mve_set1_dw(0);
                    _mve_set_only_element(1, 0);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 1);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_all_elements(1);

                    input_addr += M;
                    weight_addr_tmp += 1;

                    __mdvdw mult_v = _mve_mul_dw(input_v, weight_v);

                    acc_v = _mve_add_dw(acc_v, mult_v);
                }

                // Caculating Min and Max

                // R4 = R2 min R1
                acc_v = _mve_min_dw(acc_v, max_v);
                acc_v = _mve_max_dw(acc_v, min_v);

                // Storing the results, Stride: 1 (dim0) and 3 (M) (dim1)
                _mve_set_only_element(1, 0);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 1);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_all_elements(1);

                output_addr += 2 * M;

                mve_flusher();
                n += 2;
            }

            if (n + 1 <= N) {
                // Second Dim: N
                _mve_set_dim_length(1, 1);
            }

            while (n + 1 <= N) {

                // Loading bias - Dim1.length = 1 - Dim0.length = 128, Stride: 0 (dim0) and 1 (dim1)
                __mdvdw acc_v = _mve_set1_dw(0);
                _mve_set_only_element(1, 0);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_all_elements(1);

                bias_addr += 1;

                input_addr = in;
                int32_t *weight_addr_tmp = weight_addr;
                weight_addr += 1 * K;

                for (int k = 0; k < K; k++) {

                    // Loading input - Dim1.length = 1 - Dim0.length = 128, Stride: 1 (dim0) and 0 (dim1)
                    // Loading weight - Dim1.length = 1 - Dim0.length = 128, Stride: 0 (dim0) and 3 (K) (dim1)
                    __mdvdw input_v = _mve_set1_dw(0);
                    __mdvdw weight_v = _mve_set1_dw(0);
                    _mve_set_only_element(1, 0);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_all_elements(1);

                    input_addr += M;
                    weight_addr_tmp += 1;

                    __mdvdw mult_v = _mve_mul_dw(input_v, weight_v);

                    acc_v = _mve_add_dw(acc_v, mult_v);
                }

                // Caculating Min and Max

                // R4 = R2 min R1
                acc_v = _mve_min_dw(acc_v, max_v);
                acc_v = _mve_max_dw(acc_v, min_v);

                // Storing the results, Stride: 1 (dim0) and 3 (M) (dim1)
                _mve_set_only_element(1, 0);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_all_elements(1);

                output_addr += 1 * M;

                mve_flusher();
                n += 1;
            }

            in += 128;
            out += 128;
            m += 128;
        }
        if (m + 64 <= M) {
            // First Dim: M
            _mve_set_dim_length(0, 64);
        }
        while (m + 64 <= M) {

            bias_addr = bias;
            weight_addr = weights;
            output_addr = out;

            int n = 0;

            if (n + 128 <= N) {
                // Second Dim: N
                _mve_set_dim_length(1, 128);
            }

            while (n + 128 <= N) {

                // Loading bias - Dim1.length = 128 - Dim0.length = 64, Stride: 0 (dim0) and 1 (dim1)
                __mdvdw acc_v = _mve_set1_dw(0);
                _mve_set_only_element(1, 0);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 1);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 2);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 3);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 4);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 5);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 6);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 7);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 8);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 9);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 10);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 11);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 12);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 13);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 14);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 15);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 16);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 17);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 18);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 19);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 20);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 21);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 22);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 23);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 24);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 25);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 26);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 27);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 28);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 29);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 30);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 31);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 32);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 33);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 34);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 35);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 36);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 37);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 38);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 39);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 40);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 41);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 42);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 43);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 44);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 45);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 46);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 47);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 48);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 49);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 50);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 51);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 52);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 53);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 54);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 55);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 56);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 57);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 58);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 59);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 60);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 61);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 62);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 63);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 64);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 65);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 66);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 67);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 68);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 69);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 70);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 71);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 72);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 73);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 74);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 75);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 76);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 77);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 78);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 79);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 80);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 81);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 82);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 83);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 84);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 85);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 86);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 87);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 88);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 89);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 90);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 91);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 92);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 93);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 94);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 95);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 96);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 97);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 98);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 99);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 100);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 101);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 102);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 103);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 104);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 105);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 106);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 107);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 108);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 109);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 110);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 111);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 112);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 113);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 114);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 115);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 116);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 117);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 118);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 119);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 120);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 121);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 122);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 123);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 124);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 125);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 126);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 127);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_all_elements(1);

                bias_addr += 128;

                input_addr = in;
                int32_t *weight_addr_tmp = weight_addr;
                weight_addr += 128 * K;

                for (int k = 0; k < K; k++) {

                    // Loading input - Dim1.length = 128 - Dim0.length = 64, Stride: 1 (dim0) and 0 (dim1)
                    // Loading weight - Dim1.length = 128 - Dim0.length = 64, Stride: 0 (dim0) and 3 (K) (dim1)
                    __mdvdw input_v = _mve_set1_dw(0);
                    __mdvdw weight_v = _mve_set1_dw(0);
                    _mve_set_only_element(1, 0);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 1);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 2);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 3);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 4);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 5);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 6);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 7);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 8);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 9);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 10);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 11);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 12);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 13);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 14);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 15);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 16);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 17);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 18);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 19);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 20);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 21);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 22);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 23);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 24);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 25);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 26);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 27);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 28);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 29);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 30);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 31);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 32);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 33);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 34);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 35);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 36);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 37);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 38);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 39);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 40);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 41);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 42);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 43);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 44);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 45);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 46);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 47);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 48);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 49);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 50);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 51);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 52);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 53);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 54);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 55);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 56);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 57);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 58);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 59);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 60);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 61);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 62);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 63);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 64);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 65);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 66);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 67);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 68);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 69);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 70);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 71);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 72);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 73);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 74);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 75);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 76);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 77);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 78);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 79);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 80);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 81);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 82);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 83);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 84);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 85);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 86);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 87);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 88);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 89);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 90);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 91);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 92);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 93);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 94);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 95);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 96);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 97);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 98);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 99);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 100);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 101);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 102);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 103);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 104);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 105);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 106);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 107);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 108);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 109);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 110);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 111);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 112);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 113);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 114);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 115);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 116);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 117);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 118);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 119);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 120);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 121);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 122);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 123);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 124);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 125);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 126);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 127);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_all_elements(1);

                    input_addr += M;
                    weight_addr_tmp += 1;

                    __mdvdw mult_v = _mve_mul_dw(input_v, weight_v);

                    acc_v = _mve_add_dw(acc_v, mult_v);
                }

                // Caculating Min and Max

                // R4 = R2 min R1
                acc_v = _mve_min_dw(acc_v, max_v);
                acc_v = _mve_max_dw(acc_v, min_v);

                // Storing the results, Stride: 1 (dim0) and 3 (M) (dim1)
                _mve_set_only_element(1, 0);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 1);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 2);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 3);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 4);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 5);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 6);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 7);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 8);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 9);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 10);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 11);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 12);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 13);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 14);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 15);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 16);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 17);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 18);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 19);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 20);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 21);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 22);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 23);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 24);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 25);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 26);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 27);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 28);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 29);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 30);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 31);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 32);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 33);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 34);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 35);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 36);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 37);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 38);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 39);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 40);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 41);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 42);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 43);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 44);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 45);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 46);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 47);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 48);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 49);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 50);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 51);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 52);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 53);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 54);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 55);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 56);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 57);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 58);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 59);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 60);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 61);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 62);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 63);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 64);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 65);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 66);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 67);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 68);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 69);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 70);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 71);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 72);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 73);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 74);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 75);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 76);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 77);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 78);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 79);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 80);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 81);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 82);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 83);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 84);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 85);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 86);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 87);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 88);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 89);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 90);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 91);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 92);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 93);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 94);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 95);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 96);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 97);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 98);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 99);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 100);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 101);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 102);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 103);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 104);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 105);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 106);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 107);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 108);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 109);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 110);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 111);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 112);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 113);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 114);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 115);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 116);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 117);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 118);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 119);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 120);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 121);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 122);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 123);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 124);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 125);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 126);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 127);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_all_elements(1);

                output_addr += 128 * M;

                mve_flusher();
                n += 128;
            }

            if (n + 64 <= N) {
                // Second Dim: N
                _mve_set_dim_length(1, 64);
            }

            while (n + 64 <= N) {

                // Loading bias - Dim1.length = 64 - Dim0.length = 64, Stride: 0 (dim0) and 1 (dim1)
                __mdvdw acc_v = _mve_set1_dw(0);
                _mve_set_only_element(1, 0);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 1);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 2);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 3);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 4);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 5);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 6);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 7);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 8);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 9);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 10);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 11);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 12);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 13);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 14);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 15);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 16);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 17);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 18);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 19);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 20);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 21);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 22);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 23);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 24);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 25);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 26);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 27);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 28);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 29);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 30);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 31);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 32);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 33);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 34);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 35);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 36);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 37);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 38);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 39);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 40);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 41);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 42);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 43);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 44);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 45);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 46);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 47);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 48);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 49);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 50);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 51);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 52);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 53);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 54);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 55);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 56);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 57);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 58);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 59);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 60);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 61);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 62);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 63);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_all_elements(1);

                bias_addr += 64;

                input_addr = in;
                int32_t *weight_addr_tmp = weight_addr;
                weight_addr += 64 * K;

                for (int k = 0; k < K; k++) {

                    // Loading input - Dim1.length = 64 - Dim0.length = 64, Stride: 1 (dim0) and 0 (dim1)
                    // Loading weight - Dim1.length = 64 - Dim0.length = 64, Stride: 0 (dim0) and 3 (K) (dim1)
                    __mdvdw input_v = _mve_set1_dw(0);
                    __mdvdw weight_v = _mve_set1_dw(0);
                    _mve_set_only_element(1, 0);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 1);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 2);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 3);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 4);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 5);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 6);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 7);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 8);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 9);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 10);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 11);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 12);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 13);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 14);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 15);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 16);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 17);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 18);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 19);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 20);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 21);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 22);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 23);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 24);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 25);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 26);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 27);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 28);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 29);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 30);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 31);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 32);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 33);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 34);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 35);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 36);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 37);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 38);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 39);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 40);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 41);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 42);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 43);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 44);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 45);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 46);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 47);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 48);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 49);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 50);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 51);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 52);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 53);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 54);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 55);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 56);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 57);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 58);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 59);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 60);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 61);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 62);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 63);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_all_elements(1);

                    input_addr += M;
                    weight_addr_tmp += 1;

                    __mdvdw mult_v = _mve_mul_dw(input_v, weight_v);

                    acc_v = _mve_add_dw(acc_v, mult_v);
                }

                // Caculating Min and Max

                // R4 = R2 min R1
                acc_v = _mve_min_dw(acc_v, max_v);
                acc_v = _mve_max_dw(acc_v, min_v);

                // Storing the results, Stride: 1 (dim0) and 3 (M) (dim1)
                _mve_set_only_element(1, 0);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 1);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 2);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 3);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 4);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 5);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 6);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 7);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 8);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 9);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 10);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 11);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 12);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 13);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 14);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 15);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 16);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 17);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 18);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 19);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 20);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 21);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 22);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 23);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 24);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 25);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 26);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 27);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 28);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 29);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 30);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 31);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 32);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 33);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 34);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 35);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 36);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 37);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 38);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 39);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 40);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 41);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 42);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 43);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 44);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 45);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 46);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 47);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 48);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 49);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 50);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 51);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 52);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 53);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 54);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 55);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 56);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 57);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 58);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 59);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 60);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 61);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 62);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 63);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_all_elements(1);

                output_addr += 64 * M;

                mve_flusher();
                n += 64;
            }

            if (n + 32 <= N) {
                // Second Dim: N
                _mve_set_dim_length(1, 32);
            }

            while (n + 32 <= N) {

                // Loading bias - Dim1.length = 32 - Dim0.length = 64, Stride: 0 (dim0) and 1 (dim1)
                __mdvdw acc_v = _mve_set1_dw(0);
                _mve_set_only_element(1, 0);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 1);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 2);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 3);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 4);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 5);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 6);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 7);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 8);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 9);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 10);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 11);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 12);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 13);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 14);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 15);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 16);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 17);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 18);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 19);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 20);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 21);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 22);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 23);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 24);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 25);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 26);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 27);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 28);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 29);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 30);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 31);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_all_elements(1);

                bias_addr += 32;

                input_addr = in;
                int32_t *weight_addr_tmp = weight_addr;
                weight_addr += 32 * K;

                for (int k = 0; k < K; k++) {

                    // Loading input - Dim1.length = 32 - Dim0.length = 64, Stride: 1 (dim0) and 0 (dim1)
                    // Loading weight - Dim1.length = 32 - Dim0.length = 64, Stride: 0 (dim0) and 3 (K) (dim1)
                    __mdvdw input_v = _mve_set1_dw(0);
                    __mdvdw weight_v = _mve_set1_dw(0);
                    _mve_set_only_element(1, 0);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 1);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 2);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 3);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 4);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 5);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 6);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 7);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 8);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 9);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 10);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 11);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 12);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 13);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 14);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 15);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 16);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 17);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 18);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 19);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 20);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 21);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 22);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 23);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 24);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 25);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 26);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 27);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 28);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 29);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 30);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 31);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_all_elements(1);

                    input_addr += M;
                    weight_addr_tmp += 1;

                    __mdvdw mult_v = _mve_mul_dw(input_v, weight_v);

                    acc_v = _mve_add_dw(acc_v, mult_v);
                }

                // Caculating Min and Max

                // R4 = R2 min R1
                acc_v = _mve_min_dw(acc_v, max_v);
                acc_v = _mve_max_dw(acc_v, min_v);

                // Storing the results, Stride: 1 (dim0) and 3 (M) (dim1)
                _mve_set_only_element(1, 0);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 1);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 2);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 3);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 4);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 5);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 6);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 7);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 8);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 9);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 10);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 11);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 12);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 13);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 14);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 15);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 16);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 17);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 18);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 19);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 20);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 21);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 22);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 23);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 24);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 25);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 26);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 27);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 28);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 29);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 30);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 31);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_all_elements(1);

                output_addr += 32 * M;

                mve_flusher();
                n += 32;
            }

            if (n + 16 <= N) {
                // Second Dim: N
                _mve_set_dim_length(1, 16);
            }

            while (n + 16 <= N) {

                // Loading bias - Dim1.length = 16 - Dim0.length = 64, Stride: 0 (dim0) and 1 (dim1)
                __mdvdw acc_v = _mve_set1_dw(0);
                _mve_set_only_element(1, 0);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 1);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 2);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 3);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 4);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 5);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 6);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 7);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 8);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 9);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 10);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 11);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 12);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 13);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 14);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 15);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_all_elements(1);

                bias_addr += 16;

                input_addr = in;
                int32_t *weight_addr_tmp = weight_addr;
                weight_addr += 16 * K;

                for (int k = 0; k < K; k++) {

                    // Loading input - Dim1.length = 16 - Dim0.length = 64, Stride: 1 (dim0) and 0 (dim1)
                    // Loading weight - Dim1.length = 16 - Dim0.length = 64, Stride: 0 (dim0) and 3 (K) (dim1)
                    __mdvdw input_v = _mve_set1_dw(0);
                    __mdvdw weight_v = _mve_set1_dw(0);
                    _mve_set_only_element(1, 0);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 1);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 2);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 3);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 4);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 5);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 6);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 7);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 8);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 9);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 10);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 11);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 12);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 13);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 14);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 15);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_all_elements(1);

                    input_addr += M;
                    weight_addr_tmp += 1;

                    __mdvdw mult_v = _mve_mul_dw(input_v, weight_v);

                    acc_v = _mve_add_dw(acc_v, mult_v);
                }

                // Caculating Min and Max

                // R4 = R2 min R1
                acc_v = _mve_min_dw(acc_v, max_v);
                acc_v = _mve_max_dw(acc_v, min_v);

                // Storing the results, Stride: 1 (dim0) and 3 (M) (dim1)
                _mve_set_only_element(1, 0);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 1);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 2);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 3);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 4);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 5);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 6);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 7);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 8);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 9);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 10);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 11);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 12);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 13);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 14);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 15);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_all_elements(1);

                output_addr += 16 * M;

                mve_flusher();
                n += 16;
            }

            if (n + 8 <= N) {
                // Second Dim: N
                _mve_set_dim_length(1, 8);
            }

            while (n + 8 <= N) {

                // Loading bias - Dim1.length = 8 - Dim0.length = 64, Stride: 0 (dim0) and 1 (dim1)
                __mdvdw acc_v = _mve_set1_dw(0);
                _mve_set_only_element(1, 0);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 1);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 2);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 3);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 4);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 5);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 6);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 7);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_all_elements(1);

                bias_addr += 8;

                input_addr = in;
                int32_t *weight_addr_tmp = weight_addr;
                weight_addr += 8 * K;

                for (int k = 0; k < K; k++) {

                    // Loading input - Dim1.length = 8 - Dim0.length = 64, Stride: 1 (dim0) and 0 (dim1)
                    // Loading weight - Dim1.length = 8 - Dim0.length = 64, Stride: 0 (dim0) and 3 (K) (dim1)
                    __mdvdw input_v = _mve_set1_dw(0);
                    __mdvdw weight_v = _mve_set1_dw(0);
                    _mve_set_only_element(1, 0);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 1);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 2);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 3);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 4);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 5);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 6);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 7);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_all_elements(1);

                    input_addr += M;
                    weight_addr_tmp += 1;

                    __mdvdw mult_v = _mve_mul_dw(input_v, weight_v);

                    acc_v = _mve_add_dw(acc_v, mult_v);
                }

                // Caculating Min and Max

                // R4 = R2 min R1
                acc_v = _mve_min_dw(acc_v, max_v);
                acc_v = _mve_max_dw(acc_v, min_v);

                // Storing the results, Stride: 1 (dim0) and 3 (M) (dim1)
                _mve_set_only_element(1, 0);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 1);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 2);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 3);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 4);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 5);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 6);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 7);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_all_elements(1);

                output_addr += 8 * M;

                mve_flusher();
                n += 8;
            }

            if (n + 4 <= N) {
                // Second Dim: N
                _mve_set_dim_length(1, 4);
            }

            while (n + 4 <= N) {

                // Loading bias - Dim1.length = 4 - Dim0.length = 64, Stride: 0 (dim0) and 1 (dim1)
                __mdvdw acc_v = _mve_set1_dw(0);
                _mve_set_only_element(1, 0);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 1);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 2);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 3);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_all_elements(1);

                bias_addr += 4;

                input_addr = in;
                int32_t *weight_addr_tmp = weight_addr;
                weight_addr += 4 * K;

                for (int k = 0; k < K; k++) {

                    // Loading input - Dim1.length = 4 - Dim0.length = 64, Stride: 1 (dim0) and 0 (dim1)
                    // Loading weight - Dim1.length = 4 - Dim0.length = 64, Stride: 0 (dim0) and 3 (K) (dim1)
                    __mdvdw input_v = _mve_set1_dw(0);
                    __mdvdw weight_v = _mve_set1_dw(0);
                    _mve_set_only_element(1, 0);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 1);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 2);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 3);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_all_elements(1);

                    input_addr += M;
                    weight_addr_tmp += 1;

                    __mdvdw mult_v = _mve_mul_dw(input_v, weight_v);

                    acc_v = _mve_add_dw(acc_v, mult_v);
                }

                // Caculating Min and Max

                // R4 = R2 min R1
                acc_v = _mve_min_dw(acc_v, max_v);
                acc_v = _mve_max_dw(acc_v, min_v);

                // Storing the results, Stride: 1 (dim0) and 3 (M) (dim1)
                _mve_set_only_element(1, 0);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 1);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 2);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 3);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_all_elements(1);

                output_addr += 4 * M;

                mve_flusher();
                n += 4;
            }

            if (n + 2 <= N) {
                // Second Dim: N
                _mve_set_dim_length(1, 2);
            }

            while (n + 2 <= N) {

                // Loading bias - Dim1.length = 2 - Dim0.length = 64, Stride: 0 (dim0) and 1 (dim1)
                __mdvdw acc_v = _mve_set1_dw(0);
                _mve_set_only_element(1, 0);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 1);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_all_elements(1);

                bias_addr += 2;

                input_addr = in;
                int32_t *weight_addr_tmp = weight_addr;
                weight_addr += 2 * K;

                for (int k = 0; k < K; k++) {

                    // Loading input - Dim1.length = 2 - Dim0.length = 64, Stride: 1 (dim0) and 0 (dim1)
                    // Loading weight - Dim1.length = 2 - Dim0.length = 64, Stride: 0 (dim0) and 3 (K) (dim1)
                    __mdvdw input_v = _mve_set1_dw(0);
                    __mdvdw weight_v = _mve_set1_dw(0);
                    _mve_set_only_element(1, 0);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 1);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_all_elements(1);

                    input_addr += M;
                    weight_addr_tmp += 1;

                    __mdvdw mult_v = _mve_mul_dw(input_v, weight_v);

                    acc_v = _mve_add_dw(acc_v, mult_v);
                }

                // Caculating Min and Max

                // R4 = R2 min R1
                acc_v = _mve_min_dw(acc_v, max_v);
                acc_v = _mve_max_dw(acc_v, min_v);

                // Storing the results, Stride: 1 (dim0) and 3 (M) (dim1)
                _mve_set_only_element(1, 0);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 1);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_all_elements(1);

                output_addr += 2 * M;

                mve_flusher();
                n += 2;
            }

            if (n + 1 <= N) {
                // Second Dim: N
                _mve_set_dim_length(1, 1);
            }

            while (n + 1 <= N) {

                // Loading bias - Dim1.length = 1 - Dim0.length = 64, Stride: 0 (dim0) and 1 (dim1)
                __mdvdw acc_v = _mve_set1_dw(0);
                _mve_set_only_element(1, 0);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_all_elements(1);

                bias_addr += 1;

                input_addr = in;
                int32_t *weight_addr_tmp = weight_addr;
                weight_addr += 1 * K;

                for (int k = 0; k < K; k++) {

                    // Loading input - Dim1.length = 1 - Dim0.length = 64, Stride: 1 (dim0) and 0 (dim1)
                    // Loading weight - Dim1.length = 1 - Dim0.length = 64, Stride: 0 (dim0) and 3 (K) (dim1)
                    __mdvdw input_v = _mve_set1_dw(0);
                    __mdvdw weight_v = _mve_set1_dw(0);
                    _mve_set_only_element(1, 0);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_all_elements(1);

                    input_addr += M;
                    weight_addr_tmp += 1;

                    __mdvdw mult_v = _mve_mul_dw(input_v, weight_v);

                    acc_v = _mve_add_dw(acc_v, mult_v);
                }

                // Caculating Min and Max

                // R4 = R2 min R1
                acc_v = _mve_min_dw(acc_v, max_v);
                acc_v = _mve_max_dw(acc_v, min_v);

                // Storing the results, Stride: 1 (dim0) and 3 (M) (dim1)
                _mve_set_only_element(1, 0);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_all_elements(1);

                output_addr += 1 * M;

                mve_flusher();
                n += 1;
            }

            in += 64;
            out += 64;
            m += 64;
        }
        if (m + 32 <= M) {
            // First Dim: M
            _mve_set_dim_length(0, 32);
        }
        while (m + 32 <= M) {

            bias_addr = bias;
            weight_addr = weights;
            output_addr = out;

            int n = 0;

            if (n + 256 <= N) {
                // Second Dim: N
                _mve_set_dim_length(1, 256);
            }

            while (n + 256 <= N) {

                // Loading bias - Dim1.length = 256 - Dim0.length = 32, Stride: 0 (dim0) and 1 (dim1)
                __mdvdw acc_v = _mve_set1_dw(0);
                _mve_set_only_element(1, 0);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 1);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 2);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 3);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 4);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 5);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 6);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 7);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 8);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 9);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 10);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 11);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 12);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 13);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 14);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 15);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 16);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 17);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 18);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 19);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 20);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 21);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 22);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 23);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 24);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 25);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 26);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 27);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 28);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 29);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 30);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 31);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 32);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 33);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 34);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 35);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 36);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 37);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 38);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 39);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 40);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 41);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 42);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 43);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 44);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 45);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 46);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 47);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 48);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 49);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 50);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 51);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 52);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 53);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 54);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 55);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 56);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 57);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 58);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 59);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 60);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 61);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 62);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 63);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 64);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 65);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 66);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 67);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 68);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 69);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 70);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 71);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 72);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 73);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 74);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 75);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 76);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 77);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 78);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 79);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 80);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 81);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 82);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 83);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 84);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 85);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 86);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 87);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 88);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 89);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 90);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 91);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 92);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 93);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 94);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 95);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 96);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 97);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 98);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 99);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 100);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 101);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 102);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 103);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 104);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 105);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 106);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 107);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 108);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 109);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 110);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 111);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 112);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 113);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 114);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 115);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 116);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 117);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 118);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 119);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 120);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 121);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 122);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 123);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 124);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 125);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 126);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 127);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 128);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 129);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 130);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 131);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 132);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 133);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 134);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 135);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 136);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 137);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 138);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 139);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 140);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 141);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 142);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 143);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 144);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 145);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 146);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 147);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 148);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 149);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 150);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 151);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 152);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 153);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 154);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 155);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 156);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 157);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 158);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 159);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 160);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 161);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 162);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 163);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 164);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 165);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 166);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 167);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 168);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 169);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 170);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 171);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 172);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 173);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 174);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 175);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 176);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 177);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 178);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 179);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 180);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 181);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 182);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 183);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 184);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 185);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 186);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 187);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 188);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 189);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 190);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 191);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 192);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 193);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 194);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 195);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 196);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 197);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 198);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 199);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 200);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 201);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 202);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 203);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 204);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 205);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 206);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 207);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 208);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 209);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 210);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 211);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 212);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 213);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 214);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 215);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 216);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 217);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 218);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 219);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 220);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 221);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 222);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 223);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 224);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 225);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 226);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 227);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 228);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 229);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 230);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 231);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 232);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 233);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 234);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 235);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 236);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 237);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 238);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 239);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 240);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 241);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 242);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 243);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 244);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 245);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 246);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 247);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 248);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 249);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 250);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 251);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 252);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 253);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 254);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 255);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_all_elements(1);

                bias_addr += 256;

                input_addr = in;
                int32_t *weight_addr_tmp = weight_addr;
                weight_addr += 256 * K;

                for (int k = 0; k < K; k++) {

                    // Loading input - Dim1.length = 256 - Dim0.length = 32, Stride: 1 (dim0) and 0 (dim1)
                    // Loading weight - Dim1.length = 256 - Dim0.length = 32, Stride: 0 (dim0) and 3 (K) (dim1)
                    __mdvdw input_v = _mve_set1_dw(0);
                    __mdvdw weight_v = _mve_set1_dw(0);
                    _mve_set_only_element(1, 0);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 1);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 2);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 3);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 4);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 5);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 6);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 7);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 8);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 9);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 10);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 11);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 12);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 13);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 14);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 15);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 16);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 17);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 18);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 19);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 20);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 21);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 22);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 23);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 24);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 25);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 26);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 27);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 28);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 29);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 30);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 31);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 32);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 33);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 34);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 35);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 36);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 37);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 38);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 39);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 40);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 41);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 42);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 43);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 44);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 45);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 46);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 47);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 48);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 49);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 50);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 51);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 52);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 53);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 54);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 55);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 56);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 57);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 58);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 59);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 60);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 61);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 62);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 63);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 64);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 65);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 66);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 67);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 68);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 69);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 70);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 71);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 72);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 73);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 74);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 75);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 76);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 77);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 78);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 79);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 80);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 81);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 82);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 83);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 84);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 85);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 86);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 87);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 88);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 89);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 90);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 91);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 92);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 93);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 94);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 95);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 96);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 97);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 98);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 99);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 100);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 101);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 102);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 103);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 104);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 105);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 106);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 107);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 108);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 109);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 110);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 111);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 112);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 113);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 114);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 115);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 116);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 117);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 118);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 119);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 120);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 121);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 122);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 123);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 124);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 125);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 126);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 127);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 128);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 129);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 130);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 131);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 132);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 133);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 134);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 135);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 136);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 137);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 138);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 139);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 140);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 141);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 142);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 143);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 144);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 145);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 146);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 147);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 148);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 149);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 150);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 151);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 152);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 153);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 154);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 155);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 156);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 157);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 158);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 159);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 160);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 161);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 162);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 163);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 164);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 165);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 166);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 167);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 168);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 169);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 170);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 171);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 172);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 173);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 174);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 175);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 176);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 177);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 178);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 179);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 180);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 181);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 182);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 183);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 184);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 185);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 186);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 187);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 188);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 189);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 190);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 191);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 192);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 193);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 194);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 195);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 196);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 197);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 198);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 199);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 200);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 201);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 202);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 203);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 204);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 205);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 206);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 207);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 208);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 209);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 210);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 211);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 212);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 213);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 214);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 215);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 216);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 217);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 218);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 219);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 220);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 221);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 222);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 223);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 224);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 225);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 226);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 227);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 228);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 229);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 230);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 231);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 232);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 233);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 234);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 235);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 236);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 237);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 238);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 239);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 240);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 241);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 242);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 243);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 244);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 245);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 246);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 247);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 248);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 249);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 250);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 251);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 252);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 253);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 254);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 255);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_all_elements(1);

                    input_addr += M;
                    weight_addr_tmp += 1;

                    __mdvdw mult_v = _mve_mul_dw(input_v, weight_v);

                    acc_v = _mve_add_dw(acc_v, mult_v);
                }

                // Caculating Min and Max

                // R4 = R2 min R1
                acc_v = _mve_min_dw(acc_v, max_v);
                acc_v = _mve_max_dw(acc_v, min_v);

                // Storing the results, Stride: 1 (dim0) and 3 (M) (dim1)
                _mve_set_only_element(1, 0);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 1);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 2);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 3);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 4);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 5);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 6);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 7);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 8);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 9);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 10);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 11);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 12);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 13);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 14);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 15);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 16);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 17);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 18);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 19);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 20);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 21);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 22);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 23);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 24);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 25);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 26);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 27);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 28);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 29);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 30);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 31);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 32);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 33);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 34);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 35);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 36);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 37);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 38);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 39);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 40);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 41);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 42);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 43);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 44);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 45);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 46);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 47);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 48);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 49);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 50);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 51);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 52);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 53);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 54);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 55);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 56);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 57);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 58);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 59);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 60);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 61);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 62);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 63);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 64);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 65);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 66);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 67);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 68);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 69);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 70);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 71);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 72);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 73);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 74);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 75);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 76);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 77);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 78);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 79);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 80);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 81);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 82);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 83);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 84);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 85);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 86);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 87);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 88);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 89);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 90);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 91);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 92);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 93);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 94);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 95);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 96);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 97);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 98);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 99);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 100);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 101);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 102);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 103);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 104);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 105);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 106);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 107);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 108);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 109);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 110);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 111);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 112);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 113);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 114);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 115);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 116);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 117);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 118);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 119);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 120);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 121);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 122);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 123);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 124);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 125);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 126);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 127);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 128);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 129);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 130);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 131);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 132);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 133);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 134);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 135);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 136);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 137);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 138);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 139);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 140);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 141);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 142);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 143);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 144);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 145);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 146);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 147);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 148);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 149);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 150);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 151);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 152);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 153);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 154);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 155);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 156);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 157);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 158);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 159);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 160);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 161);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 162);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 163);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 164);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 165);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 166);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 167);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 168);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 169);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 170);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 171);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 172);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 173);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 174);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 175);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 176);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 177);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 178);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 179);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 180);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 181);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 182);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 183);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 184);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 185);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 186);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 187);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 188);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 189);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 190);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 191);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 192);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 193);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 194);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 195);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 196);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 197);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 198);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 199);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 200);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 201);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 202);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 203);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 204);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 205);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 206);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 207);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 208);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 209);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 210);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 211);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 212);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 213);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 214);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 215);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 216);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 217);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 218);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 219);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 220);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 221);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 222);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 223);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 224);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 225);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 226);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 227);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 228);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 229);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 230);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 231);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 232);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 233);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 234);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 235);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 236);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 237);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 238);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 239);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 240);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 241);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 242);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 243);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 244);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 245);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 246);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 247);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 248);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 249);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 250);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 251);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 252);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 253);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 254);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 255);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_all_elements(1);

                output_addr += 256 * M;

                mve_flusher();
                n += 256;
            }

            if (n + 128 <= N) {
                // Second Dim: N
                _mve_set_dim_length(1, 128);
            }

            while (n + 128 <= N) {

                // Loading bias - Dim1.length = 128 - Dim0.length = 32, Stride: 0 (dim0) and 1 (dim1)
                __mdvdw acc_v = _mve_set1_dw(0);
                _mve_set_only_element(1, 0);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 1);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 2);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 3);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 4);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 5);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 6);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 7);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 8);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 9);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 10);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 11);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 12);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 13);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 14);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 15);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 16);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 17);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 18);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 19);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 20);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 21);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 22);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 23);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 24);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 25);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 26);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 27);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 28);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 29);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 30);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 31);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 32);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 33);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 34);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 35);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 36);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 37);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 38);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 39);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 40);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 41);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 42);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 43);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 44);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 45);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 46);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 47);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 48);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 49);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 50);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 51);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 52);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 53);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 54);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 55);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 56);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 57);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 58);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 59);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 60);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 61);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 62);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 63);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 64);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 65);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 66);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 67);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 68);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 69);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 70);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 71);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 72);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 73);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 74);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 75);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 76);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 77);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 78);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 79);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 80);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 81);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 82);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 83);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 84);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 85);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 86);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 87);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 88);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 89);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 90);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 91);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 92);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 93);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 94);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 95);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 96);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 97);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 98);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 99);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 100);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 101);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 102);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 103);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 104);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 105);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 106);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 107);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 108);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 109);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 110);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 111);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 112);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 113);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 114);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 115);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 116);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 117);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 118);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 119);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 120);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 121);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 122);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 123);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 124);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 125);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 126);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 127);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_all_elements(1);

                bias_addr += 128;

                input_addr = in;
                int32_t *weight_addr_tmp = weight_addr;
                weight_addr += 128 * K;

                for (int k = 0; k < K; k++) {

                    // Loading input - Dim1.length = 128 - Dim0.length = 32, Stride: 1 (dim0) and 0 (dim1)
                    // Loading weight - Dim1.length = 128 - Dim0.length = 32, Stride: 0 (dim0) and 3 (K) (dim1)
                    __mdvdw input_v = _mve_set1_dw(0);
                    __mdvdw weight_v = _mve_set1_dw(0);
                    _mve_set_only_element(1, 0);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 1);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 2);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 3);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 4);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 5);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 6);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 7);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 8);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 9);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 10);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 11);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 12);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 13);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 14);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 15);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 16);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 17);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 18);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 19);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 20);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 21);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 22);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 23);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 24);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 25);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 26);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 27);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 28);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 29);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 30);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 31);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 32);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 33);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 34);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 35);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 36);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 37);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 38);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 39);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 40);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 41);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 42);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 43);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 44);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 45);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 46);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 47);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 48);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 49);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 50);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 51);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 52);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 53);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 54);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 55);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 56);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 57);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 58);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 59);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 60);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 61);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 62);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 63);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 64);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 65);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 66);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 67);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 68);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 69);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 70);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 71);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 72);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 73);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 74);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 75);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 76);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 77);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 78);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 79);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 80);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 81);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 82);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 83);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 84);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 85);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 86);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 87);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 88);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 89);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 90);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 91);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 92);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 93);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 94);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 95);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 96);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 97);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 98);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 99);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 100);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 101);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 102);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 103);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 104);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 105);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 106);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 107);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 108);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 109);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 110);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 111);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 112);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 113);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 114);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 115);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 116);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 117);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 118);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 119);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 120);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 121);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 122);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 123);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 124);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 125);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 126);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 127);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_all_elements(1);

                    input_addr += M;
                    weight_addr_tmp += 1;

                    __mdvdw mult_v = _mve_mul_dw(input_v, weight_v);

                    acc_v = _mve_add_dw(acc_v, mult_v);
                }

                // Caculating Min and Max

                // R4 = R2 min R1
                acc_v = _mve_min_dw(acc_v, max_v);
                acc_v = _mve_max_dw(acc_v, min_v);

                // Storing the results, Stride: 1 (dim0) and 3 (M) (dim1)
                _mve_set_only_element(1, 0);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 1);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 2);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 3);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 4);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 5);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 6);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 7);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 8);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 9);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 10);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 11);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 12);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 13);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 14);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 15);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 16);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 17);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 18);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 19);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 20);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 21);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 22);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 23);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 24);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 25);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 26);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 27);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 28);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 29);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 30);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 31);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 32);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 33);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 34);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 35);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 36);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 37);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 38);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 39);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 40);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 41);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 42);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 43);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 44);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 45);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 46);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 47);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 48);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 49);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 50);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 51);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 52);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 53);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 54);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 55);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 56);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 57);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 58);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 59);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 60);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 61);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 62);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 63);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 64);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 65);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 66);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 67);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 68);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 69);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 70);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 71);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 72);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 73);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 74);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 75);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 76);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 77);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 78);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 79);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 80);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 81);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 82);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 83);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 84);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 85);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 86);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 87);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 88);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 89);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 90);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 91);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 92);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 93);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 94);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 95);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 96);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 97);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 98);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 99);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 100);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 101);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 102);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 103);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 104);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 105);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 106);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 107);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 108);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 109);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 110);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 111);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 112);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 113);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 114);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 115);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 116);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 117);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 118);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 119);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 120);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 121);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 122);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 123);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 124);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 125);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 126);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 127);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_all_elements(1);

                output_addr += 128 * M;

                mve_flusher();
                n += 128;
            }

            if (n + 64 <= N) {
                // Second Dim: N
                _mve_set_dim_length(1, 64);
            }

            while (n + 64 <= N) {

                // Loading bias - Dim1.length = 64 - Dim0.length = 32, Stride: 0 (dim0) and 1 (dim1)
                __mdvdw acc_v = _mve_set1_dw(0);
                _mve_set_only_element(1, 0);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 1);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 2);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 3);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 4);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 5);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 6);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 7);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 8);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 9);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 10);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 11);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 12);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 13);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 14);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 15);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 16);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 17);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 18);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 19);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 20);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 21);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 22);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 23);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 24);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 25);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 26);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 27);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 28);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 29);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 30);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 31);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 32);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 33);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 34);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 35);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 36);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 37);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 38);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 39);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 40);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 41);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 42);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 43);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 44);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 45);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 46);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 47);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 48);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 49);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 50);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 51);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 52);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 53);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 54);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 55);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 56);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 57);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 58);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 59);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 60);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 61);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 62);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 63);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_all_elements(1);

                bias_addr += 64;

                input_addr = in;
                int32_t *weight_addr_tmp = weight_addr;
                weight_addr += 64 * K;

                for (int k = 0; k < K; k++) {

                    // Loading input - Dim1.length = 64 - Dim0.length = 32, Stride: 1 (dim0) and 0 (dim1)
                    // Loading weight - Dim1.length = 64 - Dim0.length = 32, Stride: 0 (dim0) and 3 (K) (dim1)
                    __mdvdw input_v = _mve_set1_dw(0);
                    __mdvdw weight_v = _mve_set1_dw(0);
                    _mve_set_only_element(1, 0);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 1);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 2);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 3);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 4);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 5);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 6);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 7);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 8);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 9);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 10);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 11);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 12);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 13);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 14);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 15);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 16);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 17);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 18);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 19);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 20);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 21);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 22);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 23);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 24);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 25);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 26);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 27);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 28);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 29);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 30);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 31);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 32);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 33);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 34);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 35);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 36);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 37);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 38);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 39);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 40);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 41);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 42);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 43);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 44);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 45);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 46);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 47);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 48);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 49);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 50);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 51);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 52);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 53);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 54);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 55);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 56);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 57);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 58);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 59);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 60);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 61);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 62);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 63);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_all_elements(1);

                    input_addr += M;
                    weight_addr_tmp += 1;

                    __mdvdw mult_v = _mve_mul_dw(input_v, weight_v);

                    acc_v = _mve_add_dw(acc_v, mult_v);
                }

                // Caculating Min and Max

                // R4 = R2 min R1
                acc_v = _mve_min_dw(acc_v, max_v);
                acc_v = _mve_max_dw(acc_v, min_v);

                // Storing the results, Stride: 1 (dim0) and 3 (M) (dim1)
                _mve_set_only_element(1, 0);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 1);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 2);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 3);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 4);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 5);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 6);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 7);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 8);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 9);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 10);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 11);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 12);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 13);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 14);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 15);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 16);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 17);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 18);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 19);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 20);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 21);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 22);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 23);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 24);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 25);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 26);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 27);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 28);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 29);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 30);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 31);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 32);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 33);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 34);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 35);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 36);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 37);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 38);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 39);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 40);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 41);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 42);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 43);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 44);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 45);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 46);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 47);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 48);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 49);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 50);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 51);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 52);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 53);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 54);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 55);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 56);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 57);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 58);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 59);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 60);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 61);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 62);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 63);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_all_elements(1);

                output_addr += 64 * M;

                mve_flusher();
                n += 64;
            }

            if (n + 32 <= N) {
                // Second Dim: N
                _mve_set_dim_length(1, 32);
            }

            while (n + 32 <= N) {

                // Loading bias - Dim1.length = 32 - Dim0.length = 32, Stride: 0 (dim0) and 1 (dim1)
                __mdvdw acc_v = _mve_set1_dw(0);
                _mve_set_only_element(1, 0);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 1);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 2);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 3);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 4);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 5);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 6);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 7);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 8);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 9);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 10);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 11);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 12);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 13);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 14);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 15);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 16);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 17);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 18);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 19);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 20);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 21);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 22);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 23);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 24);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 25);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 26);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 27);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 28);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 29);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 30);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 31);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_all_elements(1);

                bias_addr += 32;

                input_addr = in;
                int32_t *weight_addr_tmp = weight_addr;
                weight_addr += 32 * K;

                for (int k = 0; k < K; k++) {

                    // Loading input - Dim1.length = 32 - Dim0.length = 32, Stride: 1 (dim0) and 0 (dim1)
                    // Loading weight - Dim1.length = 32 - Dim0.length = 32, Stride: 0 (dim0) and 3 (K) (dim1)
                    __mdvdw input_v = _mve_set1_dw(0);
                    __mdvdw weight_v = _mve_set1_dw(0);
                    _mve_set_only_element(1, 0);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 1);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 2);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 3);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 4);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 5);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 6);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 7);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 8);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 9);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 10);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 11);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 12);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 13);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 14);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 15);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 16);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 17);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 18);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 19);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 20);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 21);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 22);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 23);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 24);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 25);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 26);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 27);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 28);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 29);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 30);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 31);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_all_elements(1);

                    input_addr += M;
                    weight_addr_tmp += 1;

                    __mdvdw mult_v = _mve_mul_dw(input_v, weight_v);

                    acc_v = _mve_add_dw(acc_v, mult_v);
                }

                // Caculating Min and Max

                // R4 = R2 min R1
                acc_v = _mve_min_dw(acc_v, max_v);
                acc_v = _mve_max_dw(acc_v, min_v);

                // Storing the results, Stride: 1 (dim0) and 3 (M) (dim1)
                _mve_set_only_element(1, 0);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 1);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 2);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 3);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 4);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 5);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 6);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 7);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 8);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 9);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 10);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 11);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 12);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 13);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 14);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 15);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 16);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 17);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 18);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 19);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 20);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 21);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 22);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 23);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 24);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 25);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 26);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 27);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 28);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 29);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 30);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 31);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_all_elements(1);

                output_addr += 32 * M;

                mve_flusher();
                n += 32;
            }

            if (n + 16 <= N) {
                // Second Dim: N
                _mve_set_dim_length(1, 16);
            }

            while (n + 16 <= N) {

                // Loading bias - Dim1.length = 16 - Dim0.length = 32, Stride: 0 (dim0) and 1 (dim1)
                __mdvdw acc_v = _mve_set1_dw(0);
                _mve_set_only_element(1, 0);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 1);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 2);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 3);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 4);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 5);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 6);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 7);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 8);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 9);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 10);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 11);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 12);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 13);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 14);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 15);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_all_elements(1);

                bias_addr += 16;

                input_addr = in;
                int32_t *weight_addr_tmp = weight_addr;
                weight_addr += 16 * K;

                for (int k = 0; k < K; k++) {

                    // Loading input - Dim1.length = 16 - Dim0.length = 32, Stride: 1 (dim0) and 0 (dim1)
                    // Loading weight - Dim1.length = 16 - Dim0.length = 32, Stride: 0 (dim0) and 3 (K) (dim1)
                    __mdvdw input_v = _mve_set1_dw(0);
                    __mdvdw weight_v = _mve_set1_dw(0);
                    _mve_set_only_element(1, 0);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 1);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 2);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 3);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 4);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 5);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 6);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 7);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 8);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 9);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 10);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 11);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 12);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 13);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 14);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 15);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_all_elements(1);

                    input_addr += M;
                    weight_addr_tmp += 1;

                    __mdvdw mult_v = _mve_mul_dw(input_v, weight_v);

                    acc_v = _mve_add_dw(acc_v, mult_v);
                }

                // Caculating Min and Max

                // R4 = R2 min R1
                acc_v = _mve_min_dw(acc_v, max_v);
                acc_v = _mve_max_dw(acc_v, min_v);

                // Storing the results, Stride: 1 (dim0) and 3 (M) (dim1)
                _mve_set_only_element(1, 0);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 1);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 2);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 3);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 4);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 5);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 6);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 7);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 8);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 9);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 10);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 11);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 12);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 13);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 14);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 15);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_all_elements(1);

                output_addr += 16 * M;

                mve_flusher();
                n += 16;
            }

            if (n + 8 <= N) {
                // Second Dim: N
                _mve_set_dim_length(1, 8);
            }

            while (n + 8 <= N) {

                // Loading bias - Dim1.length = 8 - Dim0.length = 32, Stride: 0 (dim0) and 1 (dim1)
                __mdvdw acc_v = _mve_set1_dw(0);
                _mve_set_only_element(1, 0);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 1);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 2);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 3);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 4);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 5);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 6);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 7);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_all_elements(1);

                bias_addr += 8;

                input_addr = in;
                int32_t *weight_addr_tmp = weight_addr;
                weight_addr += 8 * K;

                for (int k = 0; k < K; k++) {

                    // Loading input - Dim1.length = 8 - Dim0.length = 32, Stride: 1 (dim0) and 0 (dim1)
                    // Loading weight - Dim1.length = 8 - Dim0.length = 32, Stride: 0 (dim0) and 3 (K) (dim1)
                    __mdvdw input_v = _mve_set1_dw(0);
                    __mdvdw weight_v = _mve_set1_dw(0);
                    _mve_set_only_element(1, 0);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 1);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 2);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 3);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 4);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 5);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 6);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 7);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_all_elements(1);

                    input_addr += M;
                    weight_addr_tmp += 1;

                    __mdvdw mult_v = _mve_mul_dw(input_v, weight_v);

                    acc_v = _mve_add_dw(acc_v, mult_v);
                }

                // Caculating Min and Max

                // R4 = R2 min R1
                acc_v = _mve_min_dw(acc_v, max_v);
                acc_v = _mve_max_dw(acc_v, min_v);

                // Storing the results, Stride: 1 (dim0) and 3 (M) (dim1)
                _mve_set_only_element(1, 0);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 1);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 2);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 3);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 4);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 5);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 6);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 7);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_all_elements(1);

                output_addr += 8 * M;

                mve_flusher();
                n += 8;
            }

            if (n + 4 <= N) {
                // Second Dim: N
                _mve_set_dim_length(1, 4);
            }

            while (n + 4 <= N) {

                // Loading bias - Dim1.length = 4 - Dim0.length = 32, Stride: 0 (dim0) and 1 (dim1)
                __mdvdw acc_v = _mve_set1_dw(0);
                _mve_set_only_element(1, 0);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 1);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 2);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 3);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_all_elements(1);

                bias_addr += 4;

                input_addr = in;
                int32_t *weight_addr_tmp = weight_addr;
                weight_addr += 4 * K;

                for (int k = 0; k < K; k++) {

                    // Loading input - Dim1.length = 4 - Dim0.length = 32, Stride: 1 (dim0) and 0 (dim1)
                    // Loading weight - Dim1.length = 4 - Dim0.length = 32, Stride: 0 (dim0) and 3 (K) (dim1)
                    __mdvdw input_v = _mve_set1_dw(0);
                    __mdvdw weight_v = _mve_set1_dw(0);
                    _mve_set_only_element(1, 0);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 1);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 2);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 3);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_all_elements(1);

                    input_addr += M;
                    weight_addr_tmp += 1;

                    __mdvdw mult_v = _mve_mul_dw(input_v, weight_v);

                    acc_v = _mve_add_dw(acc_v, mult_v);
                }

                // Caculating Min and Max

                // R4 = R2 min R1
                acc_v = _mve_min_dw(acc_v, max_v);
                acc_v = _mve_max_dw(acc_v, min_v);

                // Storing the results, Stride: 1 (dim0) and 3 (M) (dim1)
                _mve_set_only_element(1, 0);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 1);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 2);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 3);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_all_elements(1);

                output_addr += 4 * M;

                mve_flusher();
                n += 4;
            }

            if (n + 2 <= N) {
                // Second Dim: N
                _mve_set_dim_length(1, 2);
            }

            while (n + 2 <= N) {

                // Loading bias - Dim1.length = 2 - Dim0.length = 32, Stride: 0 (dim0) and 1 (dim1)
                __mdvdw acc_v = _mve_set1_dw(0);
                _mve_set_only_element(1, 0);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 1);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_all_elements(1);

                bias_addr += 2;

                input_addr = in;
                int32_t *weight_addr_tmp = weight_addr;
                weight_addr += 2 * K;

                for (int k = 0; k < K; k++) {

                    // Loading input - Dim1.length = 2 - Dim0.length = 32, Stride: 1 (dim0) and 0 (dim1)
                    // Loading weight - Dim1.length = 2 - Dim0.length = 32, Stride: 0 (dim0) and 3 (K) (dim1)
                    __mdvdw input_v = _mve_set1_dw(0);
                    __mdvdw weight_v = _mve_set1_dw(0);
                    _mve_set_only_element(1, 0);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 1);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_all_elements(1);

                    input_addr += M;
                    weight_addr_tmp += 1;

                    __mdvdw mult_v = _mve_mul_dw(input_v, weight_v);

                    acc_v = _mve_add_dw(acc_v, mult_v);
                }

                // Caculating Min and Max

                // R4 = R2 min R1
                acc_v = _mve_min_dw(acc_v, max_v);
                acc_v = _mve_max_dw(acc_v, min_v);

                // Storing the results, Stride: 1 (dim0) and 3 (M) (dim1)
                _mve_set_only_element(1, 0);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 1);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_all_elements(1);

                output_addr += 2 * M;

                mve_flusher();
                n += 2;
            }

            if (n + 1 <= N) {
                // Second Dim: N
                _mve_set_dim_length(1, 1);
            }

            while (n + 1 <= N) {

                // Loading bias - Dim1.length = 1 - Dim0.length = 32, Stride: 0 (dim0) and 1 (dim1)
                __mdvdw acc_v = _mve_set1_dw(0);
                _mve_set_only_element(1, 0);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_all_elements(1);

                bias_addr += 1;

                input_addr = in;
                int32_t *weight_addr_tmp = weight_addr;
                weight_addr += 1 * K;

                for (int k = 0; k < K; k++) {

                    // Loading input - Dim1.length = 1 - Dim0.length = 32, Stride: 1 (dim0) and 0 (dim1)
                    // Loading weight - Dim1.length = 1 - Dim0.length = 32, Stride: 0 (dim0) and 3 (K) (dim1)
                    __mdvdw input_v = _mve_set1_dw(0);
                    __mdvdw weight_v = _mve_set1_dw(0);
                    _mve_set_only_element(1, 0);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_all_elements(1);

                    input_addr += M;
                    weight_addr_tmp += 1;

                    __mdvdw mult_v = _mve_mul_dw(input_v, weight_v);

                    acc_v = _mve_add_dw(acc_v, mult_v);
                }

                // Caculating Min and Max

                // R4 = R2 min R1
                acc_v = _mve_min_dw(acc_v, max_v);
                acc_v = _mve_max_dw(acc_v, min_v);

                // Storing the results, Stride: 1 (dim0) and 3 (M) (dim1)
                _mve_set_only_element(1, 0);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_all_elements(1);

                output_addr += 1 * M;

                mve_flusher();
                n += 1;
            }

            in += 32;
            out += 32;
            m += 32;
        }
        if (M > m) {
            _mve_set_dim_length(0, M - m);

            int n_per_iter = 32 * (int)(256 / (M - m));

            bias_addr = bias;
            weight_addr = weights;
            output_addr = out;

            int n = 0;

            while (n < N) {

                int curr_n_per_iter = (N - n) < n_per_iter ? (N - n) : n_per_iter;

                _mve_set_dim_length(1, curr_n_per_iter);

                // Loading bias - Dim1.length = curr_n_per_iter - Dim0.length = (M - m), Stride: 0 (dim0) and 1 (dim1)
                __mdvdw acc_v = _mve_set1_dw(0);
                for (int n_idx = 0; n_idx < curr_n_per_iter; n_idx++) {
                    _mve_set_only_element(1, n_idx);
                    acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                }
                _mve_set_all_elements(1);

                bias_addr += curr_n_per_iter;

                input_addr = in;
                int32_t *weight_addr_tmp = weight_addr;
                weight_addr += curr_n_per_iter * K;

                for (int k = 0; k < K; k++) {

                    // Loading input - Dim1.length = curr_n_per_iter - Dim0.length = (M - m), Stride: 1 (dim0) and 0 (dim1)
                    // Loading weight - Dim1.length = curr_n_per_iter - Dim0.length = (M - m), Stride: 0 (dim0) and 3 (K) (dim1)
                    __mdvdw input_v = _mve_set1_dw(0);
                    __mdvdw weight_v = _mve_set1_dw(0);
                    for (int n_idx = 0; n_idx < curr_n_per_iter; n_idx++) {
                        _mve_set_only_element(1, n_idx);
                        input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                        weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    }
                    _mve_set_all_elements(1);

                    input_addr += M;
                    weight_addr_tmp += 1;

                    __mdvdw mult_v = _mve_mul_dw(input_v, weight_v);

                    acc_v = _mve_add_dw(acc_v, mult_v);

                    // replace R3 and R2 for acc_v
                }

                // Caculating Min and Max

                // R4 = R2 min R1
                acc_v = _mve_min_dw(acc_v, max_v);
                acc_v = _mve_max_dw(acc_v, min_v);

                // Storing the results, Stride: 1 (dim0), 3 or M (dim1)
                for (int n_idx = 0; n_idx < curr_n_per_iter; n_idx++) {
                    _mve_set_only_element(1, n_idx);
                    _mve_store_dw(output_addr, acc_v, output_stride);
                }
                _mve_set_all_elements(1);

                output_addr += curr_n_per_iter * M;

                mve_flusher();
                n += curr_n_per_iter;
            }
        }
    } else if (LANE_NUM == 4096) {
        if (m + 4096 <= M) {
            // First Dim: M
            _mve_set_dim_length(0, 4096);
        }
        while (m + 4096 <= M) {

            bias_addr = bias;
            weight_addr = weights;
            output_addr = out;

            int n = 0;

            if (n + 1 <= N) {
                // Second Dim: N
                _mve_set_dim_length(1, 1);
            }

            while (n + 1 <= N) {

                // Loading bias - Dim1.length = 1 - Dim0.length = 4096, Stride: 0 (dim0) and 1 (dim1)
                __mdvdw acc_v = _mve_set1_dw(0);
                _mve_set_only_element(1, 0);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_all_elements(1);

                bias_addr += 1;

                input_addr = in;
                int32_t *weight_addr_tmp = weight_addr;
                weight_addr += 1 * K;

                for (int k = 0; k < K; k++) {

                    // Loading input - Dim1.length = 1 - Dim0.length = 4096, Stride: 1 (dim0) and 0 (dim1)
                    // Loading weight - Dim1.length = 1 - Dim0.length = 4096, Stride: 0 (dim0) and 3 (K) (dim1)
                    __mdvdw input_v = _mve_set1_dw(0);
                    __mdvdw weight_v = _mve_set1_dw(0);
                    _mve_set_only_element(1, 0);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_all_elements(1);

                    input_addr += M;
                    weight_addr_tmp += 1;

                    __mdvdw mult_v = _mve_mul_dw(input_v, weight_v);

                    acc_v = _mve_add_dw(acc_v, mult_v);
                }

                // Caculating Min and Max

                // R4 = R2 min R1
                acc_v = _mve_min_dw(acc_v, max_v);
                acc_v = _mve_max_dw(acc_v, min_v);

                // Storing the results, Stride: 1 (dim0) and 3 (M) (dim1)
                _mve_set_only_element(1, 0);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_all_elements(1);

                output_addr += 1 * M;

                mve_flusher();
                n += 1;
            }

            in += 4096;
            out += 4096;
            m += 4096;
        }
        if (m + 2048 <= M) {
            // First Dim: M
            _mve_set_dim_length(0, 2048);
        }
        while (m + 2048 <= M) {

            bias_addr = bias;
            weight_addr = weights;
            output_addr = out;

            int n = 0;

            if (n + 2 <= N) {
                // Second Dim: N
                _mve_set_dim_length(1, 2);
            }

            while (n + 2 <= N) {

                // Loading bias - Dim1.length = 2 - Dim0.length = 2048, Stride: 0 (dim0) and 1 (dim1)
                __mdvdw acc_v = _mve_set1_dw(0);
                _mve_set_only_element(1, 0);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 1);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_all_elements(1);

                bias_addr += 2;

                input_addr = in;
                int32_t *weight_addr_tmp = weight_addr;
                weight_addr += 2 * K;

                for (int k = 0; k < K; k++) {

                    // Loading input - Dim1.length = 2 - Dim0.length = 2048, Stride: 1 (dim0) and 0 (dim1)
                    // Loading weight - Dim1.length = 2 - Dim0.length = 2048, Stride: 0 (dim0) and 3 (K) (dim1)
                    __mdvdw input_v = _mve_set1_dw(0);
                    __mdvdw weight_v = _mve_set1_dw(0);
                    _mve_set_only_element(1, 0);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 1);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_all_elements(1);

                    input_addr += M;
                    weight_addr_tmp += 1;

                    __mdvdw mult_v = _mve_mul_dw(input_v, weight_v);

                    acc_v = _mve_add_dw(acc_v, mult_v);
                }

                // Caculating Min and Max

                // R4 = R2 min R1
                acc_v = _mve_min_dw(acc_v, max_v);
                acc_v = _mve_max_dw(acc_v, min_v);

                // Storing the results, Stride: 1 (dim0) and 3 (M) (dim1)
                _mve_set_only_element(1, 0);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 1);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_all_elements(1);

                output_addr += 2 * M;

                mve_flusher();
                n += 2;
            }

            if (n + 1 <= N) {
                // Second Dim: N
                _mve_set_dim_length(1, 1);
            }

            while (n + 1 <= N) {

                // Loading bias - Dim1.length = 1 - Dim0.length = 2048, Stride: 0 (dim0) and 1 (dim1)
                __mdvdw acc_v = _mve_set1_dw(0);
                _mve_set_only_element(1, 0);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_all_elements(1);

                bias_addr += 1;

                input_addr = in;
                int32_t *weight_addr_tmp = weight_addr;
                weight_addr += 1 * K;

                for (int k = 0; k < K; k++) {

                    // Loading input - Dim1.length = 1 - Dim0.length = 2048, Stride: 1 (dim0) and 0 (dim1)
                    // Loading weight - Dim1.length = 1 - Dim0.length = 2048, Stride: 0 (dim0) and 3 (K) (dim1)
                    __mdvdw input_v = _mve_set1_dw(0);
                    __mdvdw weight_v = _mve_set1_dw(0);
                    _mve_set_only_element(1, 0);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_all_elements(1);

                    input_addr += M;
                    weight_addr_tmp += 1;

                    __mdvdw mult_v = _mve_mul_dw(input_v, weight_v);

                    acc_v = _mve_add_dw(acc_v, mult_v);
                }

                // Caculating Min and Max

                // R4 = R2 min R1
                acc_v = _mve_min_dw(acc_v, max_v);
                acc_v = _mve_max_dw(acc_v, min_v);

                // Storing the results, Stride: 1 (dim0) and 3 (M) (dim1)
                _mve_set_only_element(1, 0);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_all_elements(1);

                output_addr += 1 * M;

                mve_flusher();
                n += 1;
            }

            in += 2048;
            out += 2048;
            m += 2048;
        }
        if (m + 1024 <= M) {
            // First Dim: M
            _mve_set_dim_length(0, 1024);
        }
        while (m + 1024 <= M) {

            bias_addr = bias;
            weight_addr = weights;
            output_addr = out;

            int n = 0;

            if (n + 4 <= N) {
                // Second Dim: N
                _mve_set_dim_length(1, 4);
            }

            while (n + 4 <= N) {

                // Loading bias - Dim1.length = 4 - Dim0.length = 1024, Stride: 0 (dim0) and 1 (dim1)
                __mdvdw acc_v = _mve_set1_dw(0);
                _mve_set_only_element(1, 0);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 1);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 2);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 3);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_all_elements(1);

                bias_addr += 4;

                input_addr = in;
                int32_t *weight_addr_tmp = weight_addr;
                weight_addr += 4 * K;

                for (int k = 0; k < K; k++) {

                    // Loading input - Dim1.length = 4 - Dim0.length = 1024, Stride: 1 (dim0) and 0 (dim1)
                    // Loading weight - Dim1.length = 4 - Dim0.length = 1024, Stride: 0 (dim0) and 3 (K) (dim1)
                    __mdvdw input_v = _mve_set1_dw(0);
                    __mdvdw weight_v = _mve_set1_dw(0);
                    _mve_set_only_element(1, 0);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 1);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 2);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 3);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_all_elements(1);

                    input_addr += M;
                    weight_addr_tmp += 1;

                    __mdvdw mult_v = _mve_mul_dw(input_v, weight_v);

                    acc_v = _mve_add_dw(acc_v, mult_v);
                }

                // Caculating Min and Max

                // R4 = R2 min R1
                acc_v = _mve_min_dw(acc_v, max_v);
                acc_v = _mve_max_dw(acc_v, min_v);

                // Storing the results, Stride: 1 (dim0) and 3 (M) (dim1)
                _mve_set_only_element(1, 0);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 1);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 2);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 3);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_all_elements(1);

                output_addr += 4 * M;

                mve_flusher();
                n += 4;
            }

            if (n + 2 <= N) {
                // Second Dim: N
                _mve_set_dim_length(1, 2);
            }

            while (n + 2 <= N) {

                // Loading bias - Dim1.length = 2 - Dim0.length = 1024, Stride: 0 (dim0) and 1 (dim1)
                __mdvdw acc_v = _mve_set1_dw(0);
                _mve_set_only_element(1, 0);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 1);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_all_elements(1);

                bias_addr += 2;

                input_addr = in;
                int32_t *weight_addr_tmp = weight_addr;
                weight_addr += 2 * K;

                for (int k = 0; k < K; k++) {

                    // Loading input - Dim1.length = 2 - Dim0.length = 1024, Stride: 1 (dim0) and 0 (dim1)
                    // Loading weight - Dim1.length = 2 - Dim0.length = 1024, Stride: 0 (dim0) and 3 (K) (dim1)
                    __mdvdw input_v = _mve_set1_dw(0);
                    __mdvdw weight_v = _mve_set1_dw(0);
                    _mve_set_only_element(1, 0);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 1);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_all_elements(1);

                    input_addr += M;
                    weight_addr_tmp += 1;

                    __mdvdw mult_v = _mve_mul_dw(input_v, weight_v);

                    acc_v = _mve_add_dw(acc_v, mult_v);
                }

                // Caculating Min and Max

                // R4 = R2 min R1
                acc_v = _mve_min_dw(acc_v, max_v);
                acc_v = _mve_max_dw(acc_v, min_v);

                // Storing the results, Stride: 1 (dim0) and 3 (M) (dim1)
                _mve_set_only_element(1, 0);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 1);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_all_elements(1);

                output_addr += 2 * M;

                mve_flusher();
                n += 2;
            }

            if (n + 1 <= N) {
                // Second Dim: N
                _mve_set_dim_length(1, 1);
            }

            while (n + 1 <= N) {

                // Loading bias - Dim1.length = 1 - Dim0.length = 1024, Stride: 0 (dim0) and 1 (dim1)
                __mdvdw acc_v = _mve_set1_dw(0);
                _mve_set_only_element(1, 0);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_all_elements(1);

                bias_addr += 1;

                input_addr = in;
                int32_t *weight_addr_tmp = weight_addr;
                weight_addr += 1 * K;

                for (int k = 0; k < K; k++) {

                    // Loading input - Dim1.length = 1 - Dim0.length = 1024, Stride: 1 (dim0) and 0 (dim1)
                    // Loading weight - Dim1.length = 1 - Dim0.length = 1024, Stride: 0 (dim0) and 3 (K) (dim1)
                    __mdvdw input_v = _mve_set1_dw(0);
                    __mdvdw weight_v = _mve_set1_dw(0);
                    _mve_set_only_element(1, 0);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_all_elements(1);

                    input_addr += M;
                    weight_addr_tmp += 1;

                    __mdvdw mult_v = _mve_mul_dw(input_v, weight_v);

                    acc_v = _mve_add_dw(acc_v, mult_v);
                }

                // Caculating Min and Max

                // R4 = R2 min R1
                acc_v = _mve_min_dw(acc_v, max_v);
                acc_v = _mve_max_dw(acc_v, min_v);

                // Storing the results, Stride: 1 (dim0) and 3 (M) (dim1)
                _mve_set_only_element(1, 0);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_all_elements(1);

                output_addr += 1 * M;

                mve_flusher();
                n += 1;
            }

            in += 1024;
            out += 1024;
            m += 1024;
        }
        if (m + 512 <= M) {
            // First Dim: M
            _mve_set_dim_length(0, 512);
        }
        while (m + 512 <= M) {

            bias_addr = bias;
            weight_addr = weights;
            output_addr = out;

            int n = 0;

            if (n + 8 <= N) {
                // Second Dim: N
                _mve_set_dim_length(1, 8);
            }

            while (n + 8 <= N) {

                // Loading bias - Dim1.length = 8 - Dim0.length = 512, Stride: 0 (dim0) and 1 (dim1)
                __mdvdw acc_v = _mve_set1_dw(0);
                _mve_set_only_element(1, 0);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 1);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 2);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 3);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 4);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 5);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 6);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 7);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_all_elements(1);

                bias_addr += 8;

                input_addr = in;
                int32_t *weight_addr_tmp = weight_addr;
                weight_addr += 8 * K;

                for (int k = 0; k < K; k++) {

                    // Loading input - Dim1.length = 8 - Dim0.length = 512, Stride: 1 (dim0) and 0 (dim1)
                    // Loading weight - Dim1.length = 8 - Dim0.length = 512, Stride: 0 (dim0) and 3 (K) (dim1)
                    __mdvdw input_v = _mve_set1_dw(0);
                    __mdvdw weight_v = _mve_set1_dw(0);
                    _mve_set_only_element(1, 0);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 1);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 2);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 3);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 4);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 5);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 6);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 7);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_all_elements(1);

                    input_addr += M;
                    weight_addr_tmp += 1;

                    __mdvdw mult_v = _mve_mul_dw(input_v, weight_v);

                    acc_v = _mve_add_dw(acc_v, mult_v);
                }

                // Caculating Min and Max

                // R4 = R2 min R1
                acc_v = _mve_min_dw(acc_v, max_v);
                acc_v = _mve_max_dw(acc_v, min_v);

                // Storing the results, Stride: 1 (dim0) and 3 (M) (dim1)
                _mve_set_only_element(1, 0);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 1);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 2);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 3);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 4);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 5);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 6);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 7);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_all_elements(1);

                output_addr += 8 * M;

                mve_flusher();
                n += 8;
            }

            if (n + 4 <= N) {
                // Second Dim: N
                _mve_set_dim_length(1, 4);
            }

            while (n + 4 <= N) {

                // Loading bias - Dim1.length = 4 - Dim0.length = 512, Stride: 0 (dim0) and 1 (dim1)
                __mdvdw acc_v = _mve_set1_dw(0);
                _mve_set_only_element(1, 0);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 1);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 2);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 3);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_all_elements(1);

                bias_addr += 4;

                input_addr = in;
                int32_t *weight_addr_tmp = weight_addr;
                weight_addr += 4 * K;

                for (int k = 0; k < K; k++) {

                    // Loading input - Dim1.length = 4 - Dim0.length = 512, Stride: 1 (dim0) and 0 (dim1)
                    // Loading weight - Dim1.length = 4 - Dim0.length = 512, Stride: 0 (dim0) and 3 (K) (dim1)
                    __mdvdw input_v = _mve_set1_dw(0);
                    __mdvdw weight_v = _mve_set1_dw(0);
                    _mve_set_only_element(1, 0);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 1);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 2);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 3);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_all_elements(1);

                    input_addr += M;
                    weight_addr_tmp += 1;

                    __mdvdw mult_v = _mve_mul_dw(input_v, weight_v);

                    acc_v = _mve_add_dw(acc_v, mult_v);
                }

                // Caculating Min and Max

                // R4 = R2 min R1
                acc_v = _mve_min_dw(acc_v, max_v);
                acc_v = _mve_max_dw(acc_v, min_v);

                // Storing the results, Stride: 1 (dim0) and 3 (M) (dim1)
                _mve_set_only_element(1, 0);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 1);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 2);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 3);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_all_elements(1);

                output_addr += 4 * M;

                mve_flusher();
                n += 4;
            }

            if (n + 2 <= N) {
                // Second Dim: N
                _mve_set_dim_length(1, 2);
            }

            while (n + 2 <= N) {

                // Loading bias - Dim1.length = 2 - Dim0.length = 512, Stride: 0 (dim0) and 1 (dim1)
                __mdvdw acc_v = _mve_set1_dw(0);
                _mve_set_only_element(1, 0);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 1);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_all_elements(1);

                bias_addr += 2;

                input_addr = in;
                int32_t *weight_addr_tmp = weight_addr;
                weight_addr += 2 * K;

                for (int k = 0; k < K; k++) {

                    // Loading input - Dim1.length = 2 - Dim0.length = 512, Stride: 1 (dim0) and 0 (dim1)
                    // Loading weight - Dim1.length = 2 - Dim0.length = 512, Stride: 0 (dim0) and 3 (K) (dim1)
                    __mdvdw input_v = _mve_set1_dw(0);
                    __mdvdw weight_v = _mve_set1_dw(0);
                    _mve_set_only_element(1, 0);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 1);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_all_elements(1);

                    input_addr += M;
                    weight_addr_tmp += 1;

                    __mdvdw mult_v = _mve_mul_dw(input_v, weight_v);

                    acc_v = _mve_add_dw(acc_v, mult_v);
                }

                // Caculating Min and Max

                // R4 = R2 min R1
                acc_v = _mve_min_dw(acc_v, max_v);
                acc_v = _mve_max_dw(acc_v, min_v);

                // Storing the results, Stride: 1 (dim0) and 3 (M) (dim1)
                _mve_set_only_element(1, 0);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 1);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_all_elements(1);

                output_addr += 2 * M;

                mve_flusher();
                n += 2;
            }

            if (n + 1 <= N) {
                // Second Dim: N
                _mve_set_dim_length(1, 1);
            }

            while (n + 1 <= N) {

                // Loading bias - Dim1.length = 1 - Dim0.length = 512, Stride: 0 (dim0) and 1 (dim1)
                __mdvdw acc_v = _mve_set1_dw(0);
                _mve_set_only_element(1, 0);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_all_elements(1);

                bias_addr += 1;

                input_addr = in;
                int32_t *weight_addr_tmp = weight_addr;
                weight_addr += 1 * K;

                for (int k = 0; k < K; k++) {

                    // Loading input - Dim1.length = 1 - Dim0.length = 512, Stride: 1 (dim0) and 0 (dim1)
                    // Loading weight - Dim1.length = 1 - Dim0.length = 512, Stride: 0 (dim0) and 3 (K) (dim1)
                    __mdvdw input_v = _mve_set1_dw(0);
                    __mdvdw weight_v = _mve_set1_dw(0);
                    _mve_set_only_element(1, 0);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_all_elements(1);

                    input_addr += M;
                    weight_addr_tmp += 1;

                    __mdvdw mult_v = _mve_mul_dw(input_v, weight_v);

                    acc_v = _mve_add_dw(acc_v, mult_v);
                }

                // Caculating Min and Max

                // R4 = R2 min R1
                acc_v = _mve_min_dw(acc_v, max_v);
                acc_v = _mve_max_dw(acc_v, min_v);

                // Storing the results, Stride: 1 (dim0) and 3 (M) (dim1)
                _mve_set_only_element(1, 0);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_all_elements(1);

                output_addr += 1 * M;

                mve_flusher();
                n += 1;
            }

            in += 512;
            out += 512;
            m += 512;
        }
        if (m + 256 <= M) {
            // First Dim: M
            _mve_set_dim_length(0, 256);
        }
        while (m + 256 <= M) {

            bias_addr = bias;
            weight_addr = weights;
            output_addr = out;

            int n = 0;

            if (n + 16 <= N) {
                // Second Dim: N
                _mve_set_dim_length(1, 16);
            }

            while (n + 16 <= N) {

                // Loading bias - Dim1.length = 16 - Dim0.length = 256, Stride: 0 (dim0) and 1 (dim1)
                __mdvdw acc_v = _mve_set1_dw(0);
                _mve_set_only_element(1, 0);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 1);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 2);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 3);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 4);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 5);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 6);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 7);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 8);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 9);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 10);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 11);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 12);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 13);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 14);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 15);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_all_elements(1);

                bias_addr += 16;

                input_addr = in;
                int32_t *weight_addr_tmp = weight_addr;
                weight_addr += 16 * K;

                for (int k = 0; k < K; k++) {

                    // Loading input - Dim1.length = 16 - Dim0.length = 256, Stride: 1 (dim0) and 0 (dim1)
                    // Loading weight - Dim1.length = 16 - Dim0.length = 256, Stride: 0 (dim0) and 3 (K) (dim1)
                    __mdvdw input_v = _mve_set1_dw(0);
                    __mdvdw weight_v = _mve_set1_dw(0);
                    _mve_set_only_element(1, 0);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 1);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 2);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 3);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 4);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 5);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 6);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 7);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 8);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 9);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 10);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 11);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 12);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 13);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 14);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 15);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_all_elements(1);

                    input_addr += M;
                    weight_addr_tmp += 1;

                    __mdvdw mult_v = _mve_mul_dw(input_v, weight_v);

                    acc_v = _mve_add_dw(acc_v, mult_v);
                }

                // Caculating Min and Max

                // R4 = R2 min R1
                acc_v = _mve_min_dw(acc_v, max_v);
                acc_v = _mve_max_dw(acc_v, min_v);

                // Storing the results, Stride: 1 (dim0) and 3 (M) (dim1)
                _mve_set_only_element(1, 0);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 1);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 2);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 3);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 4);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 5);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 6);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 7);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 8);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 9);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 10);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 11);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 12);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 13);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 14);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 15);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_all_elements(1);

                output_addr += 16 * M;

                mve_flusher();
                n += 16;
            }

            if (n + 8 <= N) {
                // Second Dim: N
                _mve_set_dim_length(1, 8);
            }

            while (n + 8 <= N) {

                // Loading bias - Dim1.length = 8 - Dim0.length = 256, Stride: 0 (dim0) and 1 (dim1)
                __mdvdw acc_v = _mve_set1_dw(0);
                _mve_set_only_element(1, 0);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 1);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 2);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 3);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 4);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 5);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 6);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 7);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_all_elements(1);

                bias_addr += 8;

                input_addr = in;
                int32_t *weight_addr_tmp = weight_addr;
                weight_addr += 8 * K;

                for (int k = 0; k < K; k++) {

                    // Loading input - Dim1.length = 8 - Dim0.length = 256, Stride: 1 (dim0) and 0 (dim1)
                    // Loading weight - Dim1.length = 8 - Dim0.length = 256, Stride: 0 (dim0) and 3 (K) (dim1)
                    __mdvdw input_v = _mve_set1_dw(0);
                    __mdvdw weight_v = _mve_set1_dw(0);
                    _mve_set_only_element(1, 0);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 1);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 2);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 3);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 4);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 5);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 6);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 7);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_all_elements(1);

                    input_addr += M;
                    weight_addr_tmp += 1;

                    __mdvdw mult_v = _mve_mul_dw(input_v, weight_v);

                    acc_v = _mve_add_dw(acc_v, mult_v);
                }

                // Caculating Min and Max

                // R4 = R2 min R1
                acc_v = _mve_min_dw(acc_v, max_v);
                acc_v = _mve_max_dw(acc_v, min_v);

                // Storing the results, Stride: 1 (dim0) and 3 (M) (dim1)
                _mve_set_only_element(1, 0);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 1);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 2);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 3);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 4);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 5);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 6);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 7);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_all_elements(1);

                output_addr += 8 * M;

                mve_flusher();
                n += 8;
            }

            if (n + 4 <= N) {
                // Second Dim: N
                _mve_set_dim_length(1, 4);
            }

            while (n + 4 <= N) {

                // Loading bias - Dim1.length = 4 - Dim0.length = 256, Stride: 0 (dim0) and 1 (dim1)
                __mdvdw acc_v = _mve_set1_dw(0);
                _mve_set_only_element(1, 0);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 1);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 2);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 3);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_all_elements(1);

                bias_addr += 4;

                input_addr = in;
                int32_t *weight_addr_tmp = weight_addr;
                weight_addr += 4 * K;

                for (int k = 0; k < K; k++) {

                    // Loading input - Dim1.length = 4 - Dim0.length = 256, Stride: 1 (dim0) and 0 (dim1)
                    // Loading weight - Dim1.length = 4 - Dim0.length = 256, Stride: 0 (dim0) and 3 (K) (dim1)
                    __mdvdw input_v = _mve_set1_dw(0);
                    __mdvdw weight_v = _mve_set1_dw(0);
                    _mve_set_only_element(1, 0);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 1);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 2);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 3);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_all_elements(1);

                    input_addr += M;
                    weight_addr_tmp += 1;

                    __mdvdw mult_v = _mve_mul_dw(input_v, weight_v);

                    acc_v = _mve_add_dw(acc_v, mult_v);
                }

                // Caculating Min and Max

                // R4 = R2 min R1
                acc_v = _mve_min_dw(acc_v, max_v);
                acc_v = _mve_max_dw(acc_v, min_v);

                // Storing the results, Stride: 1 (dim0) and 3 (M) (dim1)
                _mve_set_only_element(1, 0);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 1);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 2);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 3);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_all_elements(1);

                output_addr += 4 * M;

                mve_flusher();
                n += 4;
            }

            if (n + 2 <= N) {
                // Second Dim: N
                _mve_set_dim_length(1, 2);
            }

            while (n + 2 <= N) {

                // Loading bias - Dim1.length = 2 - Dim0.length = 256, Stride: 0 (dim0) and 1 (dim1)
                __mdvdw acc_v = _mve_set1_dw(0);
                _mve_set_only_element(1, 0);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 1);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_all_elements(1);

                bias_addr += 2;

                input_addr = in;
                int32_t *weight_addr_tmp = weight_addr;
                weight_addr += 2 * K;

                for (int k = 0; k < K; k++) {

                    // Loading input - Dim1.length = 2 - Dim0.length = 256, Stride: 1 (dim0) and 0 (dim1)
                    // Loading weight - Dim1.length = 2 - Dim0.length = 256, Stride: 0 (dim0) and 3 (K) (dim1)
                    __mdvdw input_v = _mve_set1_dw(0);
                    __mdvdw weight_v = _mve_set1_dw(0);
                    _mve_set_only_element(1, 0);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 1);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_all_elements(1);

                    input_addr += M;
                    weight_addr_tmp += 1;

                    __mdvdw mult_v = _mve_mul_dw(input_v, weight_v);

                    acc_v = _mve_add_dw(acc_v, mult_v);
                }

                // Caculating Min and Max

                // R4 = R2 min R1
                acc_v = _mve_min_dw(acc_v, max_v);
                acc_v = _mve_max_dw(acc_v, min_v);

                // Storing the results, Stride: 1 (dim0) and 3 (M) (dim1)
                _mve_set_only_element(1, 0);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 1);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_all_elements(1);

                output_addr += 2 * M;

                mve_flusher();
                n += 2;
            }

            if (n + 1 <= N) {
                // Second Dim: N
                _mve_set_dim_length(1, 1);
            }

            while (n + 1 <= N) {

                // Loading bias - Dim1.length = 1 - Dim0.length = 256, Stride: 0 (dim0) and 1 (dim1)
                __mdvdw acc_v = _mve_set1_dw(0);
                _mve_set_only_element(1, 0);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_all_elements(1);

                bias_addr += 1;

                input_addr = in;
                int32_t *weight_addr_tmp = weight_addr;
                weight_addr += 1 * K;

                for (int k = 0; k < K; k++) {

                    // Loading input - Dim1.length = 1 - Dim0.length = 256, Stride: 1 (dim0) and 0 (dim1)
                    // Loading weight - Dim1.length = 1 - Dim0.length = 256, Stride: 0 (dim0) and 3 (K) (dim1)
                    __mdvdw input_v = _mve_set1_dw(0);
                    __mdvdw weight_v = _mve_set1_dw(0);
                    _mve_set_only_element(1, 0);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_all_elements(1);

                    input_addr += M;
                    weight_addr_tmp += 1;

                    __mdvdw mult_v = _mve_mul_dw(input_v, weight_v);

                    acc_v = _mve_add_dw(acc_v, mult_v);
                }

                // Caculating Min and Max

                // R4 = R2 min R1
                acc_v = _mve_min_dw(acc_v, max_v);
                acc_v = _mve_max_dw(acc_v, min_v);

                // Storing the results, Stride: 1 (dim0) and 3 (M) (dim1)
                _mve_set_only_element(1, 0);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_all_elements(1);

                output_addr += 1 * M;

                mve_flusher();
                n += 1;
            }

            in += 256;
            out += 256;
            m += 256;
        }
        if (m + 128 <= M) {
            // First Dim: M
            _mve_set_dim_length(0, 128);
        }
        while (m + 128 <= M) {

            bias_addr = bias;
            weight_addr = weights;
            output_addr = out;

            int n = 0;

            if (n + 32 <= N) {
                // Second Dim: N
                _mve_set_dim_length(1, 32);
            }

            while (n + 32 <= N) {

                // Loading bias - Dim1.length = 32 - Dim0.length = 128, Stride: 0 (dim0) and 1 (dim1)
                __mdvdw acc_v = _mve_set1_dw(0);
                _mve_set_only_element(1, 0);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 1);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 2);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 3);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 4);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 5);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 6);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 7);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 8);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 9);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 10);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 11);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 12);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 13);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 14);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 15);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 16);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 17);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 18);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 19);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 20);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 21);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 22);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 23);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 24);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 25);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 26);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 27);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 28);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 29);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 30);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 31);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_all_elements(1);

                bias_addr += 32;

                input_addr = in;
                int32_t *weight_addr_tmp = weight_addr;
                weight_addr += 32 * K;

                for (int k = 0; k < K; k++) {

                    // Loading input - Dim1.length = 32 - Dim0.length = 128, Stride: 1 (dim0) and 0 (dim1)
                    // Loading weight - Dim1.length = 32 - Dim0.length = 128, Stride: 0 (dim0) and 3 (K) (dim1)
                    __mdvdw input_v = _mve_set1_dw(0);
                    __mdvdw weight_v = _mve_set1_dw(0);
                    _mve_set_only_element(1, 0);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 1);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 2);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 3);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 4);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 5);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 6);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 7);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 8);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 9);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 10);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 11);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 12);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 13);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 14);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 15);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 16);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 17);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 18);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 19);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 20);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 21);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 22);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 23);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 24);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 25);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 26);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 27);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 28);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 29);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 30);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 31);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_all_elements(1);

                    input_addr += M;
                    weight_addr_tmp += 1;

                    __mdvdw mult_v = _mve_mul_dw(input_v, weight_v);

                    acc_v = _mve_add_dw(acc_v, mult_v);
                }

                // Caculating Min and Max

                // R4 = R2 min R1
                acc_v = _mve_min_dw(acc_v, max_v);
                acc_v = _mve_max_dw(acc_v, min_v);

                // Storing the results, Stride: 1 (dim0) and 3 (M) (dim1)
                _mve_set_only_element(1, 0);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 1);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 2);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 3);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 4);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 5);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 6);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 7);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 8);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 9);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 10);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 11);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 12);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 13);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 14);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 15);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 16);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 17);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 18);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 19);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 20);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 21);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 22);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 23);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 24);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 25);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 26);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 27);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 28);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 29);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 30);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 31);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_all_elements(1);

                output_addr += 32 * M;

                mve_flusher();
                n += 32;
            }

            if (n + 16 <= N) {
                // Second Dim: N
                _mve_set_dim_length(1, 16);
            }

            while (n + 16 <= N) {

                // Loading bias - Dim1.length = 16 - Dim0.length = 128, Stride: 0 (dim0) and 1 (dim1)
                __mdvdw acc_v = _mve_set1_dw(0);
                _mve_set_only_element(1, 0);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 1);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 2);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 3);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 4);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 5);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 6);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 7);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 8);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 9);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 10);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 11);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 12);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 13);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 14);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 15);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_all_elements(1);

                bias_addr += 16;

                input_addr = in;
                int32_t *weight_addr_tmp = weight_addr;
                weight_addr += 16 * K;

                for (int k = 0; k < K; k++) {

                    // Loading input - Dim1.length = 16 - Dim0.length = 128, Stride: 1 (dim0) and 0 (dim1)
                    // Loading weight - Dim1.length = 16 - Dim0.length = 128, Stride: 0 (dim0) and 3 (K) (dim1)
                    __mdvdw input_v = _mve_set1_dw(0);
                    __mdvdw weight_v = _mve_set1_dw(0);
                    _mve_set_only_element(1, 0);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 1);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 2);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 3);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 4);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 5);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 6);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 7);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 8);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 9);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 10);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 11);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 12);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 13);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 14);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 15);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_all_elements(1);

                    input_addr += M;
                    weight_addr_tmp += 1;

                    __mdvdw mult_v = _mve_mul_dw(input_v, weight_v);

                    acc_v = _mve_add_dw(acc_v, mult_v);
                }

                // Caculating Min and Max

                // R4 = R2 min R1
                acc_v = _mve_min_dw(acc_v, max_v);
                acc_v = _mve_max_dw(acc_v, min_v);

                // Storing the results, Stride: 1 (dim0) and 3 (M) (dim1)
                _mve_set_only_element(1, 0);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 1);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 2);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 3);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 4);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 5);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 6);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 7);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 8);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 9);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 10);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 11);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 12);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 13);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 14);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 15);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_all_elements(1);

                output_addr += 16 * M;

                mve_flusher();
                n += 16;
            }

            if (n + 8 <= N) {
                // Second Dim: N
                _mve_set_dim_length(1, 8);
            }

            while (n + 8 <= N) {

                // Loading bias - Dim1.length = 8 - Dim0.length = 128, Stride: 0 (dim0) and 1 (dim1)
                __mdvdw acc_v = _mve_set1_dw(0);
                _mve_set_only_element(1, 0);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 1);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 2);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 3);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 4);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 5);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 6);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 7);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_all_elements(1);

                bias_addr += 8;

                input_addr = in;
                int32_t *weight_addr_tmp = weight_addr;
                weight_addr += 8 * K;

                for (int k = 0; k < K; k++) {

                    // Loading input - Dim1.length = 8 - Dim0.length = 128, Stride: 1 (dim0) and 0 (dim1)
                    // Loading weight - Dim1.length = 8 - Dim0.length = 128, Stride: 0 (dim0) and 3 (K) (dim1)
                    __mdvdw input_v = _mve_set1_dw(0);
                    __mdvdw weight_v = _mve_set1_dw(0);
                    _mve_set_only_element(1, 0);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 1);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 2);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 3);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 4);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 5);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 6);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 7);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_all_elements(1);

                    input_addr += M;
                    weight_addr_tmp += 1;

                    __mdvdw mult_v = _mve_mul_dw(input_v, weight_v);

                    acc_v = _mve_add_dw(acc_v, mult_v);
                }

                // Caculating Min and Max

                // R4 = R2 min R1
                acc_v = _mve_min_dw(acc_v, max_v);
                acc_v = _mve_max_dw(acc_v, min_v);

                // Storing the results, Stride: 1 (dim0) and 3 (M) (dim1)
                _mve_set_only_element(1, 0);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 1);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 2);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 3);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 4);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 5);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 6);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 7);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_all_elements(1);

                output_addr += 8 * M;

                mve_flusher();
                n += 8;
            }

            if (n + 4 <= N) {
                // Second Dim: N
                _mve_set_dim_length(1, 4);
            }

            while (n + 4 <= N) {

                // Loading bias - Dim1.length = 4 - Dim0.length = 128, Stride: 0 (dim0) and 1 (dim1)
                __mdvdw acc_v = _mve_set1_dw(0);
                _mve_set_only_element(1, 0);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 1);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 2);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 3);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_all_elements(1);

                bias_addr += 4;

                input_addr = in;
                int32_t *weight_addr_tmp = weight_addr;
                weight_addr += 4 * K;

                for (int k = 0; k < K; k++) {

                    // Loading input - Dim1.length = 4 - Dim0.length = 128, Stride: 1 (dim0) and 0 (dim1)
                    // Loading weight - Dim1.length = 4 - Dim0.length = 128, Stride: 0 (dim0) and 3 (K) (dim1)
                    __mdvdw input_v = _mve_set1_dw(0);
                    __mdvdw weight_v = _mve_set1_dw(0);
                    _mve_set_only_element(1, 0);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 1);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 2);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 3);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_all_elements(1);

                    input_addr += M;
                    weight_addr_tmp += 1;

                    __mdvdw mult_v = _mve_mul_dw(input_v, weight_v);

                    acc_v = _mve_add_dw(acc_v, mult_v);
                }

                // Caculating Min and Max

                // R4 = R2 min R1
                acc_v = _mve_min_dw(acc_v, max_v);
                acc_v = _mve_max_dw(acc_v, min_v);

                // Storing the results, Stride: 1 (dim0) and 3 (M) (dim1)
                _mve_set_only_element(1, 0);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 1);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 2);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 3);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_all_elements(1);

                output_addr += 4 * M;

                mve_flusher();
                n += 4;
            }

            if (n + 2 <= N) {
                // Second Dim: N
                _mve_set_dim_length(1, 2);
            }

            while (n + 2 <= N) {

                // Loading bias - Dim1.length = 2 - Dim0.length = 128, Stride: 0 (dim0) and 1 (dim1)
                __mdvdw acc_v = _mve_set1_dw(0);
                _mve_set_only_element(1, 0);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 1);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_all_elements(1);

                bias_addr += 2;

                input_addr = in;
                int32_t *weight_addr_tmp = weight_addr;
                weight_addr += 2 * K;

                for (int k = 0; k < K; k++) {

                    // Loading input - Dim1.length = 2 - Dim0.length = 128, Stride: 1 (dim0) and 0 (dim1)
                    // Loading weight - Dim1.length = 2 - Dim0.length = 128, Stride: 0 (dim0) and 3 (K) (dim1)
                    __mdvdw input_v = _mve_set1_dw(0);
                    __mdvdw weight_v = _mve_set1_dw(0);
                    _mve_set_only_element(1, 0);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 1);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_all_elements(1);

                    input_addr += M;
                    weight_addr_tmp += 1;

                    __mdvdw mult_v = _mve_mul_dw(input_v, weight_v);

                    acc_v = _mve_add_dw(acc_v, mult_v);
                }

                // Caculating Min and Max

                // R4 = R2 min R1
                acc_v = _mve_min_dw(acc_v, max_v);
                acc_v = _mve_max_dw(acc_v, min_v);

                // Storing the results, Stride: 1 (dim0) and 3 (M) (dim1)
                _mve_set_only_element(1, 0);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 1);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_all_elements(1);

                output_addr += 2 * M;

                mve_flusher();
                n += 2;
            }

            if (n + 1 <= N) {
                // Second Dim: N
                _mve_set_dim_length(1, 1);
            }

            while (n + 1 <= N) {

                // Loading bias - Dim1.length = 1 - Dim0.length = 128, Stride: 0 (dim0) and 1 (dim1)
                __mdvdw acc_v = _mve_set1_dw(0);
                _mve_set_only_element(1, 0);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_all_elements(1);

                bias_addr += 1;

                input_addr = in;
                int32_t *weight_addr_tmp = weight_addr;
                weight_addr += 1 * K;

                for (int k = 0; k < K; k++) {

                    // Loading input - Dim1.length = 1 - Dim0.length = 128, Stride: 1 (dim0) and 0 (dim1)
                    // Loading weight - Dim1.length = 1 - Dim0.length = 128, Stride: 0 (dim0) and 3 (K) (dim1)
                    __mdvdw input_v = _mve_set1_dw(0);
                    __mdvdw weight_v = _mve_set1_dw(0);
                    _mve_set_only_element(1, 0);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_all_elements(1);

                    input_addr += M;
                    weight_addr_tmp += 1;

                    __mdvdw mult_v = _mve_mul_dw(input_v, weight_v);

                    acc_v = _mve_add_dw(acc_v, mult_v);
                }

                // Caculating Min and Max

                // R4 = R2 min R1
                acc_v = _mve_min_dw(acc_v, max_v);
                acc_v = _mve_max_dw(acc_v, min_v);

                // Storing the results, Stride: 1 (dim0) and 3 (M) (dim1)
                _mve_set_only_element(1, 0);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_all_elements(1);

                output_addr += 1 * M;

                mve_flusher();
                n += 1;
            }

            in += 128;
            out += 128;
            m += 128;
        }
        if (m + 64 <= M) {
            // First Dim: M
            _mve_set_dim_length(0, 64);
        }
        while (m + 64 <= M) {

            bias_addr = bias;
            weight_addr = weights;
            output_addr = out;

            int n = 0;

            if (n + 64 <= N) {
                // Second Dim: N
                _mve_set_dim_length(1, 64);
            }

            while (n + 64 <= N) {

                // Loading bias - Dim1.length = 64 - Dim0.length = 64, Stride: 0 (dim0) and 1 (dim1)
                __mdvdw acc_v = _mve_set1_dw(0);
                _mve_set_only_element(1, 0);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 1);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 2);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 3);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 4);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 5);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 6);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 7);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 8);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 9);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 10);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 11);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 12);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 13);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 14);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 15);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 16);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 17);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 18);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 19);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 20);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 21);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 22);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 23);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 24);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 25);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 26);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 27);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 28);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 29);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 30);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 31);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 32);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 33);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 34);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 35);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 36);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 37);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 38);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 39);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 40);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 41);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 42);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 43);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 44);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 45);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 46);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 47);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 48);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 49);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 50);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 51);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 52);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 53);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 54);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 55);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 56);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 57);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 58);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 59);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 60);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 61);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 62);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 63);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_all_elements(1);

                bias_addr += 64;

                input_addr = in;
                int32_t *weight_addr_tmp = weight_addr;
                weight_addr += 64 * K;

                for (int k = 0; k < K; k++) {

                    // Loading input - Dim1.length = 64 - Dim0.length = 64, Stride: 1 (dim0) and 0 (dim1)
                    // Loading weight - Dim1.length = 64 - Dim0.length = 64, Stride: 0 (dim0) and 3 (K) (dim1)
                    __mdvdw input_v = _mve_set1_dw(0);
                    __mdvdw weight_v = _mve_set1_dw(0);
                    _mve_set_only_element(1, 0);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 1);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 2);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 3);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 4);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 5);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 6);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 7);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 8);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 9);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 10);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 11);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 12);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 13);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 14);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 15);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 16);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 17);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 18);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 19);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 20);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 21);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 22);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 23);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 24);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 25);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 26);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 27);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 28);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 29);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 30);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 31);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 32);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 33);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 34);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 35);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 36);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 37);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 38);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 39);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 40);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 41);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 42);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 43);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 44);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 45);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 46);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 47);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 48);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 49);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 50);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 51);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 52);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 53);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 54);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 55);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 56);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 57);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 58);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 59);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 60);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 61);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 62);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 63);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_all_elements(1);

                    input_addr += M;
                    weight_addr_tmp += 1;

                    __mdvdw mult_v = _mve_mul_dw(input_v, weight_v);

                    acc_v = _mve_add_dw(acc_v, mult_v);
                }

                // Caculating Min and Max

                // R4 = R2 min R1
                acc_v = _mve_min_dw(acc_v, max_v);
                acc_v = _mve_max_dw(acc_v, min_v);

                // Storing the results, Stride: 1 (dim0) and 3 (M) (dim1)
                _mve_set_only_element(1, 0);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 1);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 2);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 3);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 4);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 5);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 6);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 7);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 8);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 9);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 10);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 11);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 12);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 13);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 14);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 15);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 16);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 17);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 18);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 19);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 20);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 21);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 22);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 23);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 24);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 25);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 26);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 27);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 28);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 29);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 30);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 31);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 32);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 33);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 34);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 35);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 36);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 37);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 38);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 39);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 40);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 41);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 42);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 43);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 44);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 45);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 46);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 47);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 48);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 49);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 50);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 51);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 52);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 53);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 54);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 55);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 56);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 57);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 58);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 59);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 60);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 61);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 62);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 63);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_all_elements(1);

                output_addr += 64 * M;

                mve_flusher();
                n += 64;
            }

            if (n + 32 <= N) {
                // Second Dim: N
                _mve_set_dim_length(1, 32);
            }

            while (n + 32 <= N) {

                // Loading bias - Dim1.length = 32 - Dim0.length = 64, Stride: 0 (dim0) and 1 (dim1)
                __mdvdw acc_v = _mve_set1_dw(0);
                _mve_set_only_element(1, 0);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 1);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 2);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 3);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 4);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 5);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 6);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 7);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 8);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 9);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 10);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 11);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 12);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 13);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 14);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 15);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 16);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 17);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 18);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 19);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 20);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 21);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 22);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 23);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 24);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 25);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 26);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 27);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 28);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 29);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 30);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 31);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_all_elements(1);

                bias_addr += 32;

                input_addr = in;
                int32_t *weight_addr_tmp = weight_addr;
                weight_addr += 32 * K;

                for (int k = 0; k < K; k++) {

                    // Loading input - Dim1.length = 32 - Dim0.length = 64, Stride: 1 (dim0) and 0 (dim1)
                    // Loading weight - Dim1.length = 32 - Dim0.length = 64, Stride: 0 (dim0) and 3 (K) (dim1)
                    __mdvdw input_v = _mve_set1_dw(0);
                    __mdvdw weight_v = _mve_set1_dw(0);
                    _mve_set_only_element(1, 0);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 1);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 2);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 3);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 4);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 5);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 6);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 7);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 8);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 9);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 10);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 11);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 12);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 13);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 14);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 15);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 16);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 17);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 18);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 19);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 20);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 21);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 22);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 23);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 24);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 25);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 26);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 27);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 28);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 29);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 30);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 31);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_all_elements(1);

                    input_addr += M;
                    weight_addr_tmp += 1;

                    __mdvdw mult_v = _mve_mul_dw(input_v, weight_v);

                    acc_v = _mve_add_dw(acc_v, mult_v);
                }

                // Caculating Min and Max

                // R4 = R2 min R1
                acc_v = _mve_min_dw(acc_v, max_v);
                acc_v = _mve_max_dw(acc_v, min_v);

                // Storing the results, Stride: 1 (dim0) and 3 (M) (dim1)
                _mve_set_only_element(1, 0);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 1);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 2);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 3);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 4);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 5);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 6);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 7);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 8);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 9);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 10);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 11);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 12);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 13);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 14);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 15);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 16);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 17);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 18);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 19);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 20);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 21);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 22);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 23);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 24);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 25);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 26);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 27);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 28);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 29);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 30);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 31);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_all_elements(1);

                output_addr += 32 * M;

                mve_flusher();
                n += 32;
            }

            if (n + 16 <= N) {
                // Second Dim: N
                _mve_set_dim_length(1, 16);
            }

            while (n + 16 <= N) {

                // Loading bias - Dim1.length = 16 - Dim0.length = 64, Stride: 0 (dim0) and 1 (dim1)
                __mdvdw acc_v = _mve_set1_dw(0);
                _mve_set_only_element(1, 0);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 1);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 2);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 3);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 4);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 5);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 6);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 7);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 8);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 9);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 10);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 11);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 12);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 13);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 14);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 15);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_all_elements(1);

                bias_addr += 16;

                input_addr = in;
                int32_t *weight_addr_tmp = weight_addr;
                weight_addr += 16 * K;

                for (int k = 0; k < K; k++) {

                    // Loading input - Dim1.length = 16 - Dim0.length = 64, Stride: 1 (dim0) and 0 (dim1)
                    // Loading weight - Dim1.length = 16 - Dim0.length = 64, Stride: 0 (dim0) and 3 (K) (dim1)
                    __mdvdw input_v = _mve_set1_dw(0);
                    __mdvdw weight_v = _mve_set1_dw(0);
                    _mve_set_only_element(1, 0);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 1);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 2);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 3);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 4);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 5);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 6);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 7);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 8);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 9);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 10);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 11);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 12);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 13);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 14);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 15);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_all_elements(1);

                    input_addr += M;
                    weight_addr_tmp += 1;

                    __mdvdw mult_v = _mve_mul_dw(input_v, weight_v);

                    acc_v = _mve_add_dw(acc_v, mult_v);
                }

                // Caculating Min and Max

                // R4 = R2 min R1
                acc_v = _mve_min_dw(acc_v, max_v);
                acc_v = _mve_max_dw(acc_v, min_v);

                // Storing the results, Stride: 1 (dim0) and 3 (M) (dim1)
                _mve_set_only_element(1, 0);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 1);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 2);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 3);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 4);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 5);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 6);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 7);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 8);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 9);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 10);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 11);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 12);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 13);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 14);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 15);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_all_elements(1);

                output_addr += 16 * M;

                mve_flusher();
                n += 16;
            }

            if (n + 8 <= N) {
                // Second Dim: N
                _mve_set_dim_length(1, 8);
            }

            while (n + 8 <= N) {

                // Loading bias - Dim1.length = 8 - Dim0.length = 64, Stride: 0 (dim0) and 1 (dim1)
                __mdvdw acc_v = _mve_set1_dw(0);
                _mve_set_only_element(1, 0);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 1);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 2);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 3);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 4);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 5);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 6);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 7);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_all_elements(1);

                bias_addr += 8;

                input_addr = in;
                int32_t *weight_addr_tmp = weight_addr;
                weight_addr += 8 * K;

                for (int k = 0; k < K; k++) {

                    // Loading input - Dim1.length = 8 - Dim0.length = 64, Stride: 1 (dim0) and 0 (dim1)
                    // Loading weight - Dim1.length = 8 - Dim0.length = 64, Stride: 0 (dim0) and 3 (K) (dim1)
                    __mdvdw input_v = _mve_set1_dw(0);
                    __mdvdw weight_v = _mve_set1_dw(0);
                    _mve_set_only_element(1, 0);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 1);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 2);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 3);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 4);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 5);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 6);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 7);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_all_elements(1);

                    input_addr += M;
                    weight_addr_tmp += 1;

                    __mdvdw mult_v = _mve_mul_dw(input_v, weight_v);

                    acc_v = _mve_add_dw(acc_v, mult_v);
                }

                // Caculating Min and Max

                // R4 = R2 min R1
                acc_v = _mve_min_dw(acc_v, max_v);
                acc_v = _mve_max_dw(acc_v, min_v);

                // Storing the results, Stride: 1 (dim0) and 3 (M) (dim1)
                _mve_set_only_element(1, 0);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 1);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 2);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 3);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 4);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 5);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 6);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 7);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_all_elements(1);

                output_addr += 8 * M;

                mve_flusher();
                n += 8;
            }

            if (n + 4 <= N) {
                // Second Dim: N
                _mve_set_dim_length(1, 4);
            }

            while (n + 4 <= N) {

                // Loading bias - Dim1.length = 4 - Dim0.length = 64, Stride: 0 (dim0) and 1 (dim1)
                __mdvdw acc_v = _mve_set1_dw(0);
                _mve_set_only_element(1, 0);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 1);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 2);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 3);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_all_elements(1);

                bias_addr += 4;

                input_addr = in;
                int32_t *weight_addr_tmp = weight_addr;
                weight_addr += 4 * K;

                for (int k = 0; k < K; k++) {

                    // Loading input - Dim1.length = 4 - Dim0.length = 64, Stride: 1 (dim0) and 0 (dim1)
                    // Loading weight - Dim1.length = 4 - Dim0.length = 64, Stride: 0 (dim0) and 3 (K) (dim1)
                    __mdvdw input_v = _mve_set1_dw(0);
                    __mdvdw weight_v = _mve_set1_dw(0);
                    _mve_set_only_element(1, 0);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 1);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 2);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 3);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_all_elements(1);

                    input_addr += M;
                    weight_addr_tmp += 1;

                    __mdvdw mult_v = _mve_mul_dw(input_v, weight_v);

                    acc_v = _mve_add_dw(acc_v, mult_v);
                }

                // Caculating Min and Max

                // R4 = R2 min R1
                acc_v = _mve_min_dw(acc_v, max_v);
                acc_v = _mve_max_dw(acc_v, min_v);

                // Storing the results, Stride: 1 (dim0) and 3 (M) (dim1)
                _mve_set_only_element(1, 0);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 1);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 2);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 3);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_all_elements(1);

                output_addr += 4 * M;

                mve_flusher();
                n += 4;
            }

            if (n + 2 <= N) {
                // Second Dim: N
                _mve_set_dim_length(1, 2);
            }

            while (n + 2 <= N) {

                // Loading bias - Dim1.length = 2 - Dim0.length = 64, Stride: 0 (dim0) and 1 (dim1)
                __mdvdw acc_v = _mve_set1_dw(0);
                _mve_set_only_element(1, 0);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 1);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_all_elements(1);

                bias_addr += 2;

                input_addr = in;
                int32_t *weight_addr_tmp = weight_addr;
                weight_addr += 2 * K;

                for (int k = 0; k < K; k++) {

                    // Loading input - Dim1.length = 2 - Dim0.length = 64, Stride: 1 (dim0) and 0 (dim1)
                    // Loading weight - Dim1.length = 2 - Dim0.length = 64, Stride: 0 (dim0) and 3 (K) (dim1)
                    __mdvdw input_v = _mve_set1_dw(0);
                    __mdvdw weight_v = _mve_set1_dw(0);
                    _mve_set_only_element(1, 0);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 1);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_all_elements(1);

                    input_addr += M;
                    weight_addr_tmp += 1;

                    __mdvdw mult_v = _mve_mul_dw(input_v, weight_v);

                    acc_v = _mve_add_dw(acc_v, mult_v);
                }

                // Caculating Min and Max

                // R4 = R2 min R1
                acc_v = _mve_min_dw(acc_v, max_v);
                acc_v = _mve_max_dw(acc_v, min_v);

                // Storing the results, Stride: 1 (dim0) and 3 (M) (dim1)
                _mve_set_only_element(1, 0);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 1);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_all_elements(1);

                output_addr += 2 * M;

                mve_flusher();
                n += 2;
            }

            if (n + 1 <= N) {
                // Second Dim: N
                _mve_set_dim_length(1, 1);
            }

            while (n + 1 <= N) {

                // Loading bias - Dim1.length = 1 - Dim0.length = 64, Stride: 0 (dim0) and 1 (dim1)
                __mdvdw acc_v = _mve_set1_dw(0);
                _mve_set_only_element(1, 0);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_all_elements(1);

                bias_addr += 1;

                input_addr = in;
                int32_t *weight_addr_tmp = weight_addr;
                weight_addr += 1 * K;

                for (int k = 0; k < K; k++) {

                    // Loading input - Dim1.length = 1 - Dim0.length = 64, Stride: 1 (dim0) and 0 (dim1)
                    // Loading weight - Dim1.length = 1 - Dim0.length = 64, Stride: 0 (dim0) and 3 (K) (dim1)
                    __mdvdw input_v = _mve_set1_dw(0);
                    __mdvdw weight_v = _mve_set1_dw(0);
                    _mve_set_only_element(1, 0);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_all_elements(1);

                    input_addr += M;
                    weight_addr_tmp += 1;

                    __mdvdw mult_v = _mve_mul_dw(input_v, weight_v);

                    acc_v = _mve_add_dw(acc_v, mult_v);
                }

                // Caculating Min and Max

                // R4 = R2 min R1
                acc_v = _mve_min_dw(acc_v, max_v);
                acc_v = _mve_max_dw(acc_v, min_v);

                // Storing the results, Stride: 1 (dim0) and 3 (M) (dim1)
                _mve_set_only_element(1, 0);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_all_elements(1);

                output_addr += 1 * M;

                mve_flusher();
                n += 1;
            }

            in += 64;
            out += 64;
            m += 64;
        }
        if (m + 32 <= M) {
            // First Dim: M
            _mve_set_dim_length(0, 32);
        }
        while (m + 32 <= M) {

            bias_addr = bias;
            weight_addr = weights;
            output_addr = out;

            int n = 0;

            if (n + 128 <= N) {
                // Second Dim: N
                _mve_set_dim_length(1, 128);
            }

            while (n + 128 <= N) {

                // Loading bias - Dim1.length = 128 - Dim0.length = 32, Stride: 0 (dim0) and 1 (dim1)
                __mdvdw acc_v = _mve_set1_dw(0);
                _mve_set_only_element(1, 0);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 1);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 2);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 3);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 4);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 5);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 6);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 7);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 8);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 9);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 10);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 11);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 12);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 13);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 14);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 15);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 16);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 17);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 18);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 19);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 20);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 21);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 22);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 23);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 24);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 25);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 26);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 27);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 28);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 29);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 30);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 31);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 32);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 33);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 34);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 35);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 36);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 37);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 38);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 39);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 40);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 41);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 42);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 43);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 44);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 45);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 46);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 47);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 48);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 49);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 50);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 51);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 52);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 53);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 54);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 55);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 56);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 57);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 58);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 59);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 60);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 61);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 62);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 63);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 64);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 65);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 66);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 67);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 68);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 69);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 70);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 71);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 72);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 73);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 74);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 75);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 76);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 77);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 78);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 79);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 80);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 81);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 82);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 83);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 84);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 85);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 86);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 87);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 88);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 89);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 90);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 91);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 92);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 93);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 94);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 95);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 96);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 97);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 98);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 99);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 100);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 101);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 102);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 103);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 104);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 105);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 106);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 107);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 108);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 109);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 110);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 111);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 112);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 113);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 114);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 115);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 116);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 117);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 118);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 119);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 120);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 121);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 122);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 123);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 124);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 125);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 126);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 127);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_all_elements(1);

                bias_addr += 128;

                input_addr = in;
                int32_t *weight_addr_tmp = weight_addr;
                weight_addr += 128 * K;

                for (int k = 0; k < K; k++) {

                    // Loading input - Dim1.length = 128 - Dim0.length = 32, Stride: 1 (dim0) and 0 (dim1)
                    // Loading weight - Dim1.length = 128 - Dim0.length = 32, Stride: 0 (dim0) and 3 (K) (dim1)
                    __mdvdw input_v = _mve_set1_dw(0);
                    __mdvdw weight_v = _mve_set1_dw(0);
                    _mve_set_only_element(1, 0);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 1);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 2);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 3);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 4);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 5);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 6);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 7);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 8);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 9);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 10);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 11);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 12);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 13);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 14);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 15);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 16);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 17);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 18);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 19);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 20);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 21);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 22);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 23);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 24);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 25);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 26);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 27);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 28);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 29);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 30);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 31);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 32);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 33);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 34);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 35);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 36);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 37);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 38);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 39);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 40);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 41);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 42);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 43);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 44);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 45);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 46);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 47);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 48);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 49);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 50);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 51);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 52);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 53);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 54);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 55);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 56);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 57);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 58);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 59);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 60);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 61);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 62);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 63);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 64);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 65);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 66);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 67);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 68);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 69);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 70);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 71);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 72);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 73);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 74);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 75);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 76);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 77);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 78);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 79);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 80);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 81);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 82);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 83);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 84);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 85);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 86);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 87);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 88);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 89);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 90);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 91);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 92);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 93);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 94);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 95);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 96);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 97);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 98);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 99);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 100);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 101);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 102);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 103);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 104);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 105);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 106);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 107);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 108);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 109);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 110);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 111);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 112);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 113);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 114);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 115);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 116);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 117);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 118);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 119);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 120);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 121);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 122);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 123);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 124);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 125);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 126);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 127);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_all_elements(1);

                    input_addr += M;
                    weight_addr_tmp += 1;

                    __mdvdw mult_v = _mve_mul_dw(input_v, weight_v);

                    acc_v = _mve_add_dw(acc_v, mult_v);
                }

                // Caculating Min and Max

                // R4 = R2 min R1
                acc_v = _mve_min_dw(acc_v, max_v);
                acc_v = _mve_max_dw(acc_v, min_v);

                // Storing the results, Stride: 1 (dim0) and 3 (M) (dim1)
                _mve_set_only_element(1, 0);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 1);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 2);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 3);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 4);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 5);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 6);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 7);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 8);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 9);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 10);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 11);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 12);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 13);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 14);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 15);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 16);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 17);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 18);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 19);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 20);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 21);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 22);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 23);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 24);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 25);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 26);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 27);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 28);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 29);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 30);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 31);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 32);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 33);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 34);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 35);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 36);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 37);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 38);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 39);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 40);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 41);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 42);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 43);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 44);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 45);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 46);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 47);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 48);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 49);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 50);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 51);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 52);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 53);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 54);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 55);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 56);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 57);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 58);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 59);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 60);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 61);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 62);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 63);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 64);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 65);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 66);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 67);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 68);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 69);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 70);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 71);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 72);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 73);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 74);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 75);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 76);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 77);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 78);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 79);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 80);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 81);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 82);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 83);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 84);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 85);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 86);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 87);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 88);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 89);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 90);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 91);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 92);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 93);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 94);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 95);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 96);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 97);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 98);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 99);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 100);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 101);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 102);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 103);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 104);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 105);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 106);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 107);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 108);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 109);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 110);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 111);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 112);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 113);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 114);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 115);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 116);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 117);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 118);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 119);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 120);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 121);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 122);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 123);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 124);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 125);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 126);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 127);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_all_elements(1);

                output_addr += 128 * M;

                mve_flusher();
                n += 128;
            }

            if (n + 64 <= N) {
                // Second Dim: N
                _mve_set_dim_length(1, 64);
            }

            while (n + 64 <= N) {

                // Loading bias - Dim1.length = 64 - Dim0.length = 32, Stride: 0 (dim0) and 1 (dim1)
                __mdvdw acc_v = _mve_set1_dw(0);
                _mve_set_only_element(1, 0);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 1);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 2);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 3);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 4);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 5);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 6);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 7);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 8);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 9);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 10);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 11);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 12);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 13);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 14);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 15);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 16);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 17);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 18);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 19);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 20);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 21);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 22);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 23);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 24);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 25);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 26);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 27);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 28);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 29);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 30);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 31);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 32);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 33);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 34);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 35);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 36);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 37);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 38);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 39);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 40);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 41);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 42);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 43);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 44);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 45);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 46);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 47);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 48);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 49);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 50);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 51);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 52);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 53);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 54);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 55);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 56);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 57);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 58);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 59);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 60);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 61);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 62);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 63);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_all_elements(1);

                bias_addr += 64;

                input_addr = in;
                int32_t *weight_addr_tmp = weight_addr;
                weight_addr += 64 * K;

                for (int k = 0; k < K; k++) {

                    // Loading input - Dim1.length = 64 - Dim0.length = 32, Stride: 1 (dim0) and 0 (dim1)
                    // Loading weight - Dim1.length = 64 - Dim0.length = 32, Stride: 0 (dim0) and 3 (K) (dim1)
                    __mdvdw input_v = _mve_set1_dw(0);
                    __mdvdw weight_v = _mve_set1_dw(0);
                    _mve_set_only_element(1, 0);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 1);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 2);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 3);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 4);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 5);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 6);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 7);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 8);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 9);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 10);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 11);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 12);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 13);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 14);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 15);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 16);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 17);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 18);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 19);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 20);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 21);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 22);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 23);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 24);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 25);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 26);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 27);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 28);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 29);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 30);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 31);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 32);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 33);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 34);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 35);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 36);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 37);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 38);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 39);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 40);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 41);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 42);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 43);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 44);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 45);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 46);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 47);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 48);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 49);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 50);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 51);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 52);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 53);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 54);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 55);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 56);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 57);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 58);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 59);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 60);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 61);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 62);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 63);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_all_elements(1);

                    input_addr += M;
                    weight_addr_tmp += 1;

                    __mdvdw mult_v = _mve_mul_dw(input_v, weight_v);

                    acc_v = _mve_add_dw(acc_v, mult_v);
                }

                // Caculating Min and Max

                // R4 = R2 min R1
                acc_v = _mve_min_dw(acc_v, max_v);
                acc_v = _mve_max_dw(acc_v, min_v);

                // Storing the results, Stride: 1 (dim0) and 3 (M) (dim1)
                _mve_set_only_element(1, 0);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 1);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 2);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 3);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 4);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 5);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 6);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 7);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 8);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 9);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 10);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 11);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 12);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 13);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 14);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 15);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 16);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 17);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 18);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 19);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 20);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 21);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 22);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 23);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 24);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 25);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 26);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 27);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 28);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 29);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 30);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 31);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 32);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 33);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 34);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 35);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 36);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 37);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 38);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 39);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 40);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 41);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 42);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 43);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 44);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 45);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 46);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 47);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 48);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 49);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 50);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 51);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 52);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 53);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 54);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 55);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 56);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 57);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 58);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 59);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 60);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 61);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 62);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 63);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_all_elements(1);

                output_addr += 64 * M;

                mve_flusher();
                n += 64;
            }

            if (n + 32 <= N) {
                // Second Dim: N
                _mve_set_dim_length(1, 32);
            }

            while (n + 32 <= N) {

                // Loading bias - Dim1.length = 32 - Dim0.length = 32, Stride: 0 (dim0) and 1 (dim1)
                __mdvdw acc_v = _mve_set1_dw(0);
                _mve_set_only_element(1, 0);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 1);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 2);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 3);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 4);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 5);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 6);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 7);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 8);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 9);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 10);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 11);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 12);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 13);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 14);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 15);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 16);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 17);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 18);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 19);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 20);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 21);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 22);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 23);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 24);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 25);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 26);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 27);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 28);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 29);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 30);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 31);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_all_elements(1);

                bias_addr += 32;

                input_addr = in;
                int32_t *weight_addr_tmp = weight_addr;
                weight_addr += 32 * K;

                for (int k = 0; k < K; k++) {

                    // Loading input - Dim1.length = 32 - Dim0.length = 32, Stride: 1 (dim0) and 0 (dim1)
                    // Loading weight - Dim1.length = 32 - Dim0.length = 32, Stride: 0 (dim0) and 3 (K) (dim1)
                    __mdvdw input_v = _mve_set1_dw(0);
                    __mdvdw weight_v = _mve_set1_dw(0);
                    _mve_set_only_element(1, 0);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 1);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 2);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 3);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 4);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 5);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 6);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 7);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 8);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 9);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 10);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 11);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 12);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 13);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 14);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 15);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 16);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 17);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 18);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 19);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 20);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 21);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 22);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 23);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 24);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 25);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 26);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 27);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 28);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 29);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 30);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 31);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_all_elements(1);

                    input_addr += M;
                    weight_addr_tmp += 1;

                    __mdvdw mult_v = _mve_mul_dw(input_v, weight_v);

                    acc_v = _mve_add_dw(acc_v, mult_v);
                }

                // Caculating Min and Max

                // R4 = R2 min R1
                acc_v = _mve_min_dw(acc_v, max_v);
                acc_v = _mve_max_dw(acc_v, min_v);

                // Storing the results, Stride: 1 (dim0) and 3 (M) (dim1)
                _mve_set_only_element(1, 0);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 1);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 2);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 3);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 4);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 5);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 6);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 7);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 8);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 9);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 10);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 11);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 12);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 13);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 14);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 15);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 16);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 17);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 18);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 19);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 20);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 21);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 22);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 23);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 24);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 25);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 26);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 27);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 28);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 29);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 30);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 31);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_all_elements(1);

                output_addr += 32 * M;

                mve_flusher();
                n += 32;
            }

            if (n + 16 <= N) {
                // Second Dim: N
                _mve_set_dim_length(1, 16);
            }

            while (n + 16 <= N) {

                // Loading bias - Dim1.length = 16 - Dim0.length = 32, Stride: 0 (dim0) and 1 (dim1)
                __mdvdw acc_v = _mve_set1_dw(0);
                _mve_set_only_element(1, 0);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 1);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 2);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 3);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 4);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 5);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 6);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 7);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 8);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 9);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 10);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 11);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 12);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 13);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 14);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 15);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_all_elements(1);

                bias_addr += 16;

                input_addr = in;
                int32_t *weight_addr_tmp = weight_addr;
                weight_addr += 16 * K;

                for (int k = 0; k < K; k++) {

                    // Loading input - Dim1.length = 16 - Dim0.length = 32, Stride: 1 (dim0) and 0 (dim1)
                    // Loading weight - Dim1.length = 16 - Dim0.length = 32, Stride: 0 (dim0) and 3 (K) (dim1)
                    __mdvdw input_v = _mve_set1_dw(0);
                    __mdvdw weight_v = _mve_set1_dw(0);
                    _mve_set_only_element(1, 0);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 1);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 2);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 3);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 4);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 5);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 6);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 7);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 8);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 9);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 10);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 11);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 12);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 13);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 14);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 15);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_all_elements(1);

                    input_addr += M;
                    weight_addr_tmp += 1;

                    __mdvdw mult_v = _mve_mul_dw(input_v, weight_v);

                    acc_v = _mve_add_dw(acc_v, mult_v);
                }

                // Caculating Min and Max

                // R4 = R2 min R1
                acc_v = _mve_min_dw(acc_v, max_v);
                acc_v = _mve_max_dw(acc_v, min_v);

                // Storing the results, Stride: 1 (dim0) and 3 (M) (dim1)
                _mve_set_only_element(1, 0);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 1);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 2);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 3);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 4);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 5);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 6);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 7);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 8);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 9);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 10);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 11);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 12);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 13);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 14);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 15);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_all_elements(1);

                output_addr += 16 * M;

                mve_flusher();
                n += 16;
            }

            if (n + 8 <= N) {
                // Second Dim: N
                _mve_set_dim_length(1, 8);
            }

            while (n + 8 <= N) {

                // Loading bias - Dim1.length = 8 - Dim0.length = 32, Stride: 0 (dim0) and 1 (dim1)
                __mdvdw acc_v = _mve_set1_dw(0);
                _mve_set_only_element(1, 0);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 1);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 2);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 3);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 4);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 5);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 6);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 7);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_all_elements(1);

                bias_addr += 8;

                input_addr = in;
                int32_t *weight_addr_tmp = weight_addr;
                weight_addr += 8 * K;

                for (int k = 0; k < K; k++) {

                    // Loading input - Dim1.length = 8 - Dim0.length = 32, Stride: 1 (dim0) and 0 (dim1)
                    // Loading weight - Dim1.length = 8 - Dim0.length = 32, Stride: 0 (dim0) and 3 (K) (dim1)
                    __mdvdw input_v = _mve_set1_dw(0);
                    __mdvdw weight_v = _mve_set1_dw(0);
                    _mve_set_only_element(1, 0);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 1);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 2);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 3);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 4);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 5);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 6);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 7);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_all_elements(1);

                    input_addr += M;
                    weight_addr_tmp += 1;

                    __mdvdw mult_v = _mve_mul_dw(input_v, weight_v);

                    acc_v = _mve_add_dw(acc_v, mult_v);
                }

                // Caculating Min and Max

                // R4 = R2 min R1
                acc_v = _mve_min_dw(acc_v, max_v);
                acc_v = _mve_max_dw(acc_v, min_v);

                // Storing the results, Stride: 1 (dim0) and 3 (M) (dim1)
                _mve_set_only_element(1, 0);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 1);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 2);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 3);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 4);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 5);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 6);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 7);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_all_elements(1);

                output_addr += 8 * M;

                mve_flusher();
                n += 8;
            }

            if (n + 4 <= N) {
                // Second Dim: N
                _mve_set_dim_length(1, 4);
            }

            while (n + 4 <= N) {

                // Loading bias - Dim1.length = 4 - Dim0.length = 32, Stride: 0 (dim0) and 1 (dim1)
                __mdvdw acc_v = _mve_set1_dw(0);
                _mve_set_only_element(1, 0);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 1);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 2);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 3);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_all_elements(1);

                bias_addr += 4;

                input_addr = in;
                int32_t *weight_addr_tmp = weight_addr;
                weight_addr += 4 * K;

                for (int k = 0; k < K; k++) {

                    // Loading input - Dim1.length = 4 - Dim0.length = 32, Stride: 1 (dim0) and 0 (dim1)
                    // Loading weight - Dim1.length = 4 - Dim0.length = 32, Stride: 0 (dim0) and 3 (K) (dim1)
                    __mdvdw input_v = _mve_set1_dw(0);
                    __mdvdw weight_v = _mve_set1_dw(0);
                    _mve_set_only_element(1, 0);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 1);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 2);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 3);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_all_elements(1);

                    input_addr += M;
                    weight_addr_tmp += 1;

                    __mdvdw mult_v = _mve_mul_dw(input_v, weight_v);

                    acc_v = _mve_add_dw(acc_v, mult_v);
                }

                // Caculating Min and Max

                // R4 = R2 min R1
                acc_v = _mve_min_dw(acc_v, max_v);
                acc_v = _mve_max_dw(acc_v, min_v);

                // Storing the results, Stride: 1 (dim0) and 3 (M) (dim1)
                _mve_set_only_element(1, 0);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 1);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 2);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 3);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_all_elements(1);

                output_addr += 4 * M;

                mve_flusher();
                n += 4;
            }

            if (n + 2 <= N) {
                // Second Dim: N
                _mve_set_dim_length(1, 2);
            }

            while (n + 2 <= N) {

                // Loading bias - Dim1.length = 2 - Dim0.length = 32, Stride: 0 (dim0) and 1 (dim1)
                __mdvdw acc_v = _mve_set1_dw(0);
                _mve_set_only_element(1, 0);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 1);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_all_elements(1);

                bias_addr += 2;

                input_addr = in;
                int32_t *weight_addr_tmp = weight_addr;
                weight_addr += 2 * K;

                for (int k = 0; k < K; k++) {

                    // Loading input - Dim1.length = 2 - Dim0.length = 32, Stride: 1 (dim0) and 0 (dim1)
                    // Loading weight - Dim1.length = 2 - Dim0.length = 32, Stride: 0 (dim0) and 3 (K) (dim1)
                    __mdvdw input_v = _mve_set1_dw(0);
                    __mdvdw weight_v = _mve_set1_dw(0);
                    _mve_set_only_element(1, 0);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 1);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_all_elements(1);

                    input_addr += M;
                    weight_addr_tmp += 1;

                    __mdvdw mult_v = _mve_mul_dw(input_v, weight_v);

                    acc_v = _mve_add_dw(acc_v, mult_v);
                }

                // Caculating Min and Max

                // R4 = R2 min R1
                acc_v = _mve_min_dw(acc_v, max_v);
                acc_v = _mve_max_dw(acc_v, min_v);

                // Storing the results, Stride: 1 (dim0) and 3 (M) (dim1)
                _mve_set_only_element(1, 0);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 1);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_all_elements(1);

                output_addr += 2 * M;

                mve_flusher();
                n += 2;
            }

            if (n + 1 <= N) {
                // Second Dim: N
                _mve_set_dim_length(1, 1);
            }

            while (n + 1 <= N) {

                // Loading bias - Dim1.length = 1 - Dim0.length = 32, Stride: 0 (dim0) and 1 (dim1)
                __mdvdw acc_v = _mve_set1_dw(0);
                _mve_set_only_element(1, 0);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_all_elements(1);

                bias_addr += 1;

                input_addr = in;
                int32_t *weight_addr_tmp = weight_addr;
                weight_addr += 1 * K;

                for (int k = 0; k < K; k++) {

                    // Loading input - Dim1.length = 1 - Dim0.length = 32, Stride: 1 (dim0) and 0 (dim1)
                    // Loading weight - Dim1.length = 1 - Dim0.length = 32, Stride: 0 (dim0) and 3 (K) (dim1)
                    __mdvdw input_v = _mve_set1_dw(0);
                    __mdvdw weight_v = _mve_set1_dw(0);
                    _mve_set_only_element(1, 0);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_all_elements(1);

                    input_addr += M;
                    weight_addr_tmp += 1;

                    __mdvdw mult_v = _mve_mul_dw(input_v, weight_v);

                    acc_v = _mve_add_dw(acc_v, mult_v);
                }

                // Caculating Min and Max

                // R4 = R2 min R1
                acc_v = _mve_min_dw(acc_v, max_v);
                acc_v = _mve_max_dw(acc_v, min_v);

                // Storing the results, Stride: 1 (dim0) and 3 (M) (dim1)
                _mve_set_only_element(1, 0);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_all_elements(1);

                output_addr += 1 * M;

                mve_flusher();
                n += 1;
            }

            in += 32;
            out += 32;
            m += 32;
        }
        if (M > m) {
            _mve_set_dim_length(0, M - m);

            int n_per_iter = 32 * (int)(128 / (M - m));

            bias_addr = bias;
            weight_addr = weights;
            output_addr = out;

            int n = 0;

            while (n < N) {

                int curr_n_per_iter = (N - n) < n_per_iter ? (N - n) : n_per_iter;

                _mve_set_dim_length(1, curr_n_per_iter);

                // Loading bias - Dim1.length = curr_n_per_iter - Dim0.length = (M - m), Stride: 0 (dim0) and 1 (dim1)
                __mdvdw acc_v = _mve_set1_dw(0);
                for (int n_idx = 0; n_idx < curr_n_per_iter; n_idx++) {
                    _mve_set_only_element(1, n_idx);
                    acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                }
                _mve_set_all_elements(1);

                bias_addr += curr_n_per_iter;

                input_addr = in;
                int32_t *weight_addr_tmp = weight_addr;
                weight_addr += curr_n_per_iter * K;

                for (int k = 0; k < K; k++) {

                    // Loading input - Dim1.length = curr_n_per_iter - Dim0.length = (M - m), Stride: 1 (dim0) and 0 (dim1)
                    // Loading weight - Dim1.length = curr_n_per_iter - Dim0.length = (M - m), Stride: 0 (dim0) and 3 (K) (dim1)
                    __mdvdw input_v = _mve_set1_dw(0);
                    __mdvdw weight_v = _mve_set1_dw(0);
                    for (int n_idx = 0; n_idx < curr_n_per_iter; n_idx++) {
                        _mve_set_only_element(1, n_idx);
                        input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                        weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    }
                    _mve_set_all_elements(1);

                    input_addr += M;
                    weight_addr_tmp += 1;

                    __mdvdw mult_v = _mve_mul_dw(input_v, weight_v);

                    acc_v = _mve_add_dw(acc_v, mult_v);

                    // replace R3 and R2 for acc_v
                }

                // Caculating Min and Max

                // R4 = R2 min R1
                acc_v = _mve_min_dw(acc_v, max_v);
                acc_v = _mve_max_dw(acc_v, min_v);

                // Storing the results, Stride: 1 (dim0), 3 or M (dim1)
                for (int n_idx = 0; n_idx < curr_n_per_iter; n_idx++) {
                    _mve_set_only_element(1, n_idx);
                    _mve_store_dw(output_addr, acc_v, output_stride);
                }
                _mve_set_all_elements(1);

                output_addr += curr_n_per_iter * M;

                mve_flusher();
                n += curr_n_per_iter;
            }
        }
    } else if (LANE_NUM == 2048) {
        if (m + 2048 <= M) {
            // First Dim: M
            _mve_set_dim_length(0, 2048);
        }
        while (m + 2048 <= M) {

            bias_addr = bias;
            weight_addr = weights;
            output_addr = out;

            int n = 0;

            if (n + 1 <= N) {
                // Second Dim: N
                _mve_set_dim_length(1, 1);
            }

            while (n + 1 <= N) {

                // Loading bias - Dim1.length = 1 - Dim0.length = 2048, Stride: 0 (dim0) and 1 (dim1)
                __mdvdw acc_v = _mve_set1_dw(0);
                _mve_set_only_element(1, 0);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_all_elements(1);

                bias_addr += 1;

                input_addr = in;
                int32_t *weight_addr_tmp = weight_addr;
                weight_addr += 1 * K;

                for (int k = 0; k < K; k++) {

                    // Loading input - Dim1.length = 1 - Dim0.length = 2048, Stride: 1 (dim0) and 0 (dim1)
                    // Loading weight - Dim1.length = 1 - Dim0.length = 2048, Stride: 0 (dim0) and 3 (K) (dim1)
                    __mdvdw input_v = _mve_set1_dw(0);
                    __mdvdw weight_v = _mve_set1_dw(0);
                    _mve_set_only_element(1, 0);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_all_elements(1);

                    input_addr += M;
                    weight_addr_tmp += 1;

                    __mdvdw mult_v = _mve_mul_dw(input_v, weight_v);

                    acc_v = _mve_add_dw(acc_v, mult_v);
                }

                // Caculating Min and Max

                // R4 = R2 min R1
                acc_v = _mve_min_dw(acc_v, max_v);
                acc_v = _mve_max_dw(acc_v, min_v);

                // Storing the results, Stride: 1 (dim0) and 3 (M) (dim1)
                _mve_set_only_element(1, 0);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_all_elements(1);

                output_addr += 1 * M;

                mve_flusher();
                n += 1;
            }

            in += 2048;
            out += 2048;
            m += 2048;
        }
        if (m + 1024 <= M) {
            // First Dim: M
            _mve_set_dim_length(0, 1024);
        }
        while (m + 1024 <= M) {

            bias_addr = bias;
            weight_addr = weights;
            output_addr = out;

            int n = 0;

            if (n + 2 <= N) {
                // Second Dim: N
                _mve_set_dim_length(1, 2);
            }

            while (n + 2 <= N) {

                // Loading bias - Dim1.length = 2 - Dim0.length = 1024, Stride: 0 (dim0) and 1 (dim1)
                __mdvdw acc_v = _mve_set1_dw(0);
                _mve_set_only_element(1, 0);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 1);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_all_elements(1);

                bias_addr += 2;

                input_addr = in;
                int32_t *weight_addr_tmp = weight_addr;
                weight_addr += 2 * K;

                for (int k = 0; k < K; k++) {

                    // Loading input - Dim1.length = 2 - Dim0.length = 1024, Stride: 1 (dim0) and 0 (dim1)
                    // Loading weight - Dim1.length = 2 - Dim0.length = 1024, Stride: 0 (dim0) and 3 (K) (dim1)
                    __mdvdw input_v = _mve_set1_dw(0);
                    __mdvdw weight_v = _mve_set1_dw(0);
                    _mve_set_only_element(1, 0);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 1);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_all_elements(1);

                    input_addr += M;
                    weight_addr_tmp += 1;

                    __mdvdw mult_v = _mve_mul_dw(input_v, weight_v);

                    acc_v = _mve_add_dw(acc_v, mult_v);
                }

                // Caculating Min and Max

                // R4 = R2 min R1
                acc_v = _mve_min_dw(acc_v, max_v);
                acc_v = _mve_max_dw(acc_v, min_v);

                // Storing the results, Stride: 1 (dim0) and 3 (M) (dim1)
                _mve_set_only_element(1, 0);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 1);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_all_elements(1);

                output_addr += 2 * M;

                mve_flusher();
                n += 2;
            }

            if (n + 1 <= N) {
                // Second Dim: N
                _mve_set_dim_length(1, 1);
            }

            while (n + 1 <= N) {

                // Loading bias - Dim1.length = 1 - Dim0.length = 1024, Stride: 0 (dim0) and 1 (dim1)
                __mdvdw acc_v = _mve_set1_dw(0);
                _mve_set_only_element(1, 0);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_all_elements(1);

                bias_addr += 1;

                input_addr = in;
                int32_t *weight_addr_tmp = weight_addr;
                weight_addr += 1 * K;

                for (int k = 0; k < K; k++) {

                    // Loading input - Dim1.length = 1 - Dim0.length = 1024, Stride: 1 (dim0) and 0 (dim1)
                    // Loading weight - Dim1.length = 1 - Dim0.length = 1024, Stride: 0 (dim0) and 3 (K) (dim1)
                    __mdvdw input_v = _mve_set1_dw(0);
                    __mdvdw weight_v = _mve_set1_dw(0);
                    _mve_set_only_element(1, 0);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_all_elements(1);

                    input_addr += M;
                    weight_addr_tmp += 1;

                    __mdvdw mult_v = _mve_mul_dw(input_v, weight_v);

                    acc_v = _mve_add_dw(acc_v, mult_v);
                }

                // Caculating Min and Max

                // R4 = R2 min R1
                acc_v = _mve_min_dw(acc_v, max_v);
                acc_v = _mve_max_dw(acc_v, min_v);

                // Storing the results, Stride: 1 (dim0) and 3 (M) (dim1)
                _mve_set_only_element(1, 0);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_all_elements(1);

                output_addr += 1 * M;

                mve_flusher();
                n += 1;
            }

            in += 1024;
            out += 1024;
            m += 1024;
        }
        if (m + 512 <= M) {
            // First Dim: M
            _mve_set_dim_length(0, 512);
        }
        while (m + 512 <= M) {

            bias_addr = bias;
            weight_addr = weights;
            output_addr = out;

            int n = 0;

            if (n + 4 <= N) {
                // Second Dim: N
                _mve_set_dim_length(1, 4);
            }

            while (n + 4 <= N) {

                // Loading bias - Dim1.length = 4 - Dim0.length = 512, Stride: 0 (dim0) and 1 (dim1)
                __mdvdw acc_v = _mve_set1_dw(0);
                _mve_set_only_element(1, 0);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 1);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 2);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 3);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_all_elements(1);

                bias_addr += 4;

                input_addr = in;
                int32_t *weight_addr_tmp = weight_addr;
                weight_addr += 4 * K;

                for (int k = 0; k < K; k++) {

                    // Loading input - Dim1.length = 4 - Dim0.length = 512, Stride: 1 (dim0) and 0 (dim1)
                    // Loading weight - Dim1.length = 4 - Dim0.length = 512, Stride: 0 (dim0) and 3 (K) (dim1)
                    __mdvdw input_v = _mve_set1_dw(0);
                    __mdvdw weight_v = _mve_set1_dw(0);
                    _mve_set_only_element(1, 0);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 1);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 2);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 3);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_all_elements(1);

                    input_addr += M;
                    weight_addr_tmp += 1;

                    __mdvdw mult_v = _mve_mul_dw(input_v, weight_v);

                    acc_v = _mve_add_dw(acc_v, mult_v);
                }

                // Caculating Min and Max

                // R4 = R2 min R1
                acc_v = _mve_min_dw(acc_v, max_v);
                acc_v = _mve_max_dw(acc_v, min_v);

                // Storing the results, Stride: 1 (dim0) and 3 (M) (dim1)
                _mve_set_only_element(1, 0);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 1);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 2);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 3);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_all_elements(1);

                output_addr += 4 * M;

                mve_flusher();
                n += 4;
            }

            if (n + 2 <= N) {
                // Second Dim: N
                _mve_set_dim_length(1, 2);
            }

            while (n + 2 <= N) {

                // Loading bias - Dim1.length = 2 - Dim0.length = 512, Stride: 0 (dim0) and 1 (dim1)
                __mdvdw acc_v = _mve_set1_dw(0);
                _mve_set_only_element(1, 0);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 1);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_all_elements(1);

                bias_addr += 2;

                input_addr = in;
                int32_t *weight_addr_tmp = weight_addr;
                weight_addr += 2 * K;

                for (int k = 0; k < K; k++) {

                    // Loading input - Dim1.length = 2 - Dim0.length = 512, Stride: 1 (dim0) and 0 (dim1)
                    // Loading weight - Dim1.length = 2 - Dim0.length = 512, Stride: 0 (dim0) and 3 (K) (dim1)
                    __mdvdw input_v = _mve_set1_dw(0);
                    __mdvdw weight_v = _mve_set1_dw(0);
                    _mve_set_only_element(1, 0);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 1);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_all_elements(1);

                    input_addr += M;
                    weight_addr_tmp += 1;

                    __mdvdw mult_v = _mve_mul_dw(input_v, weight_v);

                    acc_v = _mve_add_dw(acc_v, mult_v);
                }

                // Caculating Min and Max

                // R4 = R2 min R1
                acc_v = _mve_min_dw(acc_v, max_v);
                acc_v = _mve_max_dw(acc_v, min_v);

                // Storing the results, Stride: 1 (dim0) and 3 (M) (dim1)
                _mve_set_only_element(1, 0);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 1);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_all_elements(1);

                output_addr += 2 * M;

                mve_flusher();
                n += 2;
            }

            if (n + 1 <= N) {
                // Second Dim: N
                _mve_set_dim_length(1, 1);
            }

            while (n + 1 <= N) {

                // Loading bias - Dim1.length = 1 - Dim0.length = 512, Stride: 0 (dim0) and 1 (dim1)
                __mdvdw acc_v = _mve_set1_dw(0);
                _mve_set_only_element(1, 0);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_all_elements(1);

                bias_addr += 1;

                input_addr = in;
                int32_t *weight_addr_tmp = weight_addr;
                weight_addr += 1 * K;

                for (int k = 0; k < K; k++) {

                    // Loading input - Dim1.length = 1 - Dim0.length = 512, Stride: 1 (dim0) and 0 (dim1)
                    // Loading weight - Dim1.length = 1 - Dim0.length = 512, Stride: 0 (dim0) and 3 (K) (dim1)
                    __mdvdw input_v = _mve_set1_dw(0);
                    __mdvdw weight_v = _mve_set1_dw(0);
                    _mve_set_only_element(1, 0);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_all_elements(1);

                    input_addr += M;
                    weight_addr_tmp += 1;

                    __mdvdw mult_v = _mve_mul_dw(input_v, weight_v);

                    acc_v = _mve_add_dw(acc_v, mult_v);
                }

                // Caculating Min and Max

                // R4 = R2 min R1
                acc_v = _mve_min_dw(acc_v, max_v);
                acc_v = _mve_max_dw(acc_v, min_v);

                // Storing the results, Stride: 1 (dim0) and 3 (M) (dim1)
                _mve_set_only_element(1, 0);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_all_elements(1);

                output_addr += 1 * M;

                mve_flusher();
                n += 1;
            }

            in += 512;
            out += 512;
            m += 512;
        }
        if (m + 256 <= M) {
            // First Dim: M
            _mve_set_dim_length(0, 256);
        }
        while (m + 256 <= M) {

            bias_addr = bias;
            weight_addr = weights;
            output_addr = out;

            int n = 0;

            if (n + 8 <= N) {
                // Second Dim: N
                _mve_set_dim_length(1, 8);
            }

            while (n + 8 <= N) {

                // Loading bias - Dim1.length = 8 - Dim0.length = 256, Stride: 0 (dim0) and 1 (dim1)
                __mdvdw acc_v = _mve_set1_dw(0);
                _mve_set_only_element(1, 0);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 1);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 2);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 3);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 4);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 5);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 6);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 7);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_all_elements(1);

                bias_addr += 8;

                input_addr = in;
                int32_t *weight_addr_tmp = weight_addr;
                weight_addr += 8 * K;

                for (int k = 0; k < K; k++) {

                    // Loading input - Dim1.length = 8 - Dim0.length = 256, Stride: 1 (dim0) and 0 (dim1)
                    // Loading weight - Dim1.length = 8 - Dim0.length = 256, Stride: 0 (dim0) and 3 (K) (dim1)
                    __mdvdw input_v = _mve_set1_dw(0);
                    __mdvdw weight_v = _mve_set1_dw(0);
                    _mve_set_only_element(1, 0);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 1);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 2);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 3);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 4);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 5);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 6);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 7);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_all_elements(1);

                    input_addr += M;
                    weight_addr_tmp += 1;

                    __mdvdw mult_v = _mve_mul_dw(input_v, weight_v);

                    acc_v = _mve_add_dw(acc_v, mult_v);
                }

                // Caculating Min and Max

                // R4 = R2 min R1
                acc_v = _mve_min_dw(acc_v, max_v);
                acc_v = _mve_max_dw(acc_v, min_v);

                // Storing the results, Stride: 1 (dim0) and 3 (M) (dim1)
                _mve_set_only_element(1, 0);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 1);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 2);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 3);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 4);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 5);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 6);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 7);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_all_elements(1);

                output_addr += 8 * M;

                mve_flusher();
                n += 8;
            }

            if (n + 4 <= N) {
                // Second Dim: N
                _mve_set_dim_length(1, 4);
            }

            while (n + 4 <= N) {

                // Loading bias - Dim1.length = 4 - Dim0.length = 256, Stride: 0 (dim0) and 1 (dim1)
                __mdvdw acc_v = _mve_set1_dw(0);
                _mve_set_only_element(1, 0);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 1);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 2);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 3);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_all_elements(1);

                bias_addr += 4;

                input_addr = in;
                int32_t *weight_addr_tmp = weight_addr;
                weight_addr += 4 * K;

                for (int k = 0; k < K; k++) {

                    // Loading input - Dim1.length = 4 - Dim0.length = 256, Stride: 1 (dim0) and 0 (dim1)
                    // Loading weight - Dim1.length = 4 - Dim0.length = 256, Stride: 0 (dim0) and 3 (K) (dim1)
                    __mdvdw input_v = _mve_set1_dw(0);
                    __mdvdw weight_v = _mve_set1_dw(0);
                    _mve_set_only_element(1, 0);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 1);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 2);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 3);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_all_elements(1);

                    input_addr += M;
                    weight_addr_tmp += 1;

                    __mdvdw mult_v = _mve_mul_dw(input_v, weight_v);

                    acc_v = _mve_add_dw(acc_v, mult_v);
                }

                // Caculating Min and Max

                // R4 = R2 min R1
                acc_v = _mve_min_dw(acc_v, max_v);
                acc_v = _mve_max_dw(acc_v, min_v);

                // Storing the results, Stride: 1 (dim0) and 3 (M) (dim1)
                _mve_set_only_element(1, 0);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 1);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 2);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 3);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_all_elements(1);

                output_addr += 4 * M;

                mve_flusher();
                n += 4;
            }

            if (n + 2 <= N) {
                // Second Dim: N
                _mve_set_dim_length(1, 2);
            }

            while (n + 2 <= N) {

                // Loading bias - Dim1.length = 2 - Dim0.length = 256, Stride: 0 (dim0) and 1 (dim1)
                __mdvdw acc_v = _mve_set1_dw(0);
                _mve_set_only_element(1, 0);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 1);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_all_elements(1);

                bias_addr += 2;

                input_addr = in;
                int32_t *weight_addr_tmp = weight_addr;
                weight_addr += 2 * K;

                for (int k = 0; k < K; k++) {

                    // Loading input - Dim1.length = 2 - Dim0.length = 256, Stride: 1 (dim0) and 0 (dim1)
                    // Loading weight - Dim1.length = 2 - Dim0.length = 256, Stride: 0 (dim0) and 3 (K) (dim1)
                    __mdvdw input_v = _mve_set1_dw(0);
                    __mdvdw weight_v = _mve_set1_dw(0);
                    _mve_set_only_element(1, 0);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 1);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_all_elements(1);

                    input_addr += M;
                    weight_addr_tmp += 1;

                    __mdvdw mult_v = _mve_mul_dw(input_v, weight_v);

                    acc_v = _mve_add_dw(acc_v, mult_v);
                }

                // Caculating Min and Max

                // R4 = R2 min R1
                acc_v = _mve_min_dw(acc_v, max_v);
                acc_v = _mve_max_dw(acc_v, min_v);

                // Storing the results, Stride: 1 (dim0) and 3 (M) (dim1)
                _mve_set_only_element(1, 0);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 1);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_all_elements(1);

                output_addr += 2 * M;

                mve_flusher();
                n += 2;
            }

            if (n + 1 <= N) {
                // Second Dim: N
                _mve_set_dim_length(1, 1);
            }

            while (n + 1 <= N) {

                // Loading bias - Dim1.length = 1 - Dim0.length = 256, Stride: 0 (dim0) and 1 (dim1)
                __mdvdw acc_v = _mve_set1_dw(0);
                _mve_set_only_element(1, 0);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_all_elements(1);

                bias_addr += 1;

                input_addr = in;
                int32_t *weight_addr_tmp = weight_addr;
                weight_addr += 1 * K;

                for (int k = 0; k < K; k++) {

                    // Loading input - Dim1.length = 1 - Dim0.length = 256, Stride: 1 (dim0) and 0 (dim1)
                    // Loading weight - Dim1.length = 1 - Dim0.length = 256, Stride: 0 (dim0) and 3 (K) (dim1)
                    __mdvdw input_v = _mve_set1_dw(0);
                    __mdvdw weight_v = _mve_set1_dw(0);
                    _mve_set_only_element(1, 0);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_all_elements(1);

                    input_addr += M;
                    weight_addr_tmp += 1;

                    __mdvdw mult_v = _mve_mul_dw(input_v, weight_v);

                    acc_v = _mve_add_dw(acc_v, mult_v);
                }

                // Caculating Min and Max

                // R4 = R2 min R1
                acc_v = _mve_min_dw(acc_v, max_v);
                acc_v = _mve_max_dw(acc_v, min_v);

                // Storing the results, Stride: 1 (dim0) and 3 (M) (dim1)
                _mve_set_only_element(1, 0);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_all_elements(1);

                output_addr += 1 * M;

                mve_flusher();
                n += 1;
            }

            in += 256;
            out += 256;
            m += 256;
        }
        if (m + 128 <= M) {
            // First Dim: M
            _mve_set_dim_length(0, 128);
        }
        while (m + 128 <= M) {

            bias_addr = bias;
            weight_addr = weights;
            output_addr = out;

            int n = 0;

            if (n + 16 <= N) {
                // Second Dim: N
                _mve_set_dim_length(1, 16);
            }

            while (n + 16 <= N) {

                // Loading bias - Dim1.length = 16 - Dim0.length = 128, Stride: 0 (dim0) and 1 (dim1)
                __mdvdw acc_v = _mve_set1_dw(0);
                _mve_set_only_element(1, 0);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 1);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 2);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 3);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 4);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 5);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 6);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 7);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 8);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 9);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 10);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 11);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 12);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 13);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 14);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 15);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_all_elements(1);

                bias_addr += 16;

                input_addr = in;
                int32_t *weight_addr_tmp = weight_addr;
                weight_addr += 16 * K;

                for (int k = 0; k < K; k++) {

                    // Loading input - Dim1.length = 16 - Dim0.length = 128, Stride: 1 (dim0) and 0 (dim1)
                    // Loading weight - Dim1.length = 16 - Dim0.length = 128, Stride: 0 (dim0) and 3 (K) (dim1)
                    __mdvdw input_v = _mve_set1_dw(0);
                    __mdvdw weight_v = _mve_set1_dw(0);
                    _mve_set_only_element(1, 0);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 1);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 2);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 3);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 4);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 5);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 6);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 7);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 8);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 9);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 10);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 11);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 12);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 13);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 14);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 15);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_all_elements(1);

                    input_addr += M;
                    weight_addr_tmp += 1;

                    __mdvdw mult_v = _mve_mul_dw(input_v, weight_v);

                    acc_v = _mve_add_dw(acc_v, mult_v);
                }

                // Caculating Min and Max

                // R4 = R2 min R1
                acc_v = _mve_min_dw(acc_v, max_v);
                acc_v = _mve_max_dw(acc_v, min_v);

                // Storing the results, Stride: 1 (dim0) and 3 (M) (dim1)
                _mve_set_only_element(1, 0);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 1);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 2);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 3);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 4);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 5);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 6);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 7);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 8);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 9);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 10);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 11);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 12);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 13);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 14);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 15);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_all_elements(1);

                output_addr += 16 * M;

                mve_flusher();
                n += 16;
            }

            if (n + 8 <= N) {
                // Second Dim: N
                _mve_set_dim_length(1, 8);
            }

            while (n + 8 <= N) {

                // Loading bias - Dim1.length = 8 - Dim0.length = 128, Stride: 0 (dim0) and 1 (dim1)
                __mdvdw acc_v = _mve_set1_dw(0);
                _mve_set_only_element(1, 0);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 1);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 2);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 3);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 4);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 5);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 6);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 7);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_all_elements(1);

                bias_addr += 8;

                input_addr = in;
                int32_t *weight_addr_tmp = weight_addr;
                weight_addr += 8 * K;

                for (int k = 0; k < K; k++) {

                    // Loading input - Dim1.length = 8 - Dim0.length = 128, Stride: 1 (dim0) and 0 (dim1)
                    // Loading weight - Dim1.length = 8 - Dim0.length = 128, Stride: 0 (dim0) and 3 (K) (dim1)
                    __mdvdw input_v = _mve_set1_dw(0);
                    __mdvdw weight_v = _mve_set1_dw(0);
                    _mve_set_only_element(1, 0);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 1);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 2);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 3);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 4);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 5);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 6);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 7);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_all_elements(1);

                    input_addr += M;
                    weight_addr_tmp += 1;

                    __mdvdw mult_v = _mve_mul_dw(input_v, weight_v);

                    acc_v = _mve_add_dw(acc_v, mult_v);
                }

                // Caculating Min and Max

                // R4 = R2 min R1
                acc_v = _mve_min_dw(acc_v, max_v);
                acc_v = _mve_max_dw(acc_v, min_v);

                // Storing the results, Stride: 1 (dim0) and 3 (M) (dim1)
                _mve_set_only_element(1, 0);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 1);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 2);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 3);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 4);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 5);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 6);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 7);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_all_elements(1);

                output_addr += 8 * M;

                mve_flusher();
                n += 8;
            }

            if (n + 4 <= N) {
                // Second Dim: N
                _mve_set_dim_length(1, 4);
            }

            while (n + 4 <= N) {

                // Loading bias - Dim1.length = 4 - Dim0.length = 128, Stride: 0 (dim0) and 1 (dim1)
                __mdvdw acc_v = _mve_set1_dw(0);
                _mve_set_only_element(1, 0);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 1);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 2);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 3);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_all_elements(1);

                bias_addr += 4;

                input_addr = in;
                int32_t *weight_addr_tmp = weight_addr;
                weight_addr += 4 * K;

                for (int k = 0; k < K; k++) {

                    // Loading input - Dim1.length = 4 - Dim0.length = 128, Stride: 1 (dim0) and 0 (dim1)
                    // Loading weight - Dim1.length = 4 - Dim0.length = 128, Stride: 0 (dim0) and 3 (K) (dim1)
                    __mdvdw input_v = _mve_set1_dw(0);
                    __mdvdw weight_v = _mve_set1_dw(0);
                    _mve_set_only_element(1, 0);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 1);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 2);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 3);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_all_elements(1);

                    input_addr += M;
                    weight_addr_tmp += 1;

                    __mdvdw mult_v = _mve_mul_dw(input_v, weight_v);

                    acc_v = _mve_add_dw(acc_v, mult_v);
                }

                // Caculating Min and Max

                // R4 = R2 min R1
                acc_v = _mve_min_dw(acc_v, max_v);
                acc_v = _mve_max_dw(acc_v, min_v);

                // Storing the results, Stride: 1 (dim0) and 3 (M) (dim1)
                _mve_set_only_element(1, 0);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 1);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 2);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 3);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_all_elements(1);

                output_addr += 4 * M;

                mve_flusher();
                n += 4;
            }

            if (n + 2 <= N) {
                // Second Dim: N
                _mve_set_dim_length(1, 2);
            }

            while (n + 2 <= N) {

                // Loading bias - Dim1.length = 2 - Dim0.length = 128, Stride: 0 (dim0) and 1 (dim1)
                __mdvdw acc_v = _mve_set1_dw(0);
                _mve_set_only_element(1, 0);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 1);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_all_elements(1);

                bias_addr += 2;

                input_addr = in;
                int32_t *weight_addr_tmp = weight_addr;
                weight_addr += 2 * K;

                for (int k = 0; k < K; k++) {

                    // Loading input - Dim1.length = 2 - Dim0.length = 128, Stride: 1 (dim0) and 0 (dim1)
                    // Loading weight - Dim1.length = 2 - Dim0.length = 128, Stride: 0 (dim0) and 3 (K) (dim1)
                    __mdvdw input_v = _mve_set1_dw(0);
                    __mdvdw weight_v = _mve_set1_dw(0);
                    _mve_set_only_element(1, 0);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 1);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_all_elements(1);

                    input_addr += M;
                    weight_addr_tmp += 1;

                    __mdvdw mult_v = _mve_mul_dw(input_v, weight_v);

                    acc_v = _mve_add_dw(acc_v, mult_v);
                }

                // Caculating Min and Max

                // R4 = R2 min R1
                acc_v = _mve_min_dw(acc_v, max_v);
                acc_v = _mve_max_dw(acc_v, min_v);

                // Storing the results, Stride: 1 (dim0) and 3 (M) (dim1)
                _mve_set_only_element(1, 0);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 1);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_all_elements(1);

                output_addr += 2 * M;

                mve_flusher();
                n += 2;
            }

            if (n + 1 <= N) {
                // Second Dim: N
                _mve_set_dim_length(1, 1);
            }

            while (n + 1 <= N) {

                // Loading bias - Dim1.length = 1 - Dim0.length = 128, Stride: 0 (dim0) and 1 (dim1)
                __mdvdw acc_v = _mve_set1_dw(0);
                _mve_set_only_element(1, 0);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_all_elements(1);

                bias_addr += 1;

                input_addr = in;
                int32_t *weight_addr_tmp = weight_addr;
                weight_addr += 1 * K;

                for (int k = 0; k < K; k++) {

                    // Loading input - Dim1.length = 1 - Dim0.length = 128, Stride: 1 (dim0) and 0 (dim1)
                    // Loading weight - Dim1.length = 1 - Dim0.length = 128, Stride: 0 (dim0) and 3 (K) (dim1)
                    __mdvdw input_v = _mve_set1_dw(0);
                    __mdvdw weight_v = _mve_set1_dw(0);
                    _mve_set_only_element(1, 0);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_all_elements(1);

                    input_addr += M;
                    weight_addr_tmp += 1;

                    __mdvdw mult_v = _mve_mul_dw(input_v, weight_v);

                    acc_v = _mve_add_dw(acc_v, mult_v);
                }

                // Caculating Min and Max

                // R4 = R2 min R1
                acc_v = _mve_min_dw(acc_v, max_v);
                acc_v = _mve_max_dw(acc_v, min_v);

                // Storing the results, Stride: 1 (dim0) and 3 (M) (dim1)
                _mve_set_only_element(1, 0);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_all_elements(1);

                output_addr += 1 * M;

                mve_flusher();
                n += 1;
            }

            in += 128;
            out += 128;
            m += 128;
        }
        if (m + 64 <= M) {
            // First Dim: M
            _mve_set_dim_length(0, 64);
        }
        while (m + 64 <= M) {

            bias_addr = bias;
            weight_addr = weights;
            output_addr = out;

            int n = 0;

            if (n + 32 <= N) {
                // Second Dim: N
                _mve_set_dim_length(1, 32);
            }

            while (n + 32 <= N) {

                // Loading bias - Dim1.length = 32 - Dim0.length = 64, Stride: 0 (dim0) and 1 (dim1)
                __mdvdw acc_v = _mve_set1_dw(0);
                _mve_set_only_element(1, 0);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 1);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 2);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 3);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 4);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 5);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 6);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 7);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 8);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 9);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 10);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 11);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 12);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 13);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 14);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 15);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 16);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 17);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 18);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 19);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 20);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 21);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 22);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 23);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 24);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 25);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 26);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 27);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 28);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 29);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 30);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 31);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_all_elements(1);

                bias_addr += 32;

                input_addr = in;
                int32_t *weight_addr_tmp = weight_addr;
                weight_addr += 32 * K;

                for (int k = 0; k < K; k++) {

                    // Loading input - Dim1.length = 32 - Dim0.length = 64, Stride: 1 (dim0) and 0 (dim1)
                    // Loading weight - Dim1.length = 32 - Dim0.length = 64, Stride: 0 (dim0) and 3 (K) (dim1)
                    __mdvdw input_v = _mve_set1_dw(0);
                    __mdvdw weight_v = _mve_set1_dw(0);
                    _mve_set_only_element(1, 0);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 1);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 2);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 3);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 4);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 5);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 6);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 7);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 8);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 9);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 10);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 11);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 12);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 13);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 14);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 15);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 16);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 17);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 18);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 19);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 20);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 21);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 22);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 23);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 24);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 25);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 26);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 27);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 28);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 29);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 30);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 31);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_all_elements(1);

                    input_addr += M;
                    weight_addr_tmp += 1;

                    __mdvdw mult_v = _mve_mul_dw(input_v, weight_v);

                    acc_v = _mve_add_dw(acc_v, mult_v);
                }

                // Caculating Min and Max

                // R4 = R2 min R1
                acc_v = _mve_min_dw(acc_v, max_v);
                acc_v = _mve_max_dw(acc_v, min_v);

                // Storing the results, Stride: 1 (dim0) and 3 (M) (dim1)
                _mve_set_only_element(1, 0);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 1);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 2);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 3);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 4);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 5);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 6);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 7);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 8);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 9);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 10);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 11);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 12);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 13);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 14);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 15);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 16);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 17);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 18);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 19);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 20);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 21);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 22);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 23);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 24);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 25);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 26);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 27);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 28);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 29);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 30);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 31);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_all_elements(1);

                output_addr += 32 * M;

                mve_flusher();
                n += 32;
            }

            if (n + 16 <= N) {
                // Second Dim: N
                _mve_set_dim_length(1, 16);
            }

            while (n + 16 <= N) {

                // Loading bias - Dim1.length = 16 - Dim0.length = 64, Stride: 0 (dim0) and 1 (dim1)
                __mdvdw acc_v = _mve_set1_dw(0);
                _mve_set_only_element(1, 0);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 1);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 2);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 3);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 4);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 5);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 6);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 7);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 8);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 9);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 10);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 11);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 12);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 13);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 14);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 15);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_all_elements(1);

                bias_addr += 16;

                input_addr = in;
                int32_t *weight_addr_tmp = weight_addr;
                weight_addr += 16 * K;

                for (int k = 0; k < K; k++) {

                    // Loading input - Dim1.length = 16 - Dim0.length = 64, Stride: 1 (dim0) and 0 (dim1)
                    // Loading weight - Dim1.length = 16 - Dim0.length = 64, Stride: 0 (dim0) and 3 (K) (dim1)
                    __mdvdw input_v = _mve_set1_dw(0);
                    __mdvdw weight_v = _mve_set1_dw(0);
                    _mve_set_only_element(1, 0);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 1);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 2);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 3);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 4);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 5);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 6);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 7);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 8);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 9);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 10);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 11);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 12);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 13);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 14);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 15);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_all_elements(1);

                    input_addr += M;
                    weight_addr_tmp += 1;

                    __mdvdw mult_v = _mve_mul_dw(input_v, weight_v);

                    acc_v = _mve_add_dw(acc_v, mult_v);
                }

                // Caculating Min and Max

                // R4 = R2 min R1
                acc_v = _mve_min_dw(acc_v, max_v);
                acc_v = _mve_max_dw(acc_v, min_v);

                // Storing the results, Stride: 1 (dim0) and 3 (M) (dim1)
                _mve_set_only_element(1, 0);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 1);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 2);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 3);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 4);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 5);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 6);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 7);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 8);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 9);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 10);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 11);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 12);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 13);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 14);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 15);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_all_elements(1);

                output_addr += 16 * M;

                mve_flusher();
                n += 16;
            }

            if (n + 8 <= N) {
                // Second Dim: N
                _mve_set_dim_length(1, 8);
            }

            while (n + 8 <= N) {

                // Loading bias - Dim1.length = 8 - Dim0.length = 64, Stride: 0 (dim0) and 1 (dim1)
                __mdvdw acc_v = _mve_set1_dw(0);
                _mve_set_only_element(1, 0);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 1);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 2);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 3);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 4);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 5);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 6);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 7);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_all_elements(1);

                bias_addr += 8;

                input_addr = in;
                int32_t *weight_addr_tmp = weight_addr;
                weight_addr += 8 * K;

                for (int k = 0; k < K; k++) {

                    // Loading input - Dim1.length = 8 - Dim0.length = 64, Stride: 1 (dim0) and 0 (dim1)
                    // Loading weight - Dim1.length = 8 - Dim0.length = 64, Stride: 0 (dim0) and 3 (K) (dim1)
                    __mdvdw input_v = _mve_set1_dw(0);
                    __mdvdw weight_v = _mve_set1_dw(0);
                    _mve_set_only_element(1, 0);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 1);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 2);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 3);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 4);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 5);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 6);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 7);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_all_elements(1);

                    input_addr += M;
                    weight_addr_tmp += 1;

                    __mdvdw mult_v = _mve_mul_dw(input_v, weight_v);

                    acc_v = _mve_add_dw(acc_v, mult_v);
                }

                // Caculating Min and Max

                // R4 = R2 min R1
                acc_v = _mve_min_dw(acc_v, max_v);
                acc_v = _mve_max_dw(acc_v, min_v);

                // Storing the results, Stride: 1 (dim0) and 3 (M) (dim1)
                _mve_set_only_element(1, 0);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 1);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 2);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 3);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 4);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 5);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 6);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 7);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_all_elements(1);

                output_addr += 8 * M;

                mve_flusher();
                n += 8;
            }

            if (n + 4 <= N) {
                // Second Dim: N
                _mve_set_dim_length(1, 4);
            }

            while (n + 4 <= N) {

                // Loading bias - Dim1.length = 4 - Dim0.length = 64, Stride: 0 (dim0) and 1 (dim1)
                __mdvdw acc_v = _mve_set1_dw(0);
                _mve_set_only_element(1, 0);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 1);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 2);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 3);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_all_elements(1);

                bias_addr += 4;

                input_addr = in;
                int32_t *weight_addr_tmp = weight_addr;
                weight_addr += 4 * K;

                for (int k = 0; k < K; k++) {

                    // Loading input - Dim1.length = 4 - Dim0.length = 64, Stride: 1 (dim0) and 0 (dim1)
                    // Loading weight - Dim1.length = 4 - Dim0.length = 64, Stride: 0 (dim0) and 3 (K) (dim1)
                    __mdvdw input_v = _mve_set1_dw(0);
                    __mdvdw weight_v = _mve_set1_dw(0);
                    _mve_set_only_element(1, 0);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 1);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 2);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 3);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_all_elements(1);

                    input_addr += M;
                    weight_addr_tmp += 1;

                    __mdvdw mult_v = _mve_mul_dw(input_v, weight_v);

                    acc_v = _mve_add_dw(acc_v, mult_v);
                }

                // Caculating Min and Max

                // R4 = R2 min R1
                acc_v = _mve_min_dw(acc_v, max_v);
                acc_v = _mve_max_dw(acc_v, min_v);

                // Storing the results, Stride: 1 (dim0) and 3 (M) (dim1)
                _mve_set_only_element(1, 0);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 1);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 2);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 3);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_all_elements(1);

                output_addr += 4 * M;

                mve_flusher();
                n += 4;
            }

            if (n + 2 <= N) {
                // Second Dim: N
                _mve_set_dim_length(1, 2);
            }

            while (n + 2 <= N) {

                // Loading bias - Dim1.length = 2 - Dim0.length = 64, Stride: 0 (dim0) and 1 (dim1)
                __mdvdw acc_v = _mve_set1_dw(0);
                _mve_set_only_element(1, 0);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 1);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_all_elements(1);

                bias_addr += 2;

                input_addr = in;
                int32_t *weight_addr_tmp = weight_addr;
                weight_addr += 2 * K;

                for (int k = 0; k < K; k++) {

                    // Loading input - Dim1.length = 2 - Dim0.length = 64, Stride: 1 (dim0) and 0 (dim1)
                    // Loading weight - Dim1.length = 2 - Dim0.length = 64, Stride: 0 (dim0) and 3 (K) (dim1)
                    __mdvdw input_v = _mve_set1_dw(0);
                    __mdvdw weight_v = _mve_set1_dw(0);
                    _mve_set_only_element(1, 0);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 1);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_all_elements(1);

                    input_addr += M;
                    weight_addr_tmp += 1;

                    __mdvdw mult_v = _mve_mul_dw(input_v, weight_v);

                    acc_v = _mve_add_dw(acc_v, mult_v);
                }

                // Caculating Min and Max

                // R4 = R2 min R1
                acc_v = _mve_min_dw(acc_v, max_v);
                acc_v = _mve_max_dw(acc_v, min_v);

                // Storing the results, Stride: 1 (dim0) and 3 (M) (dim1)
                _mve_set_only_element(1, 0);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 1);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_all_elements(1);

                output_addr += 2 * M;

                mve_flusher();
                n += 2;
            }

            if (n + 1 <= N) {
                // Second Dim: N
                _mve_set_dim_length(1, 1);
            }

            while (n + 1 <= N) {

                // Loading bias - Dim1.length = 1 - Dim0.length = 64, Stride: 0 (dim0) and 1 (dim1)
                __mdvdw acc_v = _mve_set1_dw(0);
                _mve_set_only_element(1, 0);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_all_elements(1);

                bias_addr += 1;

                input_addr = in;
                int32_t *weight_addr_tmp = weight_addr;
                weight_addr += 1 * K;

                for (int k = 0; k < K; k++) {

                    // Loading input - Dim1.length = 1 - Dim0.length = 64, Stride: 1 (dim0) and 0 (dim1)
                    // Loading weight - Dim1.length = 1 - Dim0.length = 64, Stride: 0 (dim0) and 3 (K) (dim1)
                    __mdvdw input_v = _mve_set1_dw(0);
                    __mdvdw weight_v = _mve_set1_dw(0);
                    _mve_set_only_element(1, 0);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_all_elements(1);

                    input_addr += M;
                    weight_addr_tmp += 1;

                    __mdvdw mult_v = _mve_mul_dw(input_v, weight_v);

                    acc_v = _mve_add_dw(acc_v, mult_v);
                }

                // Caculating Min and Max

                // R4 = R2 min R1
                acc_v = _mve_min_dw(acc_v, max_v);
                acc_v = _mve_max_dw(acc_v, min_v);

                // Storing the results, Stride: 1 (dim0) and 3 (M) (dim1)
                _mve_set_only_element(1, 0);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_all_elements(1);

                output_addr += 1 * M;

                mve_flusher();
                n += 1;
            }

            in += 64;
            out += 64;
            m += 64;
        }
        if (m + 32 <= M) {
            // First Dim: M
            _mve_set_dim_length(0, 32);
        }
        while (m + 32 <= M) {

            bias_addr = bias;
            weight_addr = weights;
            output_addr = out;

            int n = 0;

            if (n + 64 <= N) {
                // Second Dim: N
                _mve_set_dim_length(1, 64);
            }

            while (n + 64 <= N) {

                // Loading bias - Dim1.length = 64 - Dim0.length = 32, Stride: 0 (dim0) and 1 (dim1)
                __mdvdw acc_v = _mve_set1_dw(0);
                _mve_set_only_element(1, 0);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 1);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 2);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 3);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 4);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 5);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 6);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 7);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 8);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 9);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 10);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 11);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 12);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 13);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 14);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 15);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 16);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 17);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 18);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 19);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 20);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 21);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 22);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 23);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 24);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 25);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 26);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 27);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 28);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 29);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 30);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 31);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 32);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 33);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 34);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 35);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 36);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 37);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 38);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 39);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 40);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 41);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 42);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 43);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 44);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 45);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 46);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 47);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 48);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 49);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 50);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 51);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 52);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 53);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 54);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 55);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 56);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 57);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 58);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 59);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 60);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 61);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 62);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 63);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_all_elements(1);

                bias_addr += 64;

                input_addr = in;
                int32_t *weight_addr_tmp = weight_addr;
                weight_addr += 64 * K;

                for (int k = 0; k < K; k++) {

                    // Loading input - Dim1.length = 64 - Dim0.length = 32, Stride: 1 (dim0) and 0 (dim1)
                    // Loading weight - Dim1.length = 64 - Dim0.length = 32, Stride: 0 (dim0) and 3 (K) (dim1)
                    __mdvdw input_v = _mve_set1_dw(0);
                    __mdvdw weight_v = _mve_set1_dw(0);
                    _mve_set_only_element(1, 0);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 1);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 2);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 3);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 4);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 5);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 6);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 7);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 8);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 9);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 10);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 11);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 12);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 13);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 14);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 15);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 16);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 17);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 18);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 19);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 20);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 21);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 22);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 23);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 24);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 25);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 26);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 27);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 28);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 29);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 30);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 31);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 32);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 33);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 34);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 35);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 36);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 37);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 38);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 39);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 40);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 41);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 42);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 43);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 44);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 45);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 46);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 47);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 48);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 49);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 50);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 51);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 52);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 53);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 54);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 55);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 56);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 57);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 58);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 59);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 60);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 61);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 62);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 63);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_all_elements(1);

                    input_addr += M;
                    weight_addr_tmp += 1;

                    __mdvdw mult_v = _mve_mul_dw(input_v, weight_v);

                    acc_v = _mve_add_dw(acc_v, mult_v);
                }

                // Caculating Min and Max

                // R4 = R2 min R1
                acc_v = _mve_min_dw(acc_v, max_v);
                acc_v = _mve_max_dw(acc_v, min_v);

                // Storing the results, Stride: 1 (dim0) and 3 (M) (dim1)
                _mve_set_only_element(1, 0);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 1);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 2);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 3);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 4);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 5);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 6);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 7);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 8);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 9);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 10);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 11);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 12);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 13);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 14);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 15);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 16);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 17);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 18);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 19);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 20);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 21);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 22);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 23);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 24);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 25);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 26);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 27);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 28);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 29);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 30);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 31);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 32);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 33);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 34);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 35);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 36);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 37);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 38);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 39);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 40);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 41);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 42);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 43);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 44);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 45);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 46);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 47);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 48);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 49);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 50);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 51);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 52);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 53);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 54);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 55);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 56);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 57);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 58);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 59);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 60);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 61);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 62);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 63);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_all_elements(1);

                output_addr += 64 * M;

                mve_flusher();
                n += 64;
            }

            if (n + 32 <= N) {
                // Second Dim: N
                _mve_set_dim_length(1, 32);
            }

            while (n + 32 <= N) {

                // Loading bias - Dim1.length = 32 - Dim0.length = 32, Stride: 0 (dim0) and 1 (dim1)
                __mdvdw acc_v = _mve_set1_dw(0);
                _mve_set_only_element(1, 0);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 1);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 2);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 3);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 4);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 5);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 6);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 7);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 8);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 9);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 10);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 11);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 12);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 13);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 14);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 15);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 16);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 17);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 18);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 19);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 20);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 21);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 22);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 23);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 24);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 25);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 26);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 27);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 28);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 29);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 30);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 31);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_all_elements(1);

                bias_addr += 32;

                input_addr = in;
                int32_t *weight_addr_tmp = weight_addr;
                weight_addr += 32 * K;

                for (int k = 0; k < K; k++) {

                    // Loading input - Dim1.length = 32 - Dim0.length = 32, Stride: 1 (dim0) and 0 (dim1)
                    // Loading weight - Dim1.length = 32 - Dim0.length = 32, Stride: 0 (dim0) and 3 (K) (dim1)
                    __mdvdw input_v = _mve_set1_dw(0);
                    __mdvdw weight_v = _mve_set1_dw(0);
                    _mve_set_only_element(1, 0);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 1);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 2);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 3);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 4);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 5);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 6);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 7);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 8);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 9);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 10);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 11);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 12);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 13);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 14);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 15);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 16);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 17);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 18);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 19);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 20);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 21);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 22);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 23);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 24);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 25);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 26);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 27);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 28);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 29);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 30);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 31);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_all_elements(1);

                    input_addr += M;
                    weight_addr_tmp += 1;

                    __mdvdw mult_v = _mve_mul_dw(input_v, weight_v);

                    acc_v = _mve_add_dw(acc_v, mult_v);
                }

                // Caculating Min and Max

                // R4 = R2 min R1
                acc_v = _mve_min_dw(acc_v, max_v);
                acc_v = _mve_max_dw(acc_v, min_v);

                // Storing the results, Stride: 1 (dim0) and 3 (M) (dim1)
                _mve_set_only_element(1, 0);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 1);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 2);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 3);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 4);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 5);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 6);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 7);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 8);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 9);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 10);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 11);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 12);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 13);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 14);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 15);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 16);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 17);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 18);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 19);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 20);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 21);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 22);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 23);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 24);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 25);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 26);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 27);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 28);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 29);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 30);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 31);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_all_elements(1);

                output_addr += 32 * M;

                mve_flusher();
                n += 32;
            }

            if (n + 16 <= N) {
                // Second Dim: N
                _mve_set_dim_length(1, 16);
            }

            while (n + 16 <= N) {

                // Loading bias - Dim1.length = 16 - Dim0.length = 32, Stride: 0 (dim0) and 1 (dim1)
                __mdvdw acc_v = _mve_set1_dw(0);
                _mve_set_only_element(1, 0);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 1);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 2);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 3);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 4);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 5);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 6);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 7);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 8);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 9);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 10);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 11);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 12);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 13);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 14);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 15);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_all_elements(1);

                bias_addr += 16;

                input_addr = in;
                int32_t *weight_addr_tmp = weight_addr;
                weight_addr += 16 * K;

                for (int k = 0; k < K; k++) {

                    // Loading input - Dim1.length = 16 - Dim0.length = 32, Stride: 1 (dim0) and 0 (dim1)
                    // Loading weight - Dim1.length = 16 - Dim0.length = 32, Stride: 0 (dim0) and 3 (K) (dim1)
                    __mdvdw input_v = _mve_set1_dw(0);
                    __mdvdw weight_v = _mve_set1_dw(0);
                    _mve_set_only_element(1, 0);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 1);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 2);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 3);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 4);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 5);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 6);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 7);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 8);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 9);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 10);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 11);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 12);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 13);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 14);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 15);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_all_elements(1);

                    input_addr += M;
                    weight_addr_tmp += 1;

                    __mdvdw mult_v = _mve_mul_dw(input_v, weight_v);

                    acc_v = _mve_add_dw(acc_v, mult_v);
                }

                // Caculating Min and Max

                // R4 = R2 min R1
                acc_v = _mve_min_dw(acc_v, max_v);
                acc_v = _mve_max_dw(acc_v, min_v);

                // Storing the results, Stride: 1 (dim0) and 3 (M) (dim1)
                _mve_set_only_element(1, 0);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 1);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 2);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 3);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 4);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 5);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 6);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 7);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 8);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 9);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 10);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 11);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 12);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 13);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 14);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 15);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_all_elements(1);

                output_addr += 16 * M;

                mve_flusher();
                n += 16;
            }

            if (n + 8 <= N) {
                // Second Dim: N
                _mve_set_dim_length(1, 8);
            }

            while (n + 8 <= N) {

                // Loading bias - Dim1.length = 8 - Dim0.length = 32, Stride: 0 (dim0) and 1 (dim1)
                __mdvdw acc_v = _mve_set1_dw(0);
                _mve_set_only_element(1, 0);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 1);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 2);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 3);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 4);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 5);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 6);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 7);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_all_elements(1);

                bias_addr += 8;

                input_addr = in;
                int32_t *weight_addr_tmp = weight_addr;
                weight_addr += 8 * K;

                for (int k = 0; k < K; k++) {

                    // Loading input - Dim1.length = 8 - Dim0.length = 32, Stride: 1 (dim0) and 0 (dim1)
                    // Loading weight - Dim1.length = 8 - Dim0.length = 32, Stride: 0 (dim0) and 3 (K) (dim1)
                    __mdvdw input_v = _mve_set1_dw(0);
                    __mdvdw weight_v = _mve_set1_dw(0);
                    _mve_set_only_element(1, 0);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 1);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 2);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 3);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 4);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 5);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 6);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 7);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_all_elements(1);

                    input_addr += M;
                    weight_addr_tmp += 1;

                    __mdvdw mult_v = _mve_mul_dw(input_v, weight_v);

                    acc_v = _mve_add_dw(acc_v, mult_v);
                }

                // Caculating Min and Max

                // R4 = R2 min R1
                acc_v = _mve_min_dw(acc_v, max_v);
                acc_v = _mve_max_dw(acc_v, min_v);

                // Storing the results, Stride: 1 (dim0) and 3 (M) (dim1)
                _mve_set_only_element(1, 0);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 1);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 2);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 3);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 4);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 5);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 6);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 7);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_all_elements(1);

                output_addr += 8 * M;

                mve_flusher();
                n += 8;
            }

            if (n + 4 <= N) {
                // Second Dim: N
                _mve_set_dim_length(1, 4);
            }

            while (n + 4 <= N) {

                // Loading bias - Dim1.length = 4 - Dim0.length = 32, Stride: 0 (dim0) and 1 (dim1)
                __mdvdw acc_v = _mve_set1_dw(0);
                _mve_set_only_element(1, 0);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 1);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 2);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 3);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_all_elements(1);

                bias_addr += 4;

                input_addr = in;
                int32_t *weight_addr_tmp = weight_addr;
                weight_addr += 4 * K;

                for (int k = 0; k < K; k++) {

                    // Loading input - Dim1.length = 4 - Dim0.length = 32, Stride: 1 (dim0) and 0 (dim1)
                    // Loading weight - Dim1.length = 4 - Dim0.length = 32, Stride: 0 (dim0) and 3 (K) (dim1)
                    __mdvdw input_v = _mve_set1_dw(0);
                    __mdvdw weight_v = _mve_set1_dw(0);
                    _mve_set_only_element(1, 0);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 1);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 2);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 3);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_all_elements(1);

                    input_addr += M;
                    weight_addr_tmp += 1;

                    __mdvdw mult_v = _mve_mul_dw(input_v, weight_v);

                    acc_v = _mve_add_dw(acc_v, mult_v);
                }

                // Caculating Min and Max

                // R4 = R2 min R1
                acc_v = _mve_min_dw(acc_v, max_v);
                acc_v = _mve_max_dw(acc_v, min_v);

                // Storing the results, Stride: 1 (dim0) and 3 (M) (dim1)
                _mve_set_only_element(1, 0);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 1);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 2);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 3);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_all_elements(1);

                output_addr += 4 * M;

                mve_flusher();
                n += 4;
            }

            if (n + 2 <= N) {
                // Second Dim: N
                _mve_set_dim_length(1, 2);
            }

            while (n + 2 <= N) {

                // Loading bias - Dim1.length = 2 - Dim0.length = 32, Stride: 0 (dim0) and 1 (dim1)
                __mdvdw acc_v = _mve_set1_dw(0);
                _mve_set_only_element(1, 0);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 1);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_all_elements(1);

                bias_addr += 2;

                input_addr = in;
                int32_t *weight_addr_tmp = weight_addr;
                weight_addr += 2 * K;

                for (int k = 0; k < K; k++) {

                    // Loading input - Dim1.length = 2 - Dim0.length = 32, Stride: 1 (dim0) and 0 (dim1)
                    // Loading weight - Dim1.length = 2 - Dim0.length = 32, Stride: 0 (dim0) and 3 (K) (dim1)
                    __mdvdw input_v = _mve_set1_dw(0);
                    __mdvdw weight_v = _mve_set1_dw(0);
                    _mve_set_only_element(1, 0);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 1);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_all_elements(1);

                    input_addr += M;
                    weight_addr_tmp += 1;

                    __mdvdw mult_v = _mve_mul_dw(input_v, weight_v);

                    acc_v = _mve_add_dw(acc_v, mult_v);
                }

                // Caculating Min and Max

                // R4 = R2 min R1
                acc_v = _mve_min_dw(acc_v, max_v);
                acc_v = _mve_max_dw(acc_v, min_v);

                // Storing the results, Stride: 1 (dim0) and 3 (M) (dim1)
                _mve_set_only_element(1, 0);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 1);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_all_elements(1);

                output_addr += 2 * M;

                mve_flusher();
                n += 2;
            }

            if (n + 1 <= N) {
                // Second Dim: N
                _mve_set_dim_length(1, 1);
            }

            while (n + 1 <= N) {

                // Loading bias - Dim1.length = 1 - Dim0.length = 32, Stride: 0 (dim0) and 1 (dim1)
                __mdvdw acc_v = _mve_set1_dw(0);
                _mve_set_only_element(1, 0);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_all_elements(1);

                bias_addr += 1;

                input_addr = in;
                int32_t *weight_addr_tmp = weight_addr;
                weight_addr += 1 * K;

                for (int k = 0; k < K; k++) {

                    // Loading input - Dim1.length = 1 - Dim0.length = 32, Stride: 1 (dim0) and 0 (dim1)
                    // Loading weight - Dim1.length = 1 - Dim0.length = 32, Stride: 0 (dim0) and 3 (K) (dim1)
                    __mdvdw input_v = _mve_set1_dw(0);
                    __mdvdw weight_v = _mve_set1_dw(0);
                    _mve_set_only_element(1, 0);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_all_elements(1);

                    input_addr += M;
                    weight_addr_tmp += 1;

                    __mdvdw mult_v = _mve_mul_dw(input_v, weight_v);

                    acc_v = _mve_add_dw(acc_v, mult_v);
                }

                // Caculating Min and Max

                // R4 = R2 min R1
                acc_v = _mve_min_dw(acc_v, max_v);
                acc_v = _mve_max_dw(acc_v, min_v);

                // Storing the results, Stride: 1 (dim0) and 3 (M) (dim1)
                _mve_set_only_element(1, 0);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_all_elements(1);

                output_addr += 1 * M;

                mve_flusher();
                n += 1;
            }

            in += 32;
            out += 32;
            m += 32;
        }
        if (M > m) {
            _mve_set_dim_length(0, M - m);

            int n_per_iter = 32 * (int)(64 / (M - m));

            bias_addr = bias;
            weight_addr = weights;
            output_addr = out;

            int n = 0;

            while (n < N) {

                int curr_n_per_iter = (N - n) < n_per_iter ? (N - n) : n_per_iter;

                _mve_set_dim_length(1, curr_n_per_iter);

                // Loading bias - Dim1.length = curr_n_per_iter - Dim0.length = (M - m), Stride: 0 (dim0) and 1 (dim1)
                __mdvdw acc_v = _mve_set1_dw(0);
                for (int n_idx = 0; n_idx < curr_n_per_iter; n_idx++) {
                    _mve_set_only_element(1, n_idx);
                    acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                }
                _mve_set_all_elements(1);

                bias_addr += curr_n_per_iter;

                input_addr = in;
                int32_t *weight_addr_tmp = weight_addr;
                weight_addr += curr_n_per_iter * K;

                for (int k = 0; k < K; k++) {

                    // Loading input - Dim1.length = curr_n_per_iter - Dim0.length = (M - m), Stride: 1 (dim0) and 0 (dim1)
                    // Loading weight - Dim1.length = curr_n_per_iter - Dim0.length = (M - m), Stride: 0 (dim0) and 3 (K) (dim1)
                    __mdvdw input_v = _mve_set1_dw(0);
                    __mdvdw weight_v = _mve_set1_dw(0);
                    for (int n_idx = 0; n_idx < curr_n_per_iter; n_idx++) {
                        _mve_set_only_element(1, n_idx);
                        input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                        weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    }
                    _mve_set_all_elements(1);

                    input_addr += M;
                    weight_addr_tmp += 1;

                    __mdvdw mult_v = _mve_mul_dw(input_v, weight_v);

                    acc_v = _mve_add_dw(acc_v, mult_v);

                    // replace R3 and R2 for acc_v
                }

                // Caculating Min and Max

                // R4 = R2 min R1
                acc_v = _mve_min_dw(acc_v, max_v);
                acc_v = _mve_max_dw(acc_v, min_v);

                // Storing the results, Stride: 1 (dim0), 3 or M (dim1)
                for (int n_idx = 0; n_idx < curr_n_per_iter; n_idx++) {
                    _mve_set_only_element(1, n_idx);
                    _mve_store_dw(output_addr, acc_v, output_stride);
                }
                _mve_set_all_elements(1);

                output_addr += curr_n_per_iter * M;

                mve_flusher();
                n += curr_n_per_iter;
            }
        }
    } else if (LANE_NUM == 1024) {
        if (m + 1024 <= M) {
            // First Dim: M
            _mve_set_dim_length(0, 1024);
        }
        while (m + 1024 <= M) {

            bias_addr = bias;
            weight_addr = weights;
            output_addr = out;

            int n = 0;

            if (n + 1 <= N) {
                // Second Dim: N
                _mve_set_dim_length(1, 1);
            }

            while (n + 1 <= N) {

                // Loading bias - Dim1.length = 1 - Dim0.length = 1024, Stride: 0 (dim0) and 1 (dim1)
                __mdvdw acc_v = _mve_set1_dw(0);
                _mve_set_only_element(1, 0);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_all_elements(1);

                bias_addr += 1;

                input_addr = in;
                int32_t *weight_addr_tmp = weight_addr;
                weight_addr += 1 * K;

                for (int k = 0; k < K; k++) {

                    // Loading input - Dim1.length = 1 - Dim0.length = 1024, Stride: 1 (dim0) and 0 (dim1)
                    // Loading weight - Dim1.length = 1 - Dim0.length = 1024, Stride: 0 (dim0) and 3 (K) (dim1)
                    __mdvdw input_v = _mve_set1_dw(0);
                    __mdvdw weight_v = _mve_set1_dw(0);
                    _mve_set_only_element(1, 0);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_all_elements(1);

                    input_addr += M;
                    weight_addr_tmp += 1;

                    __mdvdw mult_v = _mve_mul_dw(input_v, weight_v);

                    acc_v = _mve_add_dw(acc_v, mult_v);
                }

                // Caculating Min and Max

                // R4 = R2 min R1
                acc_v = _mve_min_dw(acc_v, max_v);
                acc_v = _mve_max_dw(acc_v, min_v);

                // Storing the results, Stride: 1 (dim0) and 3 (M) (dim1)
                _mve_set_only_element(1, 0);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_all_elements(1);

                output_addr += 1 * M;

                mve_flusher();
                n += 1;
            }

            in += 1024;
            out += 1024;
            m += 1024;
        }
        if (m + 512 <= M) {
            // First Dim: M
            _mve_set_dim_length(0, 512);
        }
        while (m + 512 <= M) {

            bias_addr = bias;
            weight_addr = weights;
            output_addr = out;

            int n = 0;

            if (n + 2 <= N) {
                // Second Dim: N
                _mve_set_dim_length(1, 2);
            }

            while (n + 2 <= N) {

                // Loading bias - Dim1.length = 2 - Dim0.length = 512, Stride: 0 (dim0) and 1 (dim1)
                __mdvdw acc_v = _mve_set1_dw(0);
                _mve_set_only_element(1, 0);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 1);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_all_elements(1);

                bias_addr += 2;

                input_addr = in;
                int32_t *weight_addr_tmp = weight_addr;
                weight_addr += 2 * K;

                for (int k = 0; k < K; k++) {

                    // Loading input - Dim1.length = 2 - Dim0.length = 512, Stride: 1 (dim0) and 0 (dim1)
                    // Loading weight - Dim1.length = 2 - Dim0.length = 512, Stride: 0 (dim0) and 3 (K) (dim1)
                    __mdvdw input_v = _mve_set1_dw(0);
                    __mdvdw weight_v = _mve_set1_dw(0);
                    _mve_set_only_element(1, 0);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 1);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_all_elements(1);

                    input_addr += M;
                    weight_addr_tmp += 1;

                    __mdvdw mult_v = _mve_mul_dw(input_v, weight_v);

                    acc_v = _mve_add_dw(acc_v, mult_v);
                }

                // Caculating Min and Max

                // R4 = R2 min R1
                acc_v = _mve_min_dw(acc_v, max_v);
                acc_v = _mve_max_dw(acc_v, min_v);

                // Storing the results, Stride: 1 (dim0) and 3 (M) (dim1)
                _mve_set_only_element(1, 0);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 1);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_all_elements(1);

                output_addr += 2 * M;

                mve_flusher();
                n += 2;
            }

            if (n + 1 <= N) {
                // Second Dim: N
                _mve_set_dim_length(1, 1);
            }

            while (n + 1 <= N) {

                // Loading bias - Dim1.length = 1 - Dim0.length = 512, Stride: 0 (dim0) and 1 (dim1)
                __mdvdw acc_v = _mve_set1_dw(0);
                _mve_set_only_element(1, 0);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_all_elements(1);

                bias_addr += 1;

                input_addr = in;
                int32_t *weight_addr_tmp = weight_addr;
                weight_addr += 1 * K;

                for (int k = 0; k < K; k++) {

                    // Loading input - Dim1.length = 1 - Dim0.length = 512, Stride: 1 (dim0) and 0 (dim1)
                    // Loading weight - Dim1.length = 1 - Dim0.length = 512, Stride: 0 (dim0) and 3 (K) (dim1)
                    __mdvdw input_v = _mve_set1_dw(0);
                    __mdvdw weight_v = _mve_set1_dw(0);
                    _mve_set_only_element(1, 0);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_all_elements(1);

                    input_addr += M;
                    weight_addr_tmp += 1;

                    __mdvdw mult_v = _mve_mul_dw(input_v, weight_v);

                    acc_v = _mve_add_dw(acc_v, mult_v);
                }

                // Caculating Min and Max

                // R4 = R2 min R1
                acc_v = _mve_min_dw(acc_v, max_v);
                acc_v = _mve_max_dw(acc_v, min_v);

                // Storing the results, Stride: 1 (dim0) and 3 (M) (dim1)
                _mve_set_only_element(1, 0);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_all_elements(1);

                output_addr += 1 * M;

                mve_flusher();
                n += 1;
            }

            in += 512;
            out += 512;
            m += 512;
        }
        if (m + 256 <= M) {
            // First Dim: M
            _mve_set_dim_length(0, 256);
        }
        while (m + 256 <= M) {

            bias_addr = bias;
            weight_addr = weights;
            output_addr = out;

            int n = 0;

            if (n + 4 <= N) {
                // Second Dim: N
                _mve_set_dim_length(1, 4);
            }

            while (n + 4 <= N) {

                // Loading bias - Dim1.length = 4 - Dim0.length = 256, Stride: 0 (dim0) and 1 (dim1)
                __mdvdw acc_v = _mve_set1_dw(0);
                _mve_set_only_element(1, 0);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 1);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 2);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 3);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_all_elements(1);

                bias_addr += 4;

                input_addr = in;
                int32_t *weight_addr_tmp = weight_addr;
                weight_addr += 4 * K;

                for (int k = 0; k < K; k++) {

                    // Loading input - Dim1.length = 4 - Dim0.length = 256, Stride: 1 (dim0) and 0 (dim1)
                    // Loading weight - Dim1.length = 4 - Dim0.length = 256, Stride: 0 (dim0) and 3 (K) (dim1)
                    __mdvdw input_v = _mve_set1_dw(0);
                    __mdvdw weight_v = _mve_set1_dw(0);
                    _mve_set_only_element(1, 0);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 1);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 2);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 3);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_all_elements(1);

                    input_addr += M;
                    weight_addr_tmp += 1;

                    __mdvdw mult_v = _mve_mul_dw(input_v, weight_v);

                    acc_v = _mve_add_dw(acc_v, mult_v);
                }

                // Caculating Min and Max

                // R4 = R2 min R1
                acc_v = _mve_min_dw(acc_v, max_v);
                acc_v = _mve_max_dw(acc_v, min_v);

                // Storing the results, Stride: 1 (dim0) and 3 (M) (dim1)
                _mve_set_only_element(1, 0);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 1);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 2);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 3);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_all_elements(1);

                output_addr += 4 * M;

                mve_flusher();
                n += 4;
            }

            if (n + 2 <= N) {
                // Second Dim: N
                _mve_set_dim_length(1, 2);
            }

            while (n + 2 <= N) {

                // Loading bias - Dim1.length = 2 - Dim0.length = 256, Stride: 0 (dim0) and 1 (dim1)
                __mdvdw acc_v = _mve_set1_dw(0);
                _mve_set_only_element(1, 0);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 1);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_all_elements(1);

                bias_addr += 2;

                input_addr = in;
                int32_t *weight_addr_tmp = weight_addr;
                weight_addr += 2 * K;

                for (int k = 0; k < K; k++) {

                    // Loading input - Dim1.length = 2 - Dim0.length = 256, Stride: 1 (dim0) and 0 (dim1)
                    // Loading weight - Dim1.length = 2 - Dim0.length = 256, Stride: 0 (dim0) and 3 (K) (dim1)
                    __mdvdw input_v = _mve_set1_dw(0);
                    __mdvdw weight_v = _mve_set1_dw(0);
                    _mve_set_only_element(1, 0);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 1);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_all_elements(1);

                    input_addr += M;
                    weight_addr_tmp += 1;

                    __mdvdw mult_v = _mve_mul_dw(input_v, weight_v);

                    acc_v = _mve_add_dw(acc_v, mult_v);
                }

                // Caculating Min and Max

                // R4 = R2 min R1
                acc_v = _mve_min_dw(acc_v, max_v);
                acc_v = _mve_max_dw(acc_v, min_v);

                // Storing the results, Stride: 1 (dim0) and 3 (M) (dim1)
                _mve_set_only_element(1, 0);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 1);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_all_elements(1);

                output_addr += 2 * M;

                mve_flusher();
                n += 2;
            }

            if (n + 1 <= N) {
                // Second Dim: N
                _mve_set_dim_length(1, 1);
            }

            while (n + 1 <= N) {

                // Loading bias - Dim1.length = 1 - Dim0.length = 256, Stride: 0 (dim0) and 1 (dim1)
                __mdvdw acc_v = _mve_set1_dw(0);
                _mve_set_only_element(1, 0);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_all_elements(1);

                bias_addr += 1;

                input_addr = in;
                int32_t *weight_addr_tmp = weight_addr;
                weight_addr += 1 * K;

                for (int k = 0; k < K; k++) {

                    // Loading input - Dim1.length = 1 - Dim0.length = 256, Stride: 1 (dim0) and 0 (dim1)
                    // Loading weight - Dim1.length = 1 - Dim0.length = 256, Stride: 0 (dim0) and 3 (K) (dim1)
                    __mdvdw input_v = _mve_set1_dw(0);
                    __mdvdw weight_v = _mve_set1_dw(0);
                    _mve_set_only_element(1, 0);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_all_elements(1);

                    input_addr += M;
                    weight_addr_tmp += 1;

                    __mdvdw mult_v = _mve_mul_dw(input_v, weight_v);

                    acc_v = _mve_add_dw(acc_v, mult_v);
                }

                // Caculating Min and Max

                // R4 = R2 min R1
                acc_v = _mve_min_dw(acc_v, max_v);
                acc_v = _mve_max_dw(acc_v, min_v);

                // Storing the results, Stride: 1 (dim0) and 3 (M) (dim1)
                _mve_set_only_element(1, 0);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_all_elements(1);

                output_addr += 1 * M;

                mve_flusher();
                n += 1;
            }

            in += 256;
            out += 256;
            m += 256;
        }
        if (m + 128 <= M) {
            // First Dim: M
            _mve_set_dim_length(0, 128);
        }
        while (m + 128 <= M) {

            bias_addr = bias;
            weight_addr = weights;
            output_addr = out;

            int n = 0;

            if (n + 8 <= N) {
                // Second Dim: N
                _mve_set_dim_length(1, 8);
            }

            while (n + 8 <= N) {

                // Loading bias - Dim1.length = 8 - Dim0.length = 128, Stride: 0 (dim0) and 1 (dim1)
                __mdvdw acc_v = _mve_set1_dw(0);
                _mve_set_only_element(1, 0);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 1);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 2);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 3);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 4);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 5);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 6);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 7);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_all_elements(1);

                bias_addr += 8;

                input_addr = in;
                int32_t *weight_addr_tmp = weight_addr;
                weight_addr += 8 * K;

                for (int k = 0; k < K; k++) {

                    // Loading input - Dim1.length = 8 - Dim0.length = 128, Stride: 1 (dim0) and 0 (dim1)
                    // Loading weight - Dim1.length = 8 - Dim0.length = 128, Stride: 0 (dim0) and 3 (K) (dim1)
                    __mdvdw input_v = _mve_set1_dw(0);
                    __mdvdw weight_v = _mve_set1_dw(0);
                    _mve_set_only_element(1, 0);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 1);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 2);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 3);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 4);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 5);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 6);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 7);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_all_elements(1);

                    input_addr += M;
                    weight_addr_tmp += 1;

                    __mdvdw mult_v = _mve_mul_dw(input_v, weight_v);

                    acc_v = _mve_add_dw(acc_v, mult_v);
                }

                // Caculating Min and Max

                // R4 = R2 min R1
                acc_v = _mve_min_dw(acc_v, max_v);
                acc_v = _mve_max_dw(acc_v, min_v);

                // Storing the results, Stride: 1 (dim0) and 3 (M) (dim1)
                _mve_set_only_element(1, 0);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 1);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 2);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 3);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 4);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 5);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 6);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 7);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_all_elements(1);

                output_addr += 8 * M;

                mve_flusher();
                n += 8;
            }

            if (n + 4 <= N) {
                // Second Dim: N
                _mve_set_dim_length(1, 4);
            }

            while (n + 4 <= N) {

                // Loading bias - Dim1.length = 4 - Dim0.length = 128, Stride: 0 (dim0) and 1 (dim1)
                __mdvdw acc_v = _mve_set1_dw(0);
                _mve_set_only_element(1, 0);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 1);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 2);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 3);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_all_elements(1);

                bias_addr += 4;

                input_addr = in;
                int32_t *weight_addr_tmp = weight_addr;
                weight_addr += 4 * K;

                for (int k = 0; k < K; k++) {

                    // Loading input - Dim1.length = 4 - Dim0.length = 128, Stride: 1 (dim0) and 0 (dim1)
                    // Loading weight - Dim1.length = 4 - Dim0.length = 128, Stride: 0 (dim0) and 3 (K) (dim1)
                    __mdvdw input_v = _mve_set1_dw(0);
                    __mdvdw weight_v = _mve_set1_dw(0);
                    _mve_set_only_element(1, 0);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 1);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 2);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 3);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_all_elements(1);

                    input_addr += M;
                    weight_addr_tmp += 1;

                    __mdvdw mult_v = _mve_mul_dw(input_v, weight_v);

                    acc_v = _mve_add_dw(acc_v, mult_v);
                }

                // Caculating Min and Max

                // R4 = R2 min R1
                acc_v = _mve_min_dw(acc_v, max_v);
                acc_v = _mve_max_dw(acc_v, min_v);

                // Storing the results, Stride: 1 (dim0) and 3 (M) (dim1)
                _mve_set_only_element(1, 0);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 1);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 2);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 3);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_all_elements(1);

                output_addr += 4 * M;

                mve_flusher();
                n += 4;
            }

            if (n + 2 <= N) {
                // Second Dim: N
                _mve_set_dim_length(1, 2);
            }

            while (n + 2 <= N) {

                // Loading bias - Dim1.length = 2 - Dim0.length = 128, Stride: 0 (dim0) and 1 (dim1)
                __mdvdw acc_v = _mve_set1_dw(0);
                _mve_set_only_element(1, 0);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 1);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_all_elements(1);

                bias_addr += 2;

                input_addr = in;
                int32_t *weight_addr_tmp = weight_addr;
                weight_addr += 2 * K;

                for (int k = 0; k < K; k++) {

                    // Loading input - Dim1.length = 2 - Dim0.length = 128, Stride: 1 (dim0) and 0 (dim1)
                    // Loading weight - Dim1.length = 2 - Dim0.length = 128, Stride: 0 (dim0) and 3 (K) (dim1)
                    __mdvdw input_v = _mve_set1_dw(0);
                    __mdvdw weight_v = _mve_set1_dw(0);
                    _mve_set_only_element(1, 0);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 1);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_all_elements(1);

                    input_addr += M;
                    weight_addr_tmp += 1;

                    __mdvdw mult_v = _mve_mul_dw(input_v, weight_v);

                    acc_v = _mve_add_dw(acc_v, mult_v);
                }

                // Caculating Min and Max

                // R4 = R2 min R1
                acc_v = _mve_min_dw(acc_v, max_v);
                acc_v = _mve_max_dw(acc_v, min_v);

                // Storing the results, Stride: 1 (dim0) and 3 (M) (dim1)
                _mve_set_only_element(1, 0);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 1);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_all_elements(1);

                output_addr += 2 * M;

                mve_flusher();
                n += 2;
            }

            if (n + 1 <= N) {
                // Second Dim: N
                _mve_set_dim_length(1, 1);
            }

            while (n + 1 <= N) {

                // Loading bias - Dim1.length = 1 - Dim0.length = 128, Stride: 0 (dim0) and 1 (dim1)
                __mdvdw acc_v = _mve_set1_dw(0);
                _mve_set_only_element(1, 0);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_all_elements(1);

                bias_addr += 1;

                input_addr = in;
                int32_t *weight_addr_tmp = weight_addr;
                weight_addr += 1 * K;

                for (int k = 0; k < K; k++) {

                    // Loading input - Dim1.length = 1 - Dim0.length = 128, Stride: 1 (dim0) and 0 (dim1)
                    // Loading weight - Dim1.length = 1 - Dim0.length = 128, Stride: 0 (dim0) and 3 (K) (dim1)
                    __mdvdw input_v = _mve_set1_dw(0);
                    __mdvdw weight_v = _mve_set1_dw(0);
                    _mve_set_only_element(1, 0);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_all_elements(1);

                    input_addr += M;
                    weight_addr_tmp += 1;

                    __mdvdw mult_v = _mve_mul_dw(input_v, weight_v);

                    acc_v = _mve_add_dw(acc_v, mult_v);
                }

                // Caculating Min and Max

                // R4 = R2 min R1
                acc_v = _mve_min_dw(acc_v, max_v);
                acc_v = _mve_max_dw(acc_v, min_v);

                // Storing the results, Stride: 1 (dim0) and 3 (M) (dim1)
                _mve_set_only_element(1, 0);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_all_elements(1);

                output_addr += 1 * M;

                mve_flusher();
                n += 1;
            }

            in += 128;
            out += 128;
            m += 128;
        }
        if (m + 64 <= M) {
            // First Dim: M
            _mve_set_dim_length(0, 64);
        }
        while (m + 64 <= M) {

            bias_addr = bias;
            weight_addr = weights;
            output_addr = out;

            int n = 0;

            if (n + 16 <= N) {
                // Second Dim: N
                _mve_set_dim_length(1, 16);
            }

            while (n + 16 <= N) {

                // Loading bias - Dim1.length = 16 - Dim0.length = 64, Stride: 0 (dim0) and 1 (dim1)
                __mdvdw acc_v = _mve_set1_dw(0);
                _mve_set_only_element(1, 0);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 1);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 2);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 3);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 4);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 5);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 6);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 7);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 8);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 9);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 10);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 11);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 12);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 13);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 14);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 15);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_all_elements(1);

                bias_addr += 16;

                input_addr = in;
                int32_t *weight_addr_tmp = weight_addr;
                weight_addr += 16 * K;

                for (int k = 0; k < K; k++) {

                    // Loading input - Dim1.length = 16 - Dim0.length = 64, Stride: 1 (dim0) and 0 (dim1)
                    // Loading weight - Dim1.length = 16 - Dim0.length = 64, Stride: 0 (dim0) and 3 (K) (dim1)
                    __mdvdw input_v = _mve_set1_dw(0);
                    __mdvdw weight_v = _mve_set1_dw(0);
                    _mve_set_only_element(1, 0);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 1);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 2);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 3);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 4);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 5);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 6);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 7);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 8);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 9);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 10);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 11);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 12);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 13);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 14);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 15);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_all_elements(1);

                    input_addr += M;
                    weight_addr_tmp += 1;

                    __mdvdw mult_v = _mve_mul_dw(input_v, weight_v);

                    acc_v = _mve_add_dw(acc_v, mult_v);
                }

                // Caculating Min and Max

                // R4 = R2 min R1
                acc_v = _mve_min_dw(acc_v, max_v);
                acc_v = _mve_max_dw(acc_v, min_v);

                // Storing the results, Stride: 1 (dim0) and 3 (M) (dim1)
                _mve_set_only_element(1, 0);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 1);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 2);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 3);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 4);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 5);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 6);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 7);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 8);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 9);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 10);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 11);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 12);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 13);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 14);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 15);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_all_elements(1);

                output_addr += 16 * M;

                mve_flusher();
                n += 16;
            }

            if (n + 8 <= N) {
                // Second Dim: N
                _mve_set_dim_length(1, 8);
            }

            while (n + 8 <= N) {

                // Loading bias - Dim1.length = 8 - Dim0.length = 64, Stride: 0 (dim0) and 1 (dim1)
                __mdvdw acc_v = _mve_set1_dw(0);
                _mve_set_only_element(1, 0);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 1);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 2);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 3);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 4);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 5);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 6);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 7);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_all_elements(1);

                bias_addr += 8;

                input_addr = in;
                int32_t *weight_addr_tmp = weight_addr;
                weight_addr += 8 * K;

                for (int k = 0; k < K; k++) {

                    // Loading input - Dim1.length = 8 - Dim0.length = 64, Stride: 1 (dim0) and 0 (dim1)
                    // Loading weight - Dim1.length = 8 - Dim0.length = 64, Stride: 0 (dim0) and 3 (K) (dim1)
                    __mdvdw input_v = _mve_set1_dw(0);
                    __mdvdw weight_v = _mve_set1_dw(0);
                    _mve_set_only_element(1, 0);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 1);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 2);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 3);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 4);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 5);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 6);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 7);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_all_elements(1);

                    input_addr += M;
                    weight_addr_tmp += 1;

                    __mdvdw mult_v = _mve_mul_dw(input_v, weight_v);

                    acc_v = _mve_add_dw(acc_v, mult_v);
                }

                // Caculating Min and Max

                // R4 = R2 min R1
                acc_v = _mve_min_dw(acc_v, max_v);
                acc_v = _mve_max_dw(acc_v, min_v);

                // Storing the results, Stride: 1 (dim0) and 3 (M) (dim1)
                _mve_set_only_element(1, 0);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 1);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 2);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 3);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 4);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 5);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 6);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 7);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_all_elements(1);

                output_addr += 8 * M;

                mve_flusher();
                n += 8;
            }

            if (n + 4 <= N) {
                // Second Dim: N
                _mve_set_dim_length(1, 4);
            }

            while (n + 4 <= N) {

                // Loading bias - Dim1.length = 4 - Dim0.length = 64, Stride: 0 (dim0) and 1 (dim1)
                __mdvdw acc_v = _mve_set1_dw(0);
                _mve_set_only_element(1, 0);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 1);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 2);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 3);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_all_elements(1);

                bias_addr += 4;

                input_addr = in;
                int32_t *weight_addr_tmp = weight_addr;
                weight_addr += 4 * K;

                for (int k = 0; k < K; k++) {

                    // Loading input - Dim1.length = 4 - Dim0.length = 64, Stride: 1 (dim0) and 0 (dim1)
                    // Loading weight - Dim1.length = 4 - Dim0.length = 64, Stride: 0 (dim0) and 3 (K) (dim1)
                    __mdvdw input_v = _mve_set1_dw(0);
                    __mdvdw weight_v = _mve_set1_dw(0);
                    _mve_set_only_element(1, 0);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 1);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 2);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 3);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_all_elements(1);

                    input_addr += M;
                    weight_addr_tmp += 1;

                    __mdvdw mult_v = _mve_mul_dw(input_v, weight_v);

                    acc_v = _mve_add_dw(acc_v, mult_v);
                }

                // Caculating Min and Max

                // R4 = R2 min R1
                acc_v = _mve_min_dw(acc_v, max_v);
                acc_v = _mve_max_dw(acc_v, min_v);

                // Storing the results, Stride: 1 (dim0) and 3 (M) (dim1)
                _mve_set_only_element(1, 0);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 1);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 2);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 3);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_all_elements(1);

                output_addr += 4 * M;

                mve_flusher();
                n += 4;
            }

            if (n + 2 <= N) {
                // Second Dim: N
                _mve_set_dim_length(1, 2);
            }

            while (n + 2 <= N) {

                // Loading bias - Dim1.length = 2 - Dim0.length = 64, Stride: 0 (dim0) and 1 (dim1)
                __mdvdw acc_v = _mve_set1_dw(0);
                _mve_set_only_element(1, 0);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 1);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_all_elements(1);

                bias_addr += 2;

                input_addr = in;
                int32_t *weight_addr_tmp = weight_addr;
                weight_addr += 2 * K;

                for (int k = 0; k < K; k++) {

                    // Loading input - Dim1.length = 2 - Dim0.length = 64, Stride: 1 (dim0) and 0 (dim1)
                    // Loading weight - Dim1.length = 2 - Dim0.length = 64, Stride: 0 (dim0) and 3 (K) (dim1)
                    __mdvdw input_v = _mve_set1_dw(0);
                    __mdvdw weight_v = _mve_set1_dw(0);
                    _mve_set_only_element(1, 0);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 1);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_all_elements(1);

                    input_addr += M;
                    weight_addr_tmp += 1;

                    __mdvdw mult_v = _mve_mul_dw(input_v, weight_v);

                    acc_v = _mve_add_dw(acc_v, mult_v);
                }

                // Caculating Min and Max

                // R4 = R2 min R1
                acc_v = _mve_min_dw(acc_v, max_v);
                acc_v = _mve_max_dw(acc_v, min_v);

                // Storing the results, Stride: 1 (dim0) and 3 (M) (dim1)
                _mve_set_only_element(1, 0);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 1);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_all_elements(1);

                output_addr += 2 * M;

                mve_flusher();
                n += 2;
            }

            if (n + 1 <= N) {
                // Second Dim: N
                _mve_set_dim_length(1, 1);
            }

            while (n + 1 <= N) {

                // Loading bias - Dim1.length = 1 - Dim0.length = 64, Stride: 0 (dim0) and 1 (dim1)
                __mdvdw acc_v = _mve_set1_dw(0);
                _mve_set_only_element(1, 0);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_all_elements(1);

                bias_addr += 1;

                input_addr = in;
                int32_t *weight_addr_tmp = weight_addr;
                weight_addr += 1 * K;

                for (int k = 0; k < K; k++) {

                    // Loading input - Dim1.length = 1 - Dim0.length = 64, Stride: 1 (dim0) and 0 (dim1)
                    // Loading weight - Dim1.length = 1 - Dim0.length = 64, Stride: 0 (dim0) and 3 (K) (dim1)
                    __mdvdw input_v = _mve_set1_dw(0);
                    __mdvdw weight_v = _mve_set1_dw(0);
                    _mve_set_only_element(1, 0);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_all_elements(1);

                    input_addr += M;
                    weight_addr_tmp += 1;

                    __mdvdw mult_v = _mve_mul_dw(input_v, weight_v);

                    acc_v = _mve_add_dw(acc_v, mult_v);
                }

                // Caculating Min and Max

                // R4 = R2 min R1
                acc_v = _mve_min_dw(acc_v, max_v);
                acc_v = _mve_max_dw(acc_v, min_v);

                // Storing the results, Stride: 1 (dim0) and 3 (M) (dim1)
                _mve_set_only_element(1, 0);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_all_elements(1);

                output_addr += 1 * M;

                mve_flusher();
                n += 1;
            }

            in += 64;
            out += 64;
            m += 64;
        }
        if (m + 32 <= M) {
            // First Dim: M
            _mve_set_dim_length(0, 32);
        }
        while (m + 32 <= M) {

            bias_addr = bias;
            weight_addr = weights;
            output_addr = out;

            int n = 0;

            if (n + 32 <= N) {
                // Second Dim: N
                _mve_set_dim_length(1, 32);
            }

            while (n + 32 <= N) {

                // Loading bias - Dim1.length = 32 - Dim0.length = 32, Stride: 0 (dim0) and 1 (dim1)
                __mdvdw acc_v = _mve_set1_dw(0);
                _mve_set_only_element(1, 0);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 1);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 2);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 3);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 4);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 5);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 6);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 7);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 8);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 9);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 10);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 11);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 12);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 13);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 14);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 15);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 16);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 17);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 18);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 19);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 20);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 21);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 22);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 23);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 24);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 25);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 26);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 27);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 28);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 29);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 30);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 31);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_all_elements(1);

                bias_addr += 32;

                input_addr = in;
                int32_t *weight_addr_tmp = weight_addr;
                weight_addr += 32 * K;

                for (int k = 0; k < K; k++) {

                    // Loading input - Dim1.length = 32 - Dim0.length = 32, Stride: 1 (dim0) and 0 (dim1)
                    // Loading weight - Dim1.length = 32 - Dim0.length = 32, Stride: 0 (dim0) and 3 (K) (dim1)
                    __mdvdw input_v = _mve_set1_dw(0);
                    __mdvdw weight_v = _mve_set1_dw(0);
                    _mve_set_only_element(1, 0);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 1);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 2);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 3);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 4);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 5);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 6);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 7);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 8);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 9);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 10);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 11);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 12);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 13);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 14);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 15);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 16);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 17);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 18);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 19);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 20);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 21);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 22);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 23);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 24);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 25);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 26);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 27);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 28);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 29);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 30);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 31);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_all_elements(1);

                    input_addr += M;
                    weight_addr_tmp += 1;

                    __mdvdw mult_v = _mve_mul_dw(input_v, weight_v);

                    acc_v = _mve_add_dw(acc_v, mult_v);
                }

                // Caculating Min and Max

                // R4 = R2 min R1
                acc_v = _mve_min_dw(acc_v, max_v);
                acc_v = _mve_max_dw(acc_v, min_v);

                // Storing the results, Stride: 1 (dim0) and 3 (M) (dim1)
                _mve_set_only_element(1, 0);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 1);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 2);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 3);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 4);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 5);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 6);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 7);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 8);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 9);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 10);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 11);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 12);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 13);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 14);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 15);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 16);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 17);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 18);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 19);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 20);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 21);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 22);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 23);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 24);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 25);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 26);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 27);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 28);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 29);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 30);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 31);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_all_elements(1);

                output_addr += 32 * M;

                mve_flusher();
                n += 32;
            }

            if (n + 16 <= N) {
                // Second Dim: N
                _mve_set_dim_length(1, 16);
            }

            while (n + 16 <= N) {

                // Loading bias - Dim1.length = 16 - Dim0.length = 32, Stride: 0 (dim0) and 1 (dim1)
                __mdvdw acc_v = _mve_set1_dw(0);
                _mve_set_only_element(1, 0);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 1);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 2);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 3);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 4);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 5);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 6);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 7);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 8);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 9);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 10);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 11);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 12);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 13);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 14);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 15);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_all_elements(1);

                bias_addr += 16;

                input_addr = in;
                int32_t *weight_addr_tmp = weight_addr;
                weight_addr += 16 * K;

                for (int k = 0; k < K; k++) {

                    // Loading input - Dim1.length = 16 - Dim0.length = 32, Stride: 1 (dim0) and 0 (dim1)
                    // Loading weight - Dim1.length = 16 - Dim0.length = 32, Stride: 0 (dim0) and 3 (K) (dim1)
                    __mdvdw input_v = _mve_set1_dw(0);
                    __mdvdw weight_v = _mve_set1_dw(0);
                    _mve_set_only_element(1, 0);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 1);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 2);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 3);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 4);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 5);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 6);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 7);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 8);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 9);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 10);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 11);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 12);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 13);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 14);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 15);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_all_elements(1);

                    input_addr += M;
                    weight_addr_tmp += 1;

                    __mdvdw mult_v = _mve_mul_dw(input_v, weight_v);

                    acc_v = _mve_add_dw(acc_v, mult_v);
                }

                // Caculating Min and Max

                // R4 = R2 min R1
                acc_v = _mve_min_dw(acc_v, max_v);
                acc_v = _mve_max_dw(acc_v, min_v);

                // Storing the results, Stride: 1 (dim0) and 3 (M) (dim1)
                _mve_set_only_element(1, 0);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 1);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 2);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 3);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 4);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 5);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 6);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 7);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 8);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 9);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 10);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 11);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 12);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 13);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 14);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 15);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_all_elements(1);

                output_addr += 16 * M;

                mve_flusher();
                n += 16;
            }

            if (n + 8 <= N) {
                // Second Dim: N
                _mve_set_dim_length(1, 8);
            }

            while (n + 8 <= N) {

                // Loading bias - Dim1.length = 8 - Dim0.length = 32, Stride: 0 (dim0) and 1 (dim1)
                __mdvdw acc_v = _mve_set1_dw(0);
                _mve_set_only_element(1, 0);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 1);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 2);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 3);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 4);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 5);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 6);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 7);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_all_elements(1);

                bias_addr += 8;

                input_addr = in;
                int32_t *weight_addr_tmp = weight_addr;
                weight_addr += 8 * K;

                for (int k = 0; k < K; k++) {

                    // Loading input - Dim1.length = 8 - Dim0.length = 32, Stride: 1 (dim0) and 0 (dim1)
                    // Loading weight - Dim1.length = 8 - Dim0.length = 32, Stride: 0 (dim0) and 3 (K) (dim1)
                    __mdvdw input_v = _mve_set1_dw(0);
                    __mdvdw weight_v = _mve_set1_dw(0);
                    _mve_set_only_element(1, 0);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 1);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 2);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 3);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 4);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 5);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 6);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 7);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_all_elements(1);

                    input_addr += M;
                    weight_addr_tmp += 1;

                    __mdvdw mult_v = _mve_mul_dw(input_v, weight_v);

                    acc_v = _mve_add_dw(acc_v, mult_v);
                }

                // Caculating Min and Max

                // R4 = R2 min R1
                acc_v = _mve_min_dw(acc_v, max_v);
                acc_v = _mve_max_dw(acc_v, min_v);

                // Storing the results, Stride: 1 (dim0) and 3 (M) (dim1)
                _mve_set_only_element(1, 0);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 1);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 2);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 3);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 4);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 5);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 6);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 7);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_all_elements(1);

                output_addr += 8 * M;

                mve_flusher();
                n += 8;
            }

            if (n + 4 <= N) {
                // Second Dim: N
                _mve_set_dim_length(1, 4);
            }

            while (n + 4 <= N) {

                // Loading bias - Dim1.length = 4 - Dim0.length = 32, Stride: 0 (dim0) and 1 (dim1)
                __mdvdw acc_v = _mve_set1_dw(0);
                _mve_set_only_element(1, 0);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 1);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 2);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 3);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_all_elements(1);

                bias_addr += 4;

                input_addr = in;
                int32_t *weight_addr_tmp = weight_addr;
                weight_addr += 4 * K;

                for (int k = 0; k < K; k++) {

                    // Loading input - Dim1.length = 4 - Dim0.length = 32, Stride: 1 (dim0) and 0 (dim1)
                    // Loading weight - Dim1.length = 4 - Dim0.length = 32, Stride: 0 (dim0) and 3 (K) (dim1)
                    __mdvdw input_v = _mve_set1_dw(0);
                    __mdvdw weight_v = _mve_set1_dw(0);
                    _mve_set_only_element(1, 0);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 1);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 2);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 3);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_all_elements(1);

                    input_addr += M;
                    weight_addr_tmp += 1;

                    __mdvdw mult_v = _mve_mul_dw(input_v, weight_v);

                    acc_v = _mve_add_dw(acc_v, mult_v);
                }

                // Caculating Min and Max

                // R4 = R2 min R1
                acc_v = _mve_min_dw(acc_v, max_v);
                acc_v = _mve_max_dw(acc_v, min_v);

                // Storing the results, Stride: 1 (dim0) and 3 (M) (dim1)
                _mve_set_only_element(1, 0);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 1);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 2);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 3);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_all_elements(1);

                output_addr += 4 * M;

                mve_flusher();
                n += 4;
            }

            if (n + 2 <= N) {
                // Second Dim: N
                _mve_set_dim_length(1, 2);
            }

            while (n + 2 <= N) {

                // Loading bias - Dim1.length = 2 - Dim0.length = 32, Stride: 0 (dim0) and 1 (dim1)
                __mdvdw acc_v = _mve_set1_dw(0);
                _mve_set_only_element(1, 0);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 1);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_all_elements(1);

                bias_addr += 2;

                input_addr = in;
                int32_t *weight_addr_tmp = weight_addr;
                weight_addr += 2 * K;

                for (int k = 0; k < K; k++) {

                    // Loading input - Dim1.length = 2 - Dim0.length = 32, Stride: 1 (dim0) and 0 (dim1)
                    // Loading weight - Dim1.length = 2 - Dim0.length = 32, Stride: 0 (dim0) and 3 (K) (dim1)
                    __mdvdw input_v = _mve_set1_dw(0);
                    __mdvdw weight_v = _mve_set1_dw(0);
                    _mve_set_only_element(1, 0);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 1);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_all_elements(1);

                    input_addr += M;
                    weight_addr_tmp += 1;

                    __mdvdw mult_v = _mve_mul_dw(input_v, weight_v);

                    acc_v = _mve_add_dw(acc_v, mult_v);
                }

                // Caculating Min and Max

                // R4 = R2 min R1
                acc_v = _mve_min_dw(acc_v, max_v);
                acc_v = _mve_max_dw(acc_v, min_v);

                // Storing the results, Stride: 1 (dim0) and 3 (M) (dim1)
                _mve_set_only_element(1, 0);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 1);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_all_elements(1);

                output_addr += 2 * M;

                mve_flusher();
                n += 2;
            }

            if (n + 1 <= N) {
                // Second Dim: N
                _mve_set_dim_length(1, 1);
            }

            while (n + 1 <= N) {

                // Loading bias - Dim1.length = 1 - Dim0.length = 32, Stride: 0 (dim0) and 1 (dim1)
                __mdvdw acc_v = _mve_set1_dw(0);
                _mve_set_only_element(1, 0);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_all_elements(1);

                bias_addr += 1;

                input_addr = in;
                int32_t *weight_addr_tmp = weight_addr;
                weight_addr += 1 * K;

                for (int k = 0; k < K; k++) {

                    // Loading input - Dim1.length = 1 - Dim0.length = 32, Stride: 1 (dim0) and 0 (dim1)
                    // Loading weight - Dim1.length = 1 - Dim0.length = 32, Stride: 0 (dim0) and 3 (K) (dim1)
                    __mdvdw input_v = _mve_set1_dw(0);
                    __mdvdw weight_v = _mve_set1_dw(0);
                    _mve_set_only_element(1, 0);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_all_elements(1);

                    input_addr += M;
                    weight_addr_tmp += 1;

                    __mdvdw mult_v = _mve_mul_dw(input_v, weight_v);

                    acc_v = _mve_add_dw(acc_v, mult_v);
                }

                // Caculating Min and Max

                // R4 = R2 min R1
                acc_v = _mve_min_dw(acc_v, max_v);
                acc_v = _mve_max_dw(acc_v, min_v);

                // Storing the results, Stride: 1 (dim0) and 3 (M) (dim1)
                _mve_set_only_element(1, 0);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_all_elements(1);

                output_addr += 1 * M;

                mve_flusher();
                n += 1;
            }

            in += 32;
            out += 32;
            m += 32;
        }
        if (m + 16 <= M) {
            // First Dim: M
            _mve_set_dim_length(0, 16);
        }
        while (m + 16 <= M) {

            bias_addr = bias;
            weight_addr = weights;
            output_addr = out;

            int n = 0;

            if (n + 64 <= N) {
                // Second Dim: N
                _mve_set_dim_length(1, 64);
            }

            while (n + 64 <= N) {

                // Loading bias - Dim1.length = 64 - Dim0.length = 16, Stride: 0 (dim0) and 1 (dim1)
                __mdvdw acc_v = _mve_set1_dw(0);
                _mve_set_only_element(1, 0);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 1);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 2);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 3);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 4);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 5);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 6);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 7);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 8);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 9);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 10);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 11);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 12);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 13);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 14);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 15);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 16);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 17);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 18);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 19);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 20);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 21);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 22);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 23);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 24);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 25);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 26);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 27);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 28);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 29);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 30);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 31);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 32);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 33);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 34);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 35);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 36);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 37);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 38);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 39);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 40);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 41);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 42);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 43);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 44);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 45);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 46);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 47);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 48);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 49);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 50);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 51);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 52);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 53);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 54);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 55);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 56);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 57);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 58);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 59);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 60);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 61);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 62);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 63);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_all_elements(1);

                bias_addr += 64;

                input_addr = in;
                int32_t *weight_addr_tmp = weight_addr;
                weight_addr += 64 * K;

                for (int k = 0; k < K; k++) {

                    // Loading input - Dim1.length = 64 - Dim0.length = 16, Stride: 1 (dim0) and 0 (dim1)
                    // Loading weight - Dim1.length = 64 - Dim0.length = 16, Stride: 0 (dim0) and 3 (K) (dim1)
                    __mdvdw input_v = _mve_set1_dw(0);
                    __mdvdw weight_v = _mve_set1_dw(0);
                    _mve_set_only_element(1, 0);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 1);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 2);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 3);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 4);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 5);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 6);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 7);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 8);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 9);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 10);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 11);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 12);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 13);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 14);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 15);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 16);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 17);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 18);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 19);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 20);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 21);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 22);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 23);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 24);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 25);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 26);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 27);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 28);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 29);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 30);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 31);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 32);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 33);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 34);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 35);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 36);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 37);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 38);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 39);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 40);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 41);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 42);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 43);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 44);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 45);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 46);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 47);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 48);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 49);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 50);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 51);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 52);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 53);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 54);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 55);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 56);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 57);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 58);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 59);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 60);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 61);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 62);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 63);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_all_elements(1);

                    input_addr += M;
                    weight_addr_tmp += 1;

                    __mdvdw mult_v = _mve_mul_dw(input_v, weight_v);

                    acc_v = _mve_add_dw(acc_v, mult_v);
                }

                // Caculating Min and Max

                // R4 = R2 min R1
                acc_v = _mve_min_dw(acc_v, max_v);
                acc_v = _mve_max_dw(acc_v, min_v);

                // Storing the results, Stride: 1 (dim0) and 3 (M) (dim1)
                _mve_set_only_element(1, 0);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 1);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 2);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 3);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 4);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 5);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 6);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 7);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 8);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 9);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 10);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 11);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 12);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 13);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 14);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 15);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 16);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 17);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 18);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 19);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 20);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 21);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 22);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 23);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 24);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 25);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 26);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 27);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 28);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 29);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 30);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 31);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 32);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 33);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 34);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 35);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 36);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 37);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 38);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 39);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 40);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 41);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 42);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 43);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 44);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 45);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 46);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 47);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 48);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 49);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 50);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 51);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 52);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 53);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 54);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 55);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 56);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 57);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 58);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 59);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 60);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 61);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 62);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 63);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_all_elements(1);

                output_addr += 64 * M;

                mve_flusher();
                n += 64;
            }

            if (n + 32 <= N) {
                // Second Dim: N
                _mve_set_dim_length(1, 32);
            }

            while (n + 32 <= N) {

                // Loading bias - Dim1.length = 32 - Dim0.length = 16, Stride: 0 (dim0) and 1 (dim1)
                __mdvdw acc_v = _mve_set1_dw(0);
                _mve_set_only_element(1, 0);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 1);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 2);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 3);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 4);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 5);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 6);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 7);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 8);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 9);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 10);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 11);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 12);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 13);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 14);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 15);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 16);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 17);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 18);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 19);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 20);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 21);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 22);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 23);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 24);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 25);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 26);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 27);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 28);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 29);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 30);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 31);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_all_elements(1);

                bias_addr += 32;

                input_addr = in;
                int32_t *weight_addr_tmp = weight_addr;
                weight_addr += 32 * K;

                for (int k = 0; k < K; k++) {

                    // Loading input - Dim1.length = 32 - Dim0.length = 16, Stride: 1 (dim0) and 0 (dim1)
                    // Loading weight - Dim1.length = 32 - Dim0.length = 16, Stride: 0 (dim0) and 3 (K) (dim1)
                    __mdvdw input_v = _mve_set1_dw(0);
                    __mdvdw weight_v = _mve_set1_dw(0);
                    _mve_set_only_element(1, 0);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 1);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 2);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 3);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 4);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 5);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 6);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 7);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 8);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 9);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 10);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 11);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 12);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 13);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 14);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 15);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 16);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 17);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 18);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 19);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 20);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 21);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 22);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 23);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 24);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 25);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 26);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 27);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 28);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 29);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 30);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 31);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_all_elements(1);

                    input_addr += M;
                    weight_addr_tmp += 1;

                    __mdvdw mult_v = _mve_mul_dw(input_v, weight_v);

                    acc_v = _mve_add_dw(acc_v, mult_v);
                }

                // Caculating Min and Max

                // R4 = R2 min R1
                acc_v = _mve_min_dw(acc_v, max_v);
                acc_v = _mve_max_dw(acc_v, min_v);

                // Storing the results, Stride: 1 (dim0) and 3 (M) (dim1)
                _mve_set_only_element(1, 0);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 1);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 2);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 3);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 4);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 5);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 6);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 7);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 8);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 9);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 10);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 11);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 12);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 13);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 14);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 15);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 16);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 17);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 18);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 19);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 20);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 21);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 22);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 23);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 24);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 25);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 26);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 27);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 28);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 29);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 30);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 31);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_all_elements(1);

                output_addr += 32 * M;

                mve_flusher();
                n += 32;
            }

            if (n + 16 <= N) {
                // Second Dim: N
                _mve_set_dim_length(1, 16);
            }

            while (n + 16 <= N) {

                // Loading bias - Dim1.length = 16 - Dim0.length = 16, Stride: 0 (dim0) and 1 (dim1)
                __mdvdw acc_v = _mve_set1_dw(0);
                _mve_set_only_element(1, 0);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 1);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 2);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 3);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 4);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 5);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 6);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 7);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 8);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 9);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 10);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 11);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 12);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 13);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 14);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 15);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_all_elements(1);

                bias_addr += 16;

                input_addr = in;
                int32_t *weight_addr_tmp = weight_addr;
                weight_addr += 16 * K;

                for (int k = 0; k < K; k++) {

                    // Loading input - Dim1.length = 16 - Dim0.length = 16, Stride: 1 (dim0) and 0 (dim1)
                    // Loading weight - Dim1.length = 16 - Dim0.length = 16, Stride: 0 (dim0) and 3 (K) (dim1)
                    __mdvdw input_v = _mve_set1_dw(0);
                    __mdvdw weight_v = _mve_set1_dw(0);
                    _mve_set_only_element(1, 0);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 1);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 2);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 3);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 4);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 5);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 6);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 7);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 8);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 9);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 10);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 11);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 12);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 13);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 14);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 15);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_all_elements(1);

                    input_addr += M;
                    weight_addr_tmp += 1;

                    __mdvdw mult_v = _mve_mul_dw(input_v, weight_v);

                    acc_v = _mve_add_dw(acc_v, mult_v);
                }

                // Caculating Min and Max

                // R4 = R2 min R1
                acc_v = _mve_min_dw(acc_v, max_v);
                acc_v = _mve_max_dw(acc_v, min_v);

                // Storing the results, Stride: 1 (dim0) and 3 (M) (dim1)
                _mve_set_only_element(1, 0);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 1);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 2);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 3);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 4);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 5);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 6);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 7);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 8);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 9);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 10);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 11);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 12);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 13);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 14);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 15);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_all_elements(1);

                output_addr += 16 * M;

                mve_flusher();
                n += 16;
            }

            if (n + 8 <= N) {
                // Second Dim: N
                _mve_set_dim_length(1, 8);
            }

            while (n + 8 <= N) {

                // Loading bias - Dim1.length = 8 - Dim0.length = 16, Stride: 0 (dim0) and 1 (dim1)
                __mdvdw acc_v = _mve_set1_dw(0);
                _mve_set_only_element(1, 0);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 1);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 2);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 3);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 4);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 5);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 6);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 7);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_all_elements(1);

                bias_addr += 8;

                input_addr = in;
                int32_t *weight_addr_tmp = weight_addr;
                weight_addr += 8 * K;

                for (int k = 0; k < K; k++) {

                    // Loading input - Dim1.length = 8 - Dim0.length = 16, Stride: 1 (dim0) and 0 (dim1)
                    // Loading weight - Dim1.length = 8 - Dim0.length = 16, Stride: 0 (dim0) and 3 (K) (dim1)
                    __mdvdw input_v = _mve_set1_dw(0);
                    __mdvdw weight_v = _mve_set1_dw(0);
                    _mve_set_only_element(1, 0);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 1);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 2);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 3);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 4);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 5);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 6);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 7);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_all_elements(1);

                    input_addr += M;
                    weight_addr_tmp += 1;

                    __mdvdw mult_v = _mve_mul_dw(input_v, weight_v);

                    acc_v = _mve_add_dw(acc_v, mult_v);
                }

                // Caculating Min and Max

                // R4 = R2 min R1
                acc_v = _mve_min_dw(acc_v, max_v);
                acc_v = _mve_max_dw(acc_v, min_v);

                // Storing the results, Stride: 1 (dim0) and 3 (M) (dim1)
                _mve_set_only_element(1, 0);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 1);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 2);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 3);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 4);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 5);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 6);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 7);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_all_elements(1);

                output_addr += 8 * M;

                mve_flusher();
                n += 8;
            }

            if (n + 4 <= N) {
                // Second Dim: N
                _mve_set_dim_length(1, 4);
            }

            while (n + 4 <= N) {

                // Loading bias - Dim1.length = 4 - Dim0.length = 16, Stride: 0 (dim0) and 1 (dim1)
                __mdvdw acc_v = _mve_set1_dw(0);
                _mve_set_only_element(1, 0);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 1);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 2);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 3);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_all_elements(1);

                bias_addr += 4;

                input_addr = in;
                int32_t *weight_addr_tmp = weight_addr;
                weight_addr += 4 * K;

                for (int k = 0; k < K; k++) {

                    // Loading input - Dim1.length = 4 - Dim0.length = 16, Stride: 1 (dim0) and 0 (dim1)
                    // Loading weight - Dim1.length = 4 - Dim0.length = 16, Stride: 0 (dim0) and 3 (K) (dim1)
                    __mdvdw input_v = _mve_set1_dw(0);
                    __mdvdw weight_v = _mve_set1_dw(0);
                    _mve_set_only_element(1, 0);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 1);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 2);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 3);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_all_elements(1);

                    input_addr += M;
                    weight_addr_tmp += 1;

                    __mdvdw mult_v = _mve_mul_dw(input_v, weight_v);

                    acc_v = _mve_add_dw(acc_v, mult_v);
                }

                // Caculating Min and Max

                // R4 = R2 min R1
                acc_v = _mve_min_dw(acc_v, max_v);
                acc_v = _mve_max_dw(acc_v, min_v);

                // Storing the results, Stride: 1 (dim0) and 3 (M) (dim1)
                _mve_set_only_element(1, 0);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 1);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 2);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 3);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_all_elements(1);

                output_addr += 4 * M;

                mve_flusher();
                n += 4;
            }

            if (n + 2 <= N) {
                // Second Dim: N
                _mve_set_dim_length(1, 2);
            }

            while (n + 2 <= N) {

                // Loading bias - Dim1.length = 2 - Dim0.length = 16, Stride: 0 (dim0) and 1 (dim1)
                __mdvdw acc_v = _mve_set1_dw(0);
                _mve_set_only_element(1, 0);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 1);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_all_elements(1);

                bias_addr += 2;

                input_addr = in;
                int32_t *weight_addr_tmp = weight_addr;
                weight_addr += 2 * K;

                for (int k = 0; k < K; k++) {

                    // Loading input - Dim1.length = 2 - Dim0.length = 16, Stride: 1 (dim0) and 0 (dim1)
                    // Loading weight - Dim1.length = 2 - Dim0.length = 16, Stride: 0 (dim0) and 3 (K) (dim1)
                    __mdvdw input_v = _mve_set1_dw(0);
                    __mdvdw weight_v = _mve_set1_dw(0);
                    _mve_set_only_element(1, 0);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 1);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_all_elements(1);

                    input_addr += M;
                    weight_addr_tmp += 1;

                    __mdvdw mult_v = _mve_mul_dw(input_v, weight_v);

                    acc_v = _mve_add_dw(acc_v, mult_v);
                }

                // Caculating Min and Max

                // R4 = R2 min R1
                acc_v = _mve_min_dw(acc_v, max_v);
                acc_v = _mve_max_dw(acc_v, min_v);

                // Storing the results, Stride: 1 (dim0) and 3 (M) (dim1)
                _mve_set_only_element(1, 0);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 1);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_all_elements(1);

                output_addr += 2 * M;

                mve_flusher();
                n += 2;
            }

            if (n + 1 <= N) {
                // Second Dim: N
                _mve_set_dim_length(1, 1);
            }

            while (n + 1 <= N) {

                // Loading bias - Dim1.length = 1 - Dim0.length = 16, Stride: 0 (dim0) and 1 (dim1)
                __mdvdw acc_v = _mve_set1_dw(0);
                _mve_set_only_element(1, 0);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_all_elements(1);

                bias_addr += 1;

                input_addr = in;
                int32_t *weight_addr_tmp = weight_addr;
                weight_addr += 1 * K;

                for (int k = 0; k < K; k++) {

                    // Loading input - Dim1.length = 1 - Dim0.length = 16, Stride: 1 (dim0) and 0 (dim1)
                    // Loading weight - Dim1.length = 1 - Dim0.length = 16, Stride: 0 (dim0) and 3 (K) (dim1)
                    __mdvdw input_v = _mve_set1_dw(0);
                    __mdvdw weight_v = _mve_set1_dw(0);
                    _mve_set_only_element(1, 0);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_all_elements(1);

                    input_addr += M;
                    weight_addr_tmp += 1;

                    __mdvdw mult_v = _mve_mul_dw(input_v, weight_v);

                    acc_v = _mve_add_dw(acc_v, mult_v);
                }

                // Caculating Min and Max

                // R4 = R2 min R1
                acc_v = _mve_min_dw(acc_v, max_v);
                acc_v = _mve_max_dw(acc_v, min_v);

                // Storing the results, Stride: 1 (dim0) and 3 (M) (dim1)
                _mve_set_only_element(1, 0);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_all_elements(1);

                output_addr += 1 * M;

                mve_flusher();
                n += 1;
            }

            in += 16;
            out += 16;
            m += 16;
        }
        if (m + 8 <= M) {
            // First Dim: M
            _mve_set_dim_length(0, 8);
        }
        while (m + 8 <= M) {

            bias_addr = bias;
            weight_addr = weights;
            output_addr = out;

            int n = 0;

            if (n + 128 <= N) {
                // Second Dim: N
                _mve_set_dim_length(1, 128);
            }

            while (n + 128 <= N) {

                // Loading bias - Dim1.length = 128 - Dim0.length = 8, Stride: 0 (dim0) and 1 (dim1)
                __mdvdw acc_v = _mve_set1_dw(0);
                _mve_set_only_element(1, 0);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 1);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 2);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 3);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 4);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 5);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 6);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 7);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 8);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 9);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 10);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 11);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 12);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 13);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 14);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 15);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 16);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 17);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 18);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 19);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 20);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 21);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 22);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 23);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 24);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 25);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 26);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 27);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 28);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 29);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 30);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 31);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 32);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 33);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 34);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 35);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 36);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 37);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 38);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 39);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 40);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 41);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 42);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 43);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 44);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 45);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 46);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 47);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 48);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 49);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 50);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 51);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 52);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 53);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 54);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 55);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 56);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 57);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 58);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 59);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 60);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 61);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 62);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 63);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 64);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 65);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 66);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 67);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 68);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 69);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 70);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 71);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 72);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 73);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 74);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 75);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 76);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 77);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 78);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 79);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 80);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 81);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 82);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 83);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 84);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 85);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 86);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 87);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 88);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 89);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 90);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 91);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 92);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 93);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 94);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 95);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 96);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 97);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 98);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 99);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 100);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 101);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 102);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 103);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 104);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 105);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 106);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 107);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 108);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 109);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 110);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 111);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 112);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 113);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 114);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 115);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 116);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 117);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 118);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 119);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 120);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 121);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 122);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 123);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 124);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 125);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 126);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 127);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_all_elements(1);

                bias_addr += 128;

                input_addr = in;
                int32_t *weight_addr_tmp = weight_addr;
                weight_addr += 128 * K;

                for (int k = 0; k < K; k++) {

                    // Loading input - Dim1.length = 128 - Dim0.length = 8, Stride: 1 (dim0) and 0 (dim1)
                    // Loading weight - Dim1.length = 128 - Dim0.length = 8, Stride: 0 (dim0) and 3 (K) (dim1)
                    __mdvdw input_v = _mve_set1_dw(0);
                    __mdvdw weight_v = _mve_set1_dw(0);
                    _mve_set_only_element(1, 0);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 1);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 2);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 3);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 4);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 5);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 6);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 7);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 8);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 9);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 10);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 11);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 12);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 13);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 14);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 15);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 16);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 17);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 18);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 19);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 20);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 21);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 22);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 23);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 24);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 25);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 26);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 27);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 28);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 29);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 30);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 31);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 32);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 33);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 34);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 35);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 36);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 37);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 38);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 39);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 40);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 41);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 42);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 43);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 44);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 45);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 46);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 47);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 48);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 49);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 50);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 51);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 52);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 53);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 54);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 55);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 56);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 57);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 58);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 59);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 60);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 61);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 62);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 63);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 64);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 65);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 66);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 67);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 68);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 69);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 70);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 71);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 72);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 73);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 74);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 75);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 76);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 77);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 78);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 79);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 80);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 81);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 82);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 83);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 84);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 85);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 86);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 87);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 88);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 89);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 90);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 91);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 92);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 93);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 94);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 95);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 96);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 97);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 98);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 99);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 100);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 101);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 102);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 103);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 104);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 105);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 106);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 107);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 108);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 109);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 110);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 111);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 112);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 113);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 114);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 115);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 116);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 117);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 118);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 119);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 120);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 121);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 122);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 123);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 124);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 125);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 126);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 127);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_all_elements(1);

                    input_addr += M;
                    weight_addr_tmp += 1;

                    __mdvdw mult_v = _mve_mul_dw(input_v, weight_v);

                    acc_v = _mve_add_dw(acc_v, mult_v);
                }

                // Caculating Min and Max

                // R4 = R2 min R1
                acc_v = _mve_min_dw(acc_v, max_v);
                acc_v = _mve_max_dw(acc_v, min_v);

                // Storing the results, Stride: 1 (dim0) and 3 (M) (dim1)
                _mve_set_only_element(1, 0);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 1);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 2);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 3);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 4);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 5);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 6);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 7);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 8);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 9);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 10);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 11);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 12);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 13);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 14);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 15);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 16);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 17);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 18);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 19);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 20);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 21);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 22);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 23);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 24);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 25);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 26);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 27);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 28);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 29);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 30);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 31);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 32);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 33);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 34);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 35);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 36);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 37);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 38);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 39);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 40);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 41);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 42);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 43);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 44);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 45);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 46);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 47);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 48);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 49);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 50);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 51);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 52);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 53);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 54);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 55);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 56);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 57);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 58);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 59);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 60);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 61);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 62);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 63);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 64);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 65);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 66);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 67);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 68);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 69);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 70);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 71);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 72);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 73);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 74);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 75);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 76);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 77);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 78);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 79);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 80);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 81);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 82);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 83);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 84);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 85);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 86);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 87);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 88);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 89);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 90);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 91);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 92);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 93);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 94);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 95);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 96);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 97);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 98);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 99);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 100);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 101);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 102);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 103);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 104);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 105);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 106);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 107);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 108);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 109);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 110);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 111);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 112);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 113);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 114);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 115);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 116);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 117);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 118);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 119);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 120);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 121);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 122);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 123);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 124);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 125);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 126);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 127);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_all_elements(1);

                output_addr += 128 * M;

                mve_flusher();
                n += 128;
            }

            if (n + 64 <= N) {
                // Second Dim: N
                _mve_set_dim_length(1, 64);
            }

            while (n + 64 <= N) {

                // Loading bias - Dim1.length = 64 - Dim0.length = 8, Stride: 0 (dim0) and 1 (dim1)
                __mdvdw acc_v = _mve_set1_dw(0);
                _mve_set_only_element(1, 0);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 1);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 2);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 3);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 4);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 5);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 6);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 7);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 8);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 9);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 10);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 11);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 12);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 13);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 14);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 15);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 16);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 17);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 18);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 19);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 20);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 21);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 22);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 23);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 24);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 25);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 26);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 27);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 28);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 29);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 30);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 31);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 32);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 33);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 34);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 35);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 36);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 37);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 38);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 39);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 40);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 41);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 42);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 43);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 44);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 45);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 46);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 47);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 48);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 49);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 50);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 51);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 52);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 53);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 54);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 55);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 56);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 57);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 58);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 59);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 60);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 61);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 62);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 63);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_all_elements(1);

                bias_addr += 64;

                input_addr = in;
                int32_t *weight_addr_tmp = weight_addr;
                weight_addr += 64 * K;

                for (int k = 0; k < K; k++) {

                    // Loading input - Dim1.length = 64 - Dim0.length = 8, Stride: 1 (dim0) and 0 (dim1)
                    // Loading weight - Dim1.length = 64 - Dim0.length = 8, Stride: 0 (dim0) and 3 (K) (dim1)
                    __mdvdw input_v = _mve_set1_dw(0);
                    __mdvdw weight_v = _mve_set1_dw(0);
                    _mve_set_only_element(1, 0);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 1);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 2);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 3);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 4);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 5);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 6);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 7);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 8);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 9);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 10);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 11);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 12);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 13);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 14);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 15);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 16);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 17);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 18);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 19);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 20);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 21);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 22);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 23);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 24);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 25);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 26);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 27);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 28);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 29);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 30);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 31);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 32);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 33);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 34);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 35);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 36);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 37);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 38);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 39);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 40);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 41);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 42);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 43);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 44);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 45);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 46);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 47);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 48);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 49);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 50);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 51);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 52);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 53);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 54);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 55);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 56);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 57);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 58);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 59);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 60);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 61);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 62);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 63);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_all_elements(1);

                    input_addr += M;
                    weight_addr_tmp += 1;

                    __mdvdw mult_v = _mve_mul_dw(input_v, weight_v);

                    acc_v = _mve_add_dw(acc_v, mult_v);
                }

                // Caculating Min and Max

                // R4 = R2 min R1
                acc_v = _mve_min_dw(acc_v, max_v);
                acc_v = _mve_max_dw(acc_v, min_v);

                // Storing the results, Stride: 1 (dim0) and 3 (M) (dim1)
                _mve_set_only_element(1, 0);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 1);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 2);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 3);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 4);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 5);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 6);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 7);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 8);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 9);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 10);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 11);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 12);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 13);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 14);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 15);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 16);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 17);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 18);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 19);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 20);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 21);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 22);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 23);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 24);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 25);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 26);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 27);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 28);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 29);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 30);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 31);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 32);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 33);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 34);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 35);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 36);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 37);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 38);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 39);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 40);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 41);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 42);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 43);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 44);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 45);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 46);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 47);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 48);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 49);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 50);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 51);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 52);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 53);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 54);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 55);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 56);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 57);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 58);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 59);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 60);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 61);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 62);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 63);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_all_elements(1);

                output_addr += 64 * M;

                mve_flusher();
                n += 64;
            }

            if (n + 32 <= N) {
                // Second Dim: N
                _mve_set_dim_length(1, 32);
            }

            while (n + 32 <= N) {

                // Loading bias - Dim1.length = 32 - Dim0.length = 8, Stride: 0 (dim0) and 1 (dim1)
                __mdvdw acc_v = _mve_set1_dw(0);
                _mve_set_only_element(1, 0);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 1);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 2);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 3);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 4);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 5);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 6);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 7);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 8);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 9);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 10);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 11);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 12);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 13);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 14);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 15);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 16);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 17);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 18);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 19);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 20);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 21);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 22);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 23);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 24);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 25);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 26);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 27);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 28);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 29);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 30);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 31);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_all_elements(1);

                bias_addr += 32;

                input_addr = in;
                int32_t *weight_addr_tmp = weight_addr;
                weight_addr += 32 * K;

                for (int k = 0; k < K; k++) {

                    // Loading input - Dim1.length = 32 - Dim0.length = 8, Stride: 1 (dim0) and 0 (dim1)
                    // Loading weight - Dim1.length = 32 - Dim0.length = 8, Stride: 0 (dim0) and 3 (K) (dim1)
                    __mdvdw input_v = _mve_set1_dw(0);
                    __mdvdw weight_v = _mve_set1_dw(0);
                    _mve_set_only_element(1, 0);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 1);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 2);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 3);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 4);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 5);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 6);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 7);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 8);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 9);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 10);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 11);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 12);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 13);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 14);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 15);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 16);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 17);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 18);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 19);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 20);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 21);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 22);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 23);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 24);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 25);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 26);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 27);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 28);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 29);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 30);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 31);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_all_elements(1);

                    input_addr += M;
                    weight_addr_tmp += 1;

                    __mdvdw mult_v = _mve_mul_dw(input_v, weight_v);

                    acc_v = _mve_add_dw(acc_v, mult_v);
                }

                // Caculating Min and Max

                // R4 = R2 min R1
                acc_v = _mve_min_dw(acc_v, max_v);
                acc_v = _mve_max_dw(acc_v, min_v);

                // Storing the results, Stride: 1 (dim0) and 3 (M) (dim1)
                _mve_set_only_element(1, 0);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 1);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 2);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 3);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 4);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 5);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 6);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 7);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 8);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 9);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 10);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 11);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 12);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 13);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 14);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 15);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 16);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 17);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 18);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 19);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 20);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 21);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 22);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 23);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 24);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 25);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 26);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 27);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 28);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 29);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 30);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 31);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_all_elements(1);

                output_addr += 32 * M;

                mve_flusher();
                n += 32;
            }

            if (n + 16 <= N) {
                // Second Dim: N
                _mve_set_dim_length(1, 16);
            }

            while (n + 16 <= N) {

                // Loading bias - Dim1.length = 16 - Dim0.length = 8, Stride: 0 (dim0) and 1 (dim1)
                __mdvdw acc_v = _mve_set1_dw(0);
                _mve_set_only_element(1, 0);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 1);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 2);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 3);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 4);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 5);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 6);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 7);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 8);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 9);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 10);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 11);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 12);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 13);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 14);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 15);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_all_elements(1);

                bias_addr += 16;

                input_addr = in;
                int32_t *weight_addr_tmp = weight_addr;
                weight_addr += 16 * K;

                for (int k = 0; k < K; k++) {

                    // Loading input - Dim1.length = 16 - Dim0.length = 8, Stride: 1 (dim0) and 0 (dim1)
                    // Loading weight - Dim1.length = 16 - Dim0.length = 8, Stride: 0 (dim0) and 3 (K) (dim1)
                    __mdvdw input_v = _mve_set1_dw(0);
                    __mdvdw weight_v = _mve_set1_dw(0);
                    _mve_set_only_element(1, 0);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 1);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 2);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 3);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 4);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 5);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 6);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 7);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 8);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 9);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 10);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 11);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 12);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 13);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 14);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 15);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_all_elements(1);

                    input_addr += M;
                    weight_addr_tmp += 1;

                    __mdvdw mult_v = _mve_mul_dw(input_v, weight_v);

                    acc_v = _mve_add_dw(acc_v, mult_v);
                }

                // Caculating Min and Max

                // R4 = R2 min R1
                acc_v = _mve_min_dw(acc_v, max_v);
                acc_v = _mve_max_dw(acc_v, min_v);

                // Storing the results, Stride: 1 (dim0) and 3 (M) (dim1)
                _mve_set_only_element(1, 0);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 1);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 2);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 3);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 4);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 5);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 6);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 7);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 8);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 9);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 10);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 11);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 12);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 13);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 14);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 15);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_all_elements(1);

                output_addr += 16 * M;

                mve_flusher();
                n += 16;
            }

            if (n + 8 <= N) {
                // Second Dim: N
                _mve_set_dim_length(1, 8);
            }

            while (n + 8 <= N) {

                // Loading bias - Dim1.length = 8 - Dim0.length = 8, Stride: 0 (dim0) and 1 (dim1)
                __mdvdw acc_v = _mve_set1_dw(0);
                _mve_set_only_element(1, 0);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 1);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 2);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 3);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 4);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 5);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 6);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 7);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_all_elements(1);

                bias_addr += 8;

                input_addr = in;
                int32_t *weight_addr_tmp = weight_addr;
                weight_addr += 8 * K;

                for (int k = 0; k < K; k++) {

                    // Loading input - Dim1.length = 8 - Dim0.length = 8, Stride: 1 (dim0) and 0 (dim1)
                    // Loading weight - Dim1.length = 8 - Dim0.length = 8, Stride: 0 (dim0) and 3 (K) (dim1)
                    __mdvdw input_v = _mve_set1_dw(0);
                    __mdvdw weight_v = _mve_set1_dw(0);
                    _mve_set_only_element(1, 0);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 1);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 2);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 3);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 4);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 5);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 6);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 7);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_all_elements(1);

                    input_addr += M;
                    weight_addr_tmp += 1;

                    __mdvdw mult_v = _mve_mul_dw(input_v, weight_v);

                    acc_v = _mve_add_dw(acc_v, mult_v);
                }

                // Caculating Min and Max

                // R4 = R2 min R1
                acc_v = _mve_min_dw(acc_v, max_v);
                acc_v = _mve_max_dw(acc_v, min_v);

                // Storing the results, Stride: 1 (dim0) and 3 (M) (dim1)
                _mve_set_only_element(1, 0);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 1);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 2);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 3);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 4);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 5);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 6);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 7);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_all_elements(1);

                output_addr += 8 * M;

                mve_flusher();
                n += 8;
            }

            if (n + 4 <= N) {
                // Second Dim: N
                _mve_set_dim_length(1, 4);
            }

            while (n + 4 <= N) {

                // Loading bias - Dim1.length = 4 - Dim0.length = 8, Stride: 0 (dim0) and 1 (dim1)
                __mdvdw acc_v = _mve_set1_dw(0);
                _mve_set_only_element(1, 0);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 1);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 2);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 3);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_all_elements(1);

                bias_addr += 4;

                input_addr = in;
                int32_t *weight_addr_tmp = weight_addr;
                weight_addr += 4 * K;

                for (int k = 0; k < K; k++) {

                    // Loading input - Dim1.length = 4 - Dim0.length = 8, Stride: 1 (dim0) and 0 (dim1)
                    // Loading weight - Dim1.length = 4 - Dim0.length = 8, Stride: 0 (dim0) and 3 (K) (dim1)
                    __mdvdw input_v = _mve_set1_dw(0);
                    __mdvdw weight_v = _mve_set1_dw(0);
                    _mve_set_only_element(1, 0);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 1);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 2);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 3);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_all_elements(1);

                    input_addr += M;
                    weight_addr_tmp += 1;

                    __mdvdw mult_v = _mve_mul_dw(input_v, weight_v);

                    acc_v = _mve_add_dw(acc_v, mult_v);
                }

                // Caculating Min and Max

                // R4 = R2 min R1
                acc_v = _mve_min_dw(acc_v, max_v);
                acc_v = _mve_max_dw(acc_v, min_v);

                // Storing the results, Stride: 1 (dim0) and 3 (M) (dim1)
                _mve_set_only_element(1, 0);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 1);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 2);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 3);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_all_elements(1);

                output_addr += 4 * M;

                mve_flusher();
                n += 4;
            }

            if (n + 2 <= N) {
                // Second Dim: N
                _mve_set_dim_length(1, 2);
            }

            while (n + 2 <= N) {

                // Loading bias - Dim1.length = 2 - Dim0.length = 8, Stride: 0 (dim0) and 1 (dim1)
                __mdvdw acc_v = _mve_set1_dw(0);
                _mve_set_only_element(1, 0);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 1);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_all_elements(1);

                bias_addr += 2;

                input_addr = in;
                int32_t *weight_addr_tmp = weight_addr;
                weight_addr += 2 * K;

                for (int k = 0; k < K; k++) {

                    // Loading input - Dim1.length = 2 - Dim0.length = 8, Stride: 1 (dim0) and 0 (dim1)
                    // Loading weight - Dim1.length = 2 - Dim0.length = 8, Stride: 0 (dim0) and 3 (K) (dim1)
                    __mdvdw input_v = _mve_set1_dw(0);
                    __mdvdw weight_v = _mve_set1_dw(0);
                    _mve_set_only_element(1, 0);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 1);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_all_elements(1);

                    input_addr += M;
                    weight_addr_tmp += 1;

                    __mdvdw mult_v = _mve_mul_dw(input_v, weight_v);

                    acc_v = _mve_add_dw(acc_v, mult_v);
                }

                // Caculating Min and Max

                // R4 = R2 min R1
                acc_v = _mve_min_dw(acc_v, max_v);
                acc_v = _mve_max_dw(acc_v, min_v);

                // Storing the results, Stride: 1 (dim0) and 3 (M) (dim1)
                _mve_set_only_element(1, 0);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 1);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_all_elements(1);

                output_addr += 2 * M;

                mve_flusher();
                n += 2;
            }

            if (n + 1 <= N) {
                // Second Dim: N
                _mve_set_dim_length(1, 1);
            }

            while (n + 1 <= N) {

                // Loading bias - Dim1.length = 1 - Dim0.length = 8, Stride: 0 (dim0) and 1 (dim1)
                __mdvdw acc_v = _mve_set1_dw(0);
                _mve_set_only_element(1, 0);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_all_elements(1);

                bias_addr += 1;

                input_addr = in;
                int32_t *weight_addr_tmp = weight_addr;
                weight_addr += 1 * K;

                for (int k = 0; k < K; k++) {

                    // Loading input - Dim1.length = 1 - Dim0.length = 8, Stride: 1 (dim0) and 0 (dim1)
                    // Loading weight - Dim1.length = 1 - Dim0.length = 8, Stride: 0 (dim0) and 3 (K) (dim1)
                    __mdvdw input_v = _mve_set1_dw(0);
                    __mdvdw weight_v = _mve_set1_dw(0);
                    _mve_set_only_element(1, 0);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_all_elements(1);

                    input_addr += M;
                    weight_addr_tmp += 1;

                    __mdvdw mult_v = _mve_mul_dw(input_v, weight_v);

                    acc_v = _mve_add_dw(acc_v, mult_v);
                }

                // Caculating Min and Max

                // R4 = R2 min R1
                acc_v = _mve_min_dw(acc_v, max_v);
                acc_v = _mve_max_dw(acc_v, min_v);

                // Storing the results, Stride: 1 (dim0) and 3 (M) (dim1)
                _mve_set_only_element(1, 0);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_all_elements(1);

                output_addr += 1 * M;

                mve_flusher();
                n += 1;
            }

            in += 8;
            out += 8;
            m += 8;
        }
        if (M > m) {
            _mve_set_dim_length(0, M - m);

            int n_per_iter = 32 * (int)(32 / (M - m));

            bias_addr = bias;
            weight_addr = weights;
            output_addr = out;

            int n = 0;

            while (n < N) {

                int curr_n_per_iter = (N - n) < n_per_iter ? (N - n) : n_per_iter;

                _mve_set_dim_length(1, curr_n_per_iter);

                // Loading bias - Dim1.length = curr_n_per_iter - Dim0.length = (M - m), Stride: 0 (dim0) and 1 (dim1)
                __mdvdw acc_v = _mve_set1_dw(0);
                for (int n_idx = 0; n_idx < curr_n_per_iter; n_idx++) {
                    _mve_set_only_element(1, n_idx);
                    acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                }
                _mve_set_all_elements(1);

                bias_addr += curr_n_per_iter;

                input_addr = in;
                int32_t *weight_addr_tmp = weight_addr;
                weight_addr += curr_n_per_iter * K;

                for (int k = 0; k < K; k++) {

                    // Loading input - Dim1.length = curr_n_per_iter - Dim0.length = (M - m), Stride: 1 (dim0) and 0 (dim1)
                    // Loading weight - Dim1.length = curr_n_per_iter - Dim0.length = (M - m), Stride: 0 (dim0) and 3 (K) (dim1)
                    __mdvdw input_v = _mve_set1_dw(0);
                    __mdvdw weight_v = _mve_set1_dw(0);
                    for (int n_idx = 0; n_idx < curr_n_per_iter; n_idx++) {
                        _mve_set_only_element(1, n_idx);
                        input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                        weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    }
                    _mve_set_all_elements(1);

                    input_addr += M;
                    weight_addr_tmp += 1;

                    __mdvdw mult_v = _mve_mul_dw(input_v, weight_v);

                    acc_v = _mve_add_dw(acc_v, mult_v);

                    // replace R3 and R2 for acc_v
                }

                // Caculating Min and Max

                // R4 = R2 min R1
                acc_v = _mve_min_dw(acc_v, max_v);
                acc_v = _mve_max_dw(acc_v, min_v);

                // Storing the results, Stride: 1 (dim0), 3 or M (dim1)
                for (int n_idx = 0; n_idx < curr_n_per_iter; n_idx++) {
                    _mve_set_only_element(1, n_idx);
                    _mve_store_dw(output_addr, acc_v, output_stride);
                }
                _mve_set_all_elements(1);

                output_addr += curr_n_per_iter * M;

                mve_flusher();
                n += curr_n_per_iter;
            }
        }
    } else if (LANE_NUM == 512) {
        if (m + 512 <= M) {
            // First Dim: M
            _mve_set_dim_length(0, 512);
        }
        while (m + 512 <= M) {

            bias_addr = bias;
            weight_addr = weights;
            output_addr = out;

            int n = 0;

            if (n + 1 <= N) {
                // Second Dim: N
                _mve_set_dim_length(1, 1);
            }

            while (n + 1 <= N) {

                // Loading bias - Dim1.length = 1 - Dim0.length = 512, Stride: 0 (dim0) and 1 (dim1)
                __mdvdw acc_v = _mve_set1_dw(0);
                _mve_set_only_element(1, 0);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_all_elements(1);

                bias_addr += 1;

                input_addr = in;
                int32_t *weight_addr_tmp = weight_addr;
                weight_addr += 1 * K;

                for (int k = 0; k < K; k++) {

                    // Loading input - Dim1.length = 1 - Dim0.length = 512, Stride: 1 (dim0) and 0 (dim1)
                    // Loading weight - Dim1.length = 1 - Dim0.length = 512, Stride: 0 (dim0) and 3 (K) (dim1)
                    __mdvdw input_v = _mve_set1_dw(0);
                    __mdvdw weight_v = _mve_set1_dw(0);
                    _mve_set_only_element(1, 0);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_all_elements(1);

                    input_addr += M;
                    weight_addr_tmp += 1;

                    __mdvdw mult_v = _mve_mul_dw(input_v, weight_v);

                    acc_v = _mve_add_dw(acc_v, mult_v);
                }

                // Caculating Min and Max

                // R4 = R2 min R1
                acc_v = _mve_min_dw(acc_v, max_v);
                acc_v = _mve_max_dw(acc_v, min_v);

                // Storing the results, Stride: 1 (dim0) and 3 (M) (dim1)
                _mve_set_only_element(1, 0);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_all_elements(1);

                output_addr += 1 * M;

                mve_flusher();
                n += 1;
            }

            in += 512;
            out += 512;
            m += 512;
        }
        if (m + 256 <= M) {
            // First Dim: M
            _mve_set_dim_length(0, 256);
        }
        while (m + 256 <= M) {

            bias_addr = bias;
            weight_addr = weights;
            output_addr = out;

            int n = 0;

            if (n + 2 <= N) {
                // Second Dim: N
                _mve_set_dim_length(1, 2);
            }

            while (n + 2 <= N) {

                // Loading bias - Dim1.length = 2 - Dim0.length = 256, Stride: 0 (dim0) and 1 (dim1)
                __mdvdw acc_v = _mve_set1_dw(0);
                _mve_set_only_element(1, 0);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 1);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_all_elements(1);

                bias_addr += 2;

                input_addr = in;
                int32_t *weight_addr_tmp = weight_addr;
                weight_addr += 2 * K;

                for (int k = 0; k < K; k++) {

                    // Loading input - Dim1.length = 2 - Dim0.length = 256, Stride: 1 (dim0) and 0 (dim1)
                    // Loading weight - Dim1.length = 2 - Dim0.length = 256, Stride: 0 (dim0) and 3 (K) (dim1)
                    __mdvdw input_v = _mve_set1_dw(0);
                    __mdvdw weight_v = _mve_set1_dw(0);
                    _mve_set_only_element(1, 0);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 1);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_all_elements(1);

                    input_addr += M;
                    weight_addr_tmp += 1;

                    __mdvdw mult_v = _mve_mul_dw(input_v, weight_v);

                    acc_v = _mve_add_dw(acc_v, mult_v);
                }

                // Caculating Min and Max

                // R4 = R2 min R1
                acc_v = _mve_min_dw(acc_v, max_v);
                acc_v = _mve_max_dw(acc_v, min_v);

                // Storing the results, Stride: 1 (dim0) and 3 (M) (dim1)
                _mve_set_only_element(1, 0);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 1);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_all_elements(1);

                output_addr += 2 * M;

                mve_flusher();
                n += 2;
            }

            if (n + 1 <= N) {
                // Second Dim: N
                _mve_set_dim_length(1, 1);
            }

            while (n + 1 <= N) {

                // Loading bias - Dim1.length = 1 - Dim0.length = 256, Stride: 0 (dim0) and 1 (dim1)
                __mdvdw acc_v = _mve_set1_dw(0);
                _mve_set_only_element(1, 0);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_all_elements(1);

                bias_addr += 1;

                input_addr = in;
                int32_t *weight_addr_tmp = weight_addr;
                weight_addr += 1 * K;

                for (int k = 0; k < K; k++) {

                    // Loading input - Dim1.length = 1 - Dim0.length = 256, Stride: 1 (dim0) and 0 (dim1)
                    // Loading weight - Dim1.length = 1 - Dim0.length = 256, Stride: 0 (dim0) and 3 (K) (dim1)
                    __mdvdw input_v = _mve_set1_dw(0);
                    __mdvdw weight_v = _mve_set1_dw(0);
                    _mve_set_only_element(1, 0);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_all_elements(1);

                    input_addr += M;
                    weight_addr_tmp += 1;

                    __mdvdw mult_v = _mve_mul_dw(input_v, weight_v);

                    acc_v = _mve_add_dw(acc_v, mult_v);
                }

                // Caculating Min and Max

                // R4 = R2 min R1
                acc_v = _mve_min_dw(acc_v, max_v);
                acc_v = _mve_max_dw(acc_v, min_v);

                // Storing the results, Stride: 1 (dim0) and 3 (M) (dim1)
                _mve_set_only_element(1, 0);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_all_elements(1);

                output_addr += 1 * M;

                mve_flusher();
                n += 1;
            }

            in += 256;
            out += 256;
            m += 256;
        }
        if (m + 128 <= M) {
            // First Dim: M
            _mve_set_dim_length(0, 128);
        }
        while (m + 128 <= M) {

            bias_addr = bias;
            weight_addr = weights;
            output_addr = out;

            int n = 0;

            if (n + 4 <= N) {
                // Second Dim: N
                _mve_set_dim_length(1, 4);
            }

            while (n + 4 <= N) {

                // Loading bias - Dim1.length = 4 - Dim0.length = 128, Stride: 0 (dim0) and 1 (dim1)
                __mdvdw acc_v = _mve_set1_dw(0);
                _mve_set_only_element(1, 0);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 1);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 2);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 3);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_all_elements(1);

                bias_addr += 4;

                input_addr = in;
                int32_t *weight_addr_tmp = weight_addr;
                weight_addr += 4 * K;

                for (int k = 0; k < K; k++) {

                    // Loading input - Dim1.length = 4 - Dim0.length = 128, Stride: 1 (dim0) and 0 (dim1)
                    // Loading weight - Dim1.length = 4 - Dim0.length = 128, Stride: 0 (dim0) and 3 (K) (dim1)
                    __mdvdw input_v = _mve_set1_dw(0);
                    __mdvdw weight_v = _mve_set1_dw(0);
                    _mve_set_only_element(1, 0);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 1);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 2);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 3);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_all_elements(1);

                    input_addr += M;
                    weight_addr_tmp += 1;

                    __mdvdw mult_v = _mve_mul_dw(input_v, weight_v);

                    acc_v = _mve_add_dw(acc_v, mult_v);
                }

                // Caculating Min and Max

                // R4 = R2 min R1
                acc_v = _mve_min_dw(acc_v, max_v);
                acc_v = _mve_max_dw(acc_v, min_v);

                // Storing the results, Stride: 1 (dim0) and 3 (M) (dim1)
                _mve_set_only_element(1, 0);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 1);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 2);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 3);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_all_elements(1);

                output_addr += 4 * M;

                mve_flusher();
                n += 4;
            }

            if (n + 2 <= N) {
                // Second Dim: N
                _mve_set_dim_length(1, 2);
            }

            while (n + 2 <= N) {

                // Loading bias - Dim1.length = 2 - Dim0.length = 128, Stride: 0 (dim0) and 1 (dim1)
                __mdvdw acc_v = _mve_set1_dw(0);
                _mve_set_only_element(1, 0);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 1);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_all_elements(1);

                bias_addr += 2;

                input_addr = in;
                int32_t *weight_addr_tmp = weight_addr;
                weight_addr += 2 * K;

                for (int k = 0; k < K; k++) {

                    // Loading input - Dim1.length = 2 - Dim0.length = 128, Stride: 1 (dim0) and 0 (dim1)
                    // Loading weight - Dim1.length = 2 - Dim0.length = 128, Stride: 0 (dim0) and 3 (K) (dim1)
                    __mdvdw input_v = _mve_set1_dw(0);
                    __mdvdw weight_v = _mve_set1_dw(0);
                    _mve_set_only_element(1, 0);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 1);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_all_elements(1);

                    input_addr += M;
                    weight_addr_tmp += 1;

                    __mdvdw mult_v = _mve_mul_dw(input_v, weight_v);

                    acc_v = _mve_add_dw(acc_v, mult_v);
                }

                // Caculating Min and Max

                // R4 = R2 min R1
                acc_v = _mve_min_dw(acc_v, max_v);
                acc_v = _mve_max_dw(acc_v, min_v);

                // Storing the results, Stride: 1 (dim0) and 3 (M) (dim1)
                _mve_set_only_element(1, 0);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 1);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_all_elements(1);

                output_addr += 2 * M;

                mve_flusher();
                n += 2;
            }

            if (n + 1 <= N) {
                // Second Dim: N
                _mve_set_dim_length(1, 1);
            }

            while (n + 1 <= N) {

                // Loading bias - Dim1.length = 1 - Dim0.length = 128, Stride: 0 (dim0) and 1 (dim1)
                __mdvdw acc_v = _mve_set1_dw(0);
                _mve_set_only_element(1, 0);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_all_elements(1);

                bias_addr += 1;

                input_addr = in;
                int32_t *weight_addr_tmp = weight_addr;
                weight_addr += 1 * K;

                for (int k = 0; k < K; k++) {

                    // Loading input - Dim1.length = 1 - Dim0.length = 128, Stride: 1 (dim0) and 0 (dim1)
                    // Loading weight - Dim1.length = 1 - Dim0.length = 128, Stride: 0 (dim0) and 3 (K) (dim1)
                    __mdvdw input_v = _mve_set1_dw(0);
                    __mdvdw weight_v = _mve_set1_dw(0);
                    _mve_set_only_element(1, 0);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_all_elements(1);

                    input_addr += M;
                    weight_addr_tmp += 1;

                    __mdvdw mult_v = _mve_mul_dw(input_v, weight_v);

                    acc_v = _mve_add_dw(acc_v, mult_v);
                }

                // Caculating Min and Max

                // R4 = R2 min R1
                acc_v = _mve_min_dw(acc_v, max_v);
                acc_v = _mve_max_dw(acc_v, min_v);

                // Storing the results, Stride: 1 (dim0) and 3 (M) (dim1)
                _mve_set_only_element(1, 0);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_all_elements(1);

                output_addr += 1 * M;

                mve_flusher();
                n += 1;
            }

            in += 128;
            out += 128;
            m += 128;
        }
        if (m + 64 <= M) {
            // First Dim: M
            _mve_set_dim_length(0, 64);
        }
        while (m + 64 <= M) {

            bias_addr = bias;
            weight_addr = weights;
            output_addr = out;

            int n = 0;

            if (n + 8 <= N) {
                // Second Dim: N
                _mve_set_dim_length(1, 8);
            }

            while (n + 8 <= N) {

                // Loading bias - Dim1.length = 8 - Dim0.length = 64, Stride: 0 (dim0) and 1 (dim1)
                __mdvdw acc_v = _mve_set1_dw(0);
                _mve_set_only_element(1, 0);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 1);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 2);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 3);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 4);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 5);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 6);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 7);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_all_elements(1);

                bias_addr += 8;

                input_addr = in;
                int32_t *weight_addr_tmp = weight_addr;
                weight_addr += 8 * K;

                for (int k = 0; k < K; k++) {

                    // Loading input - Dim1.length = 8 - Dim0.length = 64, Stride: 1 (dim0) and 0 (dim1)
                    // Loading weight - Dim1.length = 8 - Dim0.length = 64, Stride: 0 (dim0) and 3 (K) (dim1)
                    __mdvdw input_v = _mve_set1_dw(0);
                    __mdvdw weight_v = _mve_set1_dw(0);
                    _mve_set_only_element(1, 0);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 1);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 2);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 3);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 4);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 5);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 6);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 7);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_all_elements(1);

                    input_addr += M;
                    weight_addr_tmp += 1;

                    __mdvdw mult_v = _mve_mul_dw(input_v, weight_v);

                    acc_v = _mve_add_dw(acc_v, mult_v);
                }

                // Caculating Min and Max

                // R4 = R2 min R1
                acc_v = _mve_min_dw(acc_v, max_v);
                acc_v = _mve_max_dw(acc_v, min_v);

                // Storing the results, Stride: 1 (dim0) and 3 (M) (dim1)
                _mve_set_only_element(1, 0);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 1);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 2);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 3);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 4);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 5);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 6);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 7);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_all_elements(1);

                output_addr += 8 * M;

                mve_flusher();
                n += 8;
            }

            if (n + 4 <= N) {
                // Second Dim: N
                _mve_set_dim_length(1, 4);
            }

            while (n + 4 <= N) {

                // Loading bias - Dim1.length = 4 - Dim0.length = 64, Stride: 0 (dim0) and 1 (dim1)
                __mdvdw acc_v = _mve_set1_dw(0);
                _mve_set_only_element(1, 0);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 1);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 2);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 3);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_all_elements(1);

                bias_addr += 4;

                input_addr = in;
                int32_t *weight_addr_tmp = weight_addr;
                weight_addr += 4 * K;

                for (int k = 0; k < K; k++) {

                    // Loading input - Dim1.length = 4 - Dim0.length = 64, Stride: 1 (dim0) and 0 (dim1)
                    // Loading weight - Dim1.length = 4 - Dim0.length = 64, Stride: 0 (dim0) and 3 (K) (dim1)
                    __mdvdw input_v = _mve_set1_dw(0);
                    __mdvdw weight_v = _mve_set1_dw(0);
                    _mve_set_only_element(1, 0);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 1);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 2);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 3);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_all_elements(1);

                    input_addr += M;
                    weight_addr_tmp += 1;

                    __mdvdw mult_v = _mve_mul_dw(input_v, weight_v);

                    acc_v = _mve_add_dw(acc_v, mult_v);
                }

                // Caculating Min and Max

                // R4 = R2 min R1
                acc_v = _mve_min_dw(acc_v, max_v);
                acc_v = _mve_max_dw(acc_v, min_v);

                // Storing the results, Stride: 1 (dim0) and 3 (M) (dim1)
                _mve_set_only_element(1, 0);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 1);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 2);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 3);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_all_elements(1);

                output_addr += 4 * M;

                mve_flusher();
                n += 4;
            }

            if (n + 2 <= N) {
                // Second Dim: N
                _mve_set_dim_length(1, 2);
            }

            while (n + 2 <= N) {

                // Loading bias - Dim1.length = 2 - Dim0.length = 64, Stride: 0 (dim0) and 1 (dim1)
                __mdvdw acc_v = _mve_set1_dw(0);
                _mve_set_only_element(1, 0);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 1);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_all_elements(1);

                bias_addr += 2;

                input_addr = in;
                int32_t *weight_addr_tmp = weight_addr;
                weight_addr += 2 * K;

                for (int k = 0; k < K; k++) {

                    // Loading input - Dim1.length = 2 - Dim0.length = 64, Stride: 1 (dim0) and 0 (dim1)
                    // Loading weight - Dim1.length = 2 - Dim0.length = 64, Stride: 0 (dim0) and 3 (K) (dim1)
                    __mdvdw input_v = _mve_set1_dw(0);
                    __mdvdw weight_v = _mve_set1_dw(0);
                    _mve_set_only_element(1, 0);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 1);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_all_elements(1);

                    input_addr += M;
                    weight_addr_tmp += 1;

                    __mdvdw mult_v = _mve_mul_dw(input_v, weight_v);

                    acc_v = _mve_add_dw(acc_v, mult_v);
                }

                // Caculating Min and Max

                // R4 = R2 min R1
                acc_v = _mve_min_dw(acc_v, max_v);
                acc_v = _mve_max_dw(acc_v, min_v);

                // Storing the results, Stride: 1 (dim0) and 3 (M) (dim1)
                _mve_set_only_element(1, 0);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 1);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_all_elements(1);

                output_addr += 2 * M;

                mve_flusher();
                n += 2;
            }

            if (n + 1 <= N) {
                // Second Dim: N
                _mve_set_dim_length(1, 1);
            }

            while (n + 1 <= N) {

                // Loading bias - Dim1.length = 1 - Dim0.length = 64, Stride: 0 (dim0) and 1 (dim1)
                __mdvdw acc_v = _mve_set1_dw(0);
                _mve_set_only_element(1, 0);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_all_elements(1);

                bias_addr += 1;

                input_addr = in;
                int32_t *weight_addr_tmp = weight_addr;
                weight_addr += 1 * K;

                for (int k = 0; k < K; k++) {

                    // Loading input - Dim1.length = 1 - Dim0.length = 64, Stride: 1 (dim0) and 0 (dim1)
                    // Loading weight - Dim1.length = 1 - Dim0.length = 64, Stride: 0 (dim0) and 3 (K) (dim1)
                    __mdvdw input_v = _mve_set1_dw(0);
                    __mdvdw weight_v = _mve_set1_dw(0);
                    _mve_set_only_element(1, 0);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_all_elements(1);

                    input_addr += M;
                    weight_addr_tmp += 1;

                    __mdvdw mult_v = _mve_mul_dw(input_v, weight_v);

                    acc_v = _mve_add_dw(acc_v, mult_v);
                }

                // Caculating Min and Max

                // R4 = R2 min R1
                acc_v = _mve_min_dw(acc_v, max_v);
                acc_v = _mve_max_dw(acc_v, min_v);

                // Storing the results, Stride: 1 (dim0) and 3 (M) (dim1)
                _mve_set_only_element(1, 0);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_all_elements(1);

                output_addr += 1 * M;

                mve_flusher();
                n += 1;
            }

            in += 64;
            out += 64;
            m += 64;
        }
        if (m + 32 <= M) {
            // First Dim: M
            _mve_set_dim_length(0, 32);
        }
        while (m + 32 <= M) {

            bias_addr = bias;
            weight_addr = weights;
            output_addr = out;

            int n = 0;

            if (n + 16 <= N) {
                // Second Dim: N
                _mve_set_dim_length(1, 16);
            }

            while (n + 16 <= N) {

                // Loading bias - Dim1.length = 16 - Dim0.length = 32, Stride: 0 (dim0) and 1 (dim1)
                __mdvdw acc_v = _mve_set1_dw(0);
                _mve_set_only_element(1, 0);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 1);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 2);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 3);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 4);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 5);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 6);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 7);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 8);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 9);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 10);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 11);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 12);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 13);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 14);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 15);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_all_elements(1);

                bias_addr += 16;

                input_addr = in;
                int32_t *weight_addr_tmp = weight_addr;
                weight_addr += 16 * K;

                for (int k = 0; k < K; k++) {

                    // Loading input - Dim1.length = 16 - Dim0.length = 32, Stride: 1 (dim0) and 0 (dim1)
                    // Loading weight - Dim1.length = 16 - Dim0.length = 32, Stride: 0 (dim0) and 3 (K) (dim1)
                    __mdvdw input_v = _mve_set1_dw(0);
                    __mdvdw weight_v = _mve_set1_dw(0);
                    _mve_set_only_element(1, 0);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 1);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 2);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 3);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 4);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 5);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 6);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 7);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 8);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 9);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 10);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 11);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 12);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 13);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 14);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 15);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_all_elements(1);

                    input_addr += M;
                    weight_addr_tmp += 1;

                    __mdvdw mult_v = _mve_mul_dw(input_v, weight_v);

                    acc_v = _mve_add_dw(acc_v, mult_v);
                }

                // Caculating Min and Max

                // R4 = R2 min R1
                acc_v = _mve_min_dw(acc_v, max_v);
                acc_v = _mve_max_dw(acc_v, min_v);

                // Storing the results, Stride: 1 (dim0) and 3 (M) (dim1)
                _mve_set_only_element(1, 0);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 1);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 2);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 3);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 4);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 5);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 6);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 7);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 8);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 9);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 10);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 11);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 12);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 13);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 14);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 15);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_all_elements(1);

                output_addr += 16 * M;

                mve_flusher();
                n += 16;
            }

            if (n + 8 <= N) {
                // Second Dim: N
                _mve_set_dim_length(1, 8);
            }

            while (n + 8 <= N) {

                // Loading bias - Dim1.length = 8 - Dim0.length = 32, Stride: 0 (dim0) and 1 (dim1)
                __mdvdw acc_v = _mve_set1_dw(0);
                _mve_set_only_element(1, 0);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 1);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 2);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 3);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 4);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 5);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 6);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 7);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_all_elements(1);

                bias_addr += 8;

                input_addr = in;
                int32_t *weight_addr_tmp = weight_addr;
                weight_addr += 8 * K;

                for (int k = 0; k < K; k++) {

                    // Loading input - Dim1.length = 8 - Dim0.length = 32, Stride: 1 (dim0) and 0 (dim1)
                    // Loading weight - Dim1.length = 8 - Dim0.length = 32, Stride: 0 (dim0) and 3 (K) (dim1)
                    __mdvdw input_v = _mve_set1_dw(0);
                    __mdvdw weight_v = _mve_set1_dw(0);
                    _mve_set_only_element(1, 0);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 1);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 2);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 3);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 4);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 5);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 6);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 7);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_all_elements(1);

                    input_addr += M;
                    weight_addr_tmp += 1;

                    __mdvdw mult_v = _mve_mul_dw(input_v, weight_v);

                    acc_v = _mve_add_dw(acc_v, mult_v);
                }

                // Caculating Min and Max

                // R4 = R2 min R1
                acc_v = _mve_min_dw(acc_v, max_v);
                acc_v = _mve_max_dw(acc_v, min_v);

                // Storing the results, Stride: 1 (dim0) and 3 (M) (dim1)
                _mve_set_only_element(1, 0);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 1);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 2);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 3);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 4);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 5);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 6);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 7);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_all_elements(1);

                output_addr += 8 * M;

                mve_flusher();
                n += 8;
            }

            if (n + 4 <= N) {
                // Second Dim: N
                _mve_set_dim_length(1, 4);
            }

            while (n + 4 <= N) {

                // Loading bias - Dim1.length = 4 - Dim0.length = 32, Stride: 0 (dim0) and 1 (dim1)
                __mdvdw acc_v = _mve_set1_dw(0);
                _mve_set_only_element(1, 0);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 1);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 2);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 3);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_all_elements(1);

                bias_addr += 4;

                input_addr = in;
                int32_t *weight_addr_tmp = weight_addr;
                weight_addr += 4 * K;

                for (int k = 0; k < K; k++) {

                    // Loading input - Dim1.length = 4 - Dim0.length = 32, Stride: 1 (dim0) and 0 (dim1)
                    // Loading weight - Dim1.length = 4 - Dim0.length = 32, Stride: 0 (dim0) and 3 (K) (dim1)
                    __mdvdw input_v = _mve_set1_dw(0);
                    __mdvdw weight_v = _mve_set1_dw(0);
                    _mve_set_only_element(1, 0);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 1);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 2);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 3);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_all_elements(1);

                    input_addr += M;
                    weight_addr_tmp += 1;

                    __mdvdw mult_v = _mve_mul_dw(input_v, weight_v);

                    acc_v = _mve_add_dw(acc_v, mult_v);
                }

                // Caculating Min and Max

                // R4 = R2 min R1
                acc_v = _mve_min_dw(acc_v, max_v);
                acc_v = _mve_max_dw(acc_v, min_v);

                // Storing the results, Stride: 1 (dim0) and 3 (M) (dim1)
                _mve_set_only_element(1, 0);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 1);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 2);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 3);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_all_elements(1);

                output_addr += 4 * M;

                mve_flusher();
                n += 4;
            }

            if (n + 2 <= N) {
                // Second Dim: N
                _mve_set_dim_length(1, 2);
            }

            while (n + 2 <= N) {

                // Loading bias - Dim1.length = 2 - Dim0.length = 32, Stride: 0 (dim0) and 1 (dim1)
                __mdvdw acc_v = _mve_set1_dw(0);
                _mve_set_only_element(1, 0);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 1);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_all_elements(1);

                bias_addr += 2;

                input_addr = in;
                int32_t *weight_addr_tmp = weight_addr;
                weight_addr += 2 * K;

                for (int k = 0; k < K; k++) {

                    // Loading input - Dim1.length = 2 - Dim0.length = 32, Stride: 1 (dim0) and 0 (dim1)
                    // Loading weight - Dim1.length = 2 - Dim0.length = 32, Stride: 0 (dim0) and 3 (K) (dim1)
                    __mdvdw input_v = _mve_set1_dw(0);
                    __mdvdw weight_v = _mve_set1_dw(0);
                    _mve_set_only_element(1, 0);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 1);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_all_elements(1);

                    input_addr += M;
                    weight_addr_tmp += 1;

                    __mdvdw mult_v = _mve_mul_dw(input_v, weight_v);

                    acc_v = _mve_add_dw(acc_v, mult_v);
                }

                // Caculating Min and Max

                // R4 = R2 min R1
                acc_v = _mve_min_dw(acc_v, max_v);
                acc_v = _mve_max_dw(acc_v, min_v);

                // Storing the results, Stride: 1 (dim0) and 3 (M) (dim1)
                _mve_set_only_element(1, 0);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 1);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_all_elements(1);

                output_addr += 2 * M;

                mve_flusher();
                n += 2;
            }

            if (n + 1 <= N) {
                // Second Dim: N
                _mve_set_dim_length(1, 1);
            }

            while (n + 1 <= N) {

                // Loading bias - Dim1.length = 1 - Dim0.length = 32, Stride: 0 (dim0) and 1 (dim1)
                __mdvdw acc_v = _mve_set1_dw(0);
                _mve_set_only_element(1, 0);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_all_elements(1);

                bias_addr += 1;

                input_addr = in;
                int32_t *weight_addr_tmp = weight_addr;
                weight_addr += 1 * K;

                for (int k = 0; k < K; k++) {

                    // Loading input - Dim1.length = 1 - Dim0.length = 32, Stride: 1 (dim0) and 0 (dim1)
                    // Loading weight - Dim1.length = 1 - Dim0.length = 32, Stride: 0 (dim0) and 3 (K) (dim1)
                    __mdvdw input_v = _mve_set1_dw(0);
                    __mdvdw weight_v = _mve_set1_dw(0);
                    _mve_set_only_element(1, 0);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_all_elements(1);

                    input_addr += M;
                    weight_addr_tmp += 1;

                    __mdvdw mult_v = _mve_mul_dw(input_v, weight_v);

                    acc_v = _mve_add_dw(acc_v, mult_v);
                }

                // Caculating Min and Max

                // R4 = R2 min R1
                acc_v = _mve_min_dw(acc_v, max_v);
                acc_v = _mve_max_dw(acc_v, min_v);

                // Storing the results, Stride: 1 (dim0) and 3 (M) (dim1)
                _mve_set_only_element(1, 0);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_all_elements(1);

                output_addr += 1 * M;

                mve_flusher();
                n += 1;
            }

            in += 32;
            out += 32;
            m += 32;
        }
        if (m + 16 <= M) {
            // First Dim: M
            _mve_set_dim_length(0, 16);
        }
        while (m + 16 <= M) {

            bias_addr = bias;
            weight_addr = weights;
            output_addr = out;

            int n = 0;

            if (n + 32 <= N) {
                // Second Dim: N
                _mve_set_dim_length(1, 32);
            }

            while (n + 32 <= N) {

                // Loading bias - Dim1.length = 32 - Dim0.length = 16, Stride: 0 (dim0) and 1 (dim1)
                __mdvdw acc_v = _mve_set1_dw(0);
                _mve_set_only_element(1, 0);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 1);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 2);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 3);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 4);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 5);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 6);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 7);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 8);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 9);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 10);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 11);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 12);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 13);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 14);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 15);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 16);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 17);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 18);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 19);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 20);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 21);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 22);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 23);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 24);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 25);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 26);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 27);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 28);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 29);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 30);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 31);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_all_elements(1);

                bias_addr += 32;

                input_addr = in;
                int32_t *weight_addr_tmp = weight_addr;
                weight_addr += 32 * K;

                for (int k = 0; k < K; k++) {

                    // Loading input - Dim1.length = 32 - Dim0.length = 16, Stride: 1 (dim0) and 0 (dim1)
                    // Loading weight - Dim1.length = 32 - Dim0.length = 16, Stride: 0 (dim0) and 3 (K) (dim1)
                    __mdvdw input_v = _mve_set1_dw(0);
                    __mdvdw weight_v = _mve_set1_dw(0);
                    _mve_set_only_element(1, 0);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 1);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 2);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 3);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 4);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 5);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 6);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 7);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 8);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 9);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 10);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 11);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 12);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 13);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 14);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 15);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 16);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 17);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 18);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 19);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 20);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 21);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 22);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 23);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 24);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 25);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 26);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 27);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 28);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 29);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 30);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 31);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_all_elements(1);

                    input_addr += M;
                    weight_addr_tmp += 1;

                    __mdvdw mult_v = _mve_mul_dw(input_v, weight_v);

                    acc_v = _mve_add_dw(acc_v, mult_v);
                }

                // Caculating Min and Max

                // R4 = R2 min R1
                acc_v = _mve_min_dw(acc_v, max_v);
                acc_v = _mve_max_dw(acc_v, min_v);

                // Storing the results, Stride: 1 (dim0) and 3 (M) (dim1)
                _mve_set_only_element(1, 0);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 1);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 2);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 3);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 4);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 5);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 6);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 7);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 8);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 9);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 10);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 11);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 12);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 13);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 14);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 15);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 16);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 17);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 18);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 19);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 20);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 21);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 22);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 23);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 24);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 25);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 26);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 27);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 28);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 29);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 30);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 31);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_all_elements(1);

                output_addr += 32 * M;

                mve_flusher();
                n += 32;
            }

            if (n + 16 <= N) {
                // Second Dim: N
                _mve_set_dim_length(1, 16);
            }

            while (n + 16 <= N) {

                // Loading bias - Dim1.length = 16 - Dim0.length = 16, Stride: 0 (dim0) and 1 (dim1)
                __mdvdw acc_v = _mve_set1_dw(0);
                _mve_set_only_element(1, 0);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 1);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 2);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 3);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 4);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 5);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 6);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 7);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 8);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 9);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 10);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 11);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 12);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 13);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 14);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 15);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_all_elements(1);

                bias_addr += 16;

                input_addr = in;
                int32_t *weight_addr_tmp = weight_addr;
                weight_addr += 16 * K;

                for (int k = 0; k < K; k++) {

                    // Loading input - Dim1.length = 16 - Dim0.length = 16, Stride: 1 (dim0) and 0 (dim1)
                    // Loading weight - Dim1.length = 16 - Dim0.length = 16, Stride: 0 (dim0) and 3 (K) (dim1)
                    __mdvdw input_v = _mve_set1_dw(0);
                    __mdvdw weight_v = _mve_set1_dw(0);
                    _mve_set_only_element(1, 0);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 1);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 2);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 3);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 4);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 5);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 6);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 7);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 8);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 9);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 10);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 11);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 12);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 13);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 14);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 15);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_all_elements(1);

                    input_addr += M;
                    weight_addr_tmp += 1;

                    __mdvdw mult_v = _mve_mul_dw(input_v, weight_v);

                    acc_v = _mve_add_dw(acc_v, mult_v);
                }

                // Caculating Min and Max

                // R4 = R2 min R1
                acc_v = _mve_min_dw(acc_v, max_v);
                acc_v = _mve_max_dw(acc_v, min_v);

                // Storing the results, Stride: 1 (dim0) and 3 (M) (dim1)
                _mve_set_only_element(1, 0);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 1);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 2);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 3);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 4);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 5);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 6);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 7);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 8);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 9);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 10);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 11);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 12);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 13);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 14);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 15);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_all_elements(1);

                output_addr += 16 * M;

                mve_flusher();
                n += 16;
            }

            if (n + 8 <= N) {
                // Second Dim: N
                _mve_set_dim_length(1, 8);
            }

            while (n + 8 <= N) {

                // Loading bias - Dim1.length = 8 - Dim0.length = 16, Stride: 0 (dim0) and 1 (dim1)
                __mdvdw acc_v = _mve_set1_dw(0);
                _mve_set_only_element(1, 0);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 1);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 2);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 3);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 4);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 5);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 6);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 7);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_all_elements(1);

                bias_addr += 8;

                input_addr = in;
                int32_t *weight_addr_tmp = weight_addr;
                weight_addr += 8 * K;

                for (int k = 0; k < K; k++) {

                    // Loading input - Dim1.length = 8 - Dim0.length = 16, Stride: 1 (dim0) and 0 (dim1)
                    // Loading weight - Dim1.length = 8 - Dim0.length = 16, Stride: 0 (dim0) and 3 (K) (dim1)
                    __mdvdw input_v = _mve_set1_dw(0);
                    __mdvdw weight_v = _mve_set1_dw(0);
                    _mve_set_only_element(1, 0);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 1);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 2);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 3);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 4);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 5);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 6);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 7);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_all_elements(1);

                    input_addr += M;
                    weight_addr_tmp += 1;

                    __mdvdw mult_v = _mve_mul_dw(input_v, weight_v);

                    acc_v = _mve_add_dw(acc_v, mult_v);
                }

                // Caculating Min and Max

                // R4 = R2 min R1
                acc_v = _mve_min_dw(acc_v, max_v);
                acc_v = _mve_max_dw(acc_v, min_v);

                // Storing the results, Stride: 1 (dim0) and 3 (M) (dim1)
                _mve_set_only_element(1, 0);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 1);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 2);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 3);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 4);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 5);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 6);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 7);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_all_elements(1);

                output_addr += 8 * M;

                mve_flusher();
                n += 8;
            }

            if (n + 4 <= N) {
                // Second Dim: N
                _mve_set_dim_length(1, 4);
            }

            while (n + 4 <= N) {

                // Loading bias - Dim1.length = 4 - Dim0.length = 16, Stride: 0 (dim0) and 1 (dim1)
                __mdvdw acc_v = _mve_set1_dw(0);
                _mve_set_only_element(1, 0);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 1);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 2);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 3);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_all_elements(1);

                bias_addr += 4;

                input_addr = in;
                int32_t *weight_addr_tmp = weight_addr;
                weight_addr += 4 * K;

                for (int k = 0; k < K; k++) {

                    // Loading input - Dim1.length = 4 - Dim0.length = 16, Stride: 1 (dim0) and 0 (dim1)
                    // Loading weight - Dim1.length = 4 - Dim0.length = 16, Stride: 0 (dim0) and 3 (K) (dim1)
                    __mdvdw input_v = _mve_set1_dw(0);
                    __mdvdw weight_v = _mve_set1_dw(0);
                    _mve_set_only_element(1, 0);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 1);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 2);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 3);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_all_elements(1);

                    input_addr += M;
                    weight_addr_tmp += 1;

                    __mdvdw mult_v = _mve_mul_dw(input_v, weight_v);

                    acc_v = _mve_add_dw(acc_v, mult_v);
                }

                // Caculating Min and Max

                // R4 = R2 min R1
                acc_v = _mve_min_dw(acc_v, max_v);
                acc_v = _mve_max_dw(acc_v, min_v);

                // Storing the results, Stride: 1 (dim0) and 3 (M) (dim1)
                _mve_set_only_element(1, 0);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 1);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 2);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 3);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_all_elements(1);

                output_addr += 4 * M;

                mve_flusher();
                n += 4;
            }

            if (n + 2 <= N) {
                // Second Dim: N
                _mve_set_dim_length(1, 2);
            }

            while (n + 2 <= N) {

                // Loading bias - Dim1.length = 2 - Dim0.length = 16, Stride: 0 (dim0) and 1 (dim1)
                __mdvdw acc_v = _mve_set1_dw(0);
                _mve_set_only_element(1, 0);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 1);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_all_elements(1);

                bias_addr += 2;

                input_addr = in;
                int32_t *weight_addr_tmp = weight_addr;
                weight_addr += 2 * K;

                for (int k = 0; k < K; k++) {

                    // Loading input - Dim1.length = 2 - Dim0.length = 16, Stride: 1 (dim0) and 0 (dim1)
                    // Loading weight - Dim1.length = 2 - Dim0.length = 16, Stride: 0 (dim0) and 3 (K) (dim1)
                    __mdvdw input_v = _mve_set1_dw(0);
                    __mdvdw weight_v = _mve_set1_dw(0);
                    _mve_set_only_element(1, 0);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 1);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_all_elements(1);

                    input_addr += M;
                    weight_addr_tmp += 1;

                    __mdvdw mult_v = _mve_mul_dw(input_v, weight_v);

                    acc_v = _mve_add_dw(acc_v, mult_v);
                }

                // Caculating Min and Max

                // R4 = R2 min R1
                acc_v = _mve_min_dw(acc_v, max_v);
                acc_v = _mve_max_dw(acc_v, min_v);

                // Storing the results, Stride: 1 (dim0) and 3 (M) (dim1)
                _mve_set_only_element(1, 0);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 1);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_all_elements(1);

                output_addr += 2 * M;

                mve_flusher();
                n += 2;
            }

            if (n + 1 <= N) {
                // Second Dim: N
                _mve_set_dim_length(1, 1);
            }

            while (n + 1 <= N) {

                // Loading bias - Dim1.length = 1 - Dim0.length = 16, Stride: 0 (dim0) and 1 (dim1)
                __mdvdw acc_v = _mve_set1_dw(0);
                _mve_set_only_element(1, 0);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_all_elements(1);

                bias_addr += 1;

                input_addr = in;
                int32_t *weight_addr_tmp = weight_addr;
                weight_addr += 1 * K;

                for (int k = 0; k < K; k++) {

                    // Loading input - Dim1.length = 1 - Dim0.length = 16, Stride: 1 (dim0) and 0 (dim1)
                    // Loading weight - Dim1.length = 1 - Dim0.length = 16, Stride: 0 (dim0) and 3 (K) (dim1)
                    __mdvdw input_v = _mve_set1_dw(0);
                    __mdvdw weight_v = _mve_set1_dw(0);
                    _mve_set_only_element(1, 0);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_all_elements(1);

                    input_addr += M;
                    weight_addr_tmp += 1;

                    __mdvdw mult_v = _mve_mul_dw(input_v, weight_v);

                    acc_v = _mve_add_dw(acc_v, mult_v);
                }

                // Caculating Min and Max

                // R4 = R2 min R1
                acc_v = _mve_min_dw(acc_v, max_v);
                acc_v = _mve_max_dw(acc_v, min_v);

                // Storing the results, Stride: 1 (dim0) and 3 (M) (dim1)
                _mve_set_only_element(1, 0);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_all_elements(1);

                output_addr += 1 * M;

                mve_flusher();
                n += 1;
            }

            in += 16;
            out += 16;
            m += 16;
        }
        if (m + 8 <= M) {
            // First Dim: M
            _mve_set_dim_length(0, 8);
        }
        while (m + 8 <= M) {

            bias_addr = bias;
            weight_addr = weights;
            output_addr = out;

            int n = 0;

            if (n + 64 <= N) {
                // Second Dim: N
                _mve_set_dim_length(1, 64);
            }

            while (n + 64 <= N) {

                // Loading bias - Dim1.length = 64 - Dim0.length = 8, Stride: 0 (dim0) and 1 (dim1)
                __mdvdw acc_v = _mve_set1_dw(0);
                _mve_set_only_element(1, 0);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 1);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 2);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 3);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 4);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 5);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 6);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 7);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 8);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 9);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 10);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 11);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 12);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 13);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 14);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 15);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 16);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 17);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 18);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 19);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 20);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 21);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 22);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 23);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 24);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 25);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 26);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 27);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 28);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 29);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 30);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 31);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 32);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 33);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 34);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 35);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 36);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 37);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 38);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 39);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 40);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 41);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 42);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 43);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 44);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 45);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 46);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 47);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 48);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 49);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 50);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 51);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 52);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 53);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 54);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 55);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 56);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 57);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 58);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 59);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 60);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 61);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 62);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 63);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_all_elements(1);

                bias_addr += 64;

                input_addr = in;
                int32_t *weight_addr_tmp = weight_addr;
                weight_addr += 64 * K;

                for (int k = 0; k < K; k++) {

                    // Loading input - Dim1.length = 64 - Dim0.length = 8, Stride: 1 (dim0) and 0 (dim1)
                    // Loading weight - Dim1.length = 64 - Dim0.length = 8, Stride: 0 (dim0) and 3 (K) (dim1)
                    __mdvdw input_v = _mve_set1_dw(0);
                    __mdvdw weight_v = _mve_set1_dw(0);
                    _mve_set_only_element(1, 0);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 1);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 2);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 3);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 4);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 5);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 6);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 7);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 8);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 9);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 10);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 11);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 12);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 13);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 14);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 15);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 16);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 17);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 18);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 19);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 20);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 21);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 22);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 23);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 24);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 25);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 26);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 27);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 28);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 29);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 30);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 31);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 32);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 33);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 34);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 35);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 36);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 37);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 38);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 39);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 40);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 41);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 42);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 43);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 44);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 45);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 46);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 47);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 48);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 49);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 50);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 51);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 52);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 53);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 54);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 55);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 56);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 57);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 58);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 59);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 60);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 61);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 62);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 63);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_all_elements(1);

                    input_addr += M;
                    weight_addr_tmp += 1;

                    __mdvdw mult_v = _mve_mul_dw(input_v, weight_v);

                    acc_v = _mve_add_dw(acc_v, mult_v);
                }

                // Caculating Min and Max

                // R4 = R2 min R1
                acc_v = _mve_min_dw(acc_v, max_v);
                acc_v = _mve_max_dw(acc_v, min_v);

                // Storing the results, Stride: 1 (dim0) and 3 (M) (dim1)
                _mve_set_only_element(1, 0);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 1);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 2);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 3);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 4);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 5);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 6);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 7);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 8);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 9);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 10);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 11);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 12);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 13);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 14);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 15);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 16);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 17);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 18);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 19);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 20);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 21);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 22);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 23);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 24);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 25);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 26);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 27);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 28);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 29);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 30);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 31);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 32);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 33);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 34);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 35);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 36);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 37);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 38);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 39);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 40);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 41);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 42);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 43);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 44);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 45);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 46);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 47);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 48);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 49);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 50);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 51);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 52);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 53);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 54);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 55);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 56);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 57);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 58);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 59);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 60);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 61);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 62);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 63);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_all_elements(1);

                output_addr += 64 * M;

                mve_flusher();
                n += 64;
            }

            if (n + 32 <= N) {
                // Second Dim: N
                _mve_set_dim_length(1, 32);
            }

            while (n + 32 <= N) {

                // Loading bias - Dim1.length = 32 - Dim0.length = 8, Stride: 0 (dim0) and 1 (dim1)
                __mdvdw acc_v = _mve_set1_dw(0);
                _mve_set_only_element(1, 0);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 1);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 2);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 3);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 4);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 5);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 6);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 7);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 8);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 9);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 10);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 11);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 12);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 13);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 14);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 15);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 16);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 17);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 18);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 19);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 20);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 21);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 22);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 23);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 24);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 25);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 26);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 27);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 28);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 29);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 30);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 31);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_all_elements(1);

                bias_addr += 32;

                input_addr = in;
                int32_t *weight_addr_tmp = weight_addr;
                weight_addr += 32 * K;

                for (int k = 0; k < K; k++) {

                    // Loading input - Dim1.length = 32 - Dim0.length = 8, Stride: 1 (dim0) and 0 (dim1)
                    // Loading weight - Dim1.length = 32 - Dim0.length = 8, Stride: 0 (dim0) and 3 (K) (dim1)
                    __mdvdw input_v = _mve_set1_dw(0);
                    __mdvdw weight_v = _mve_set1_dw(0);
                    _mve_set_only_element(1, 0);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 1);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 2);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 3);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 4);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 5);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 6);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 7);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 8);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 9);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 10);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 11);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 12);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 13);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 14);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 15);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 16);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 17);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 18);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 19);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 20);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 21);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 22);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 23);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 24);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 25);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 26);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 27);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 28);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 29);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 30);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 31);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_all_elements(1);

                    input_addr += M;
                    weight_addr_tmp += 1;

                    __mdvdw mult_v = _mve_mul_dw(input_v, weight_v);

                    acc_v = _mve_add_dw(acc_v, mult_v);
                }

                // Caculating Min and Max

                // R4 = R2 min R1
                acc_v = _mve_min_dw(acc_v, max_v);
                acc_v = _mve_max_dw(acc_v, min_v);

                // Storing the results, Stride: 1 (dim0) and 3 (M) (dim1)
                _mve_set_only_element(1, 0);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 1);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 2);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 3);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 4);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 5);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 6);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 7);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 8);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 9);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 10);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 11);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 12);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 13);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 14);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 15);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 16);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 17);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 18);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 19);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 20);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 21);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 22);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 23);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 24);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 25);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 26);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 27);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 28);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 29);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 30);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 31);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_all_elements(1);

                output_addr += 32 * M;

                mve_flusher();
                n += 32;
            }

            if (n + 16 <= N) {
                // Second Dim: N
                _mve_set_dim_length(1, 16);
            }

            while (n + 16 <= N) {

                // Loading bias - Dim1.length = 16 - Dim0.length = 8, Stride: 0 (dim0) and 1 (dim1)
                __mdvdw acc_v = _mve_set1_dw(0);
                _mve_set_only_element(1, 0);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 1);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 2);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 3);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 4);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 5);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 6);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 7);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 8);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 9);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 10);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 11);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 12);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 13);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 14);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 15);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_all_elements(1);

                bias_addr += 16;

                input_addr = in;
                int32_t *weight_addr_tmp = weight_addr;
                weight_addr += 16 * K;

                for (int k = 0; k < K; k++) {

                    // Loading input - Dim1.length = 16 - Dim0.length = 8, Stride: 1 (dim0) and 0 (dim1)
                    // Loading weight - Dim1.length = 16 - Dim0.length = 8, Stride: 0 (dim0) and 3 (K) (dim1)
                    __mdvdw input_v = _mve_set1_dw(0);
                    __mdvdw weight_v = _mve_set1_dw(0);
                    _mve_set_only_element(1, 0);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 1);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 2);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 3);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 4);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 5);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 6);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 7);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 8);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 9);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 10);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 11);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 12);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 13);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 14);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 15);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_all_elements(1);

                    input_addr += M;
                    weight_addr_tmp += 1;

                    __mdvdw mult_v = _mve_mul_dw(input_v, weight_v);

                    acc_v = _mve_add_dw(acc_v, mult_v);
                }

                // Caculating Min and Max

                // R4 = R2 min R1
                acc_v = _mve_min_dw(acc_v, max_v);
                acc_v = _mve_max_dw(acc_v, min_v);

                // Storing the results, Stride: 1 (dim0) and 3 (M) (dim1)
                _mve_set_only_element(1, 0);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 1);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 2);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 3);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 4);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 5);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 6);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 7);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 8);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 9);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 10);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 11);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 12);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 13);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 14);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 15);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_all_elements(1);

                output_addr += 16 * M;

                mve_flusher();
                n += 16;
            }

            if (n + 8 <= N) {
                // Second Dim: N
                _mve_set_dim_length(1, 8);
            }

            while (n + 8 <= N) {

                // Loading bias - Dim1.length = 8 - Dim0.length = 8, Stride: 0 (dim0) and 1 (dim1)
                __mdvdw acc_v = _mve_set1_dw(0);
                _mve_set_only_element(1, 0);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 1);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 2);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 3);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 4);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 5);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 6);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 7);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_all_elements(1);

                bias_addr += 8;

                input_addr = in;
                int32_t *weight_addr_tmp = weight_addr;
                weight_addr += 8 * K;

                for (int k = 0; k < K; k++) {

                    // Loading input - Dim1.length = 8 - Dim0.length = 8, Stride: 1 (dim0) and 0 (dim1)
                    // Loading weight - Dim1.length = 8 - Dim0.length = 8, Stride: 0 (dim0) and 3 (K) (dim1)
                    __mdvdw input_v = _mve_set1_dw(0);
                    __mdvdw weight_v = _mve_set1_dw(0);
                    _mve_set_only_element(1, 0);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 1);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 2);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 3);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 4);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 5);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 6);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 7);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_all_elements(1);

                    input_addr += M;
                    weight_addr_tmp += 1;

                    __mdvdw mult_v = _mve_mul_dw(input_v, weight_v);

                    acc_v = _mve_add_dw(acc_v, mult_v);
                }

                // Caculating Min and Max

                // R4 = R2 min R1
                acc_v = _mve_min_dw(acc_v, max_v);
                acc_v = _mve_max_dw(acc_v, min_v);

                // Storing the results, Stride: 1 (dim0) and 3 (M) (dim1)
                _mve_set_only_element(1, 0);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 1);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 2);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 3);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 4);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 5);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 6);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 7);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_all_elements(1);

                output_addr += 8 * M;

                mve_flusher();
                n += 8;
            }

            if (n + 4 <= N) {
                // Second Dim: N
                _mve_set_dim_length(1, 4);
            }

            while (n + 4 <= N) {

                // Loading bias - Dim1.length = 4 - Dim0.length = 8, Stride: 0 (dim0) and 1 (dim1)
                __mdvdw acc_v = _mve_set1_dw(0);
                _mve_set_only_element(1, 0);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 1);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 2);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 3);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_all_elements(1);

                bias_addr += 4;

                input_addr = in;
                int32_t *weight_addr_tmp = weight_addr;
                weight_addr += 4 * K;

                for (int k = 0; k < K; k++) {

                    // Loading input - Dim1.length = 4 - Dim0.length = 8, Stride: 1 (dim0) and 0 (dim1)
                    // Loading weight - Dim1.length = 4 - Dim0.length = 8, Stride: 0 (dim0) and 3 (K) (dim1)
                    __mdvdw input_v = _mve_set1_dw(0);
                    __mdvdw weight_v = _mve_set1_dw(0);
                    _mve_set_only_element(1, 0);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 1);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 2);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 3);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_all_elements(1);

                    input_addr += M;
                    weight_addr_tmp += 1;

                    __mdvdw mult_v = _mve_mul_dw(input_v, weight_v);

                    acc_v = _mve_add_dw(acc_v, mult_v);
                }

                // Caculating Min and Max

                // R4 = R2 min R1
                acc_v = _mve_min_dw(acc_v, max_v);
                acc_v = _mve_max_dw(acc_v, min_v);

                // Storing the results, Stride: 1 (dim0) and 3 (M) (dim1)
                _mve_set_only_element(1, 0);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 1);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 2);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 3);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_all_elements(1);

                output_addr += 4 * M;

                mve_flusher();
                n += 4;
            }

            if (n + 2 <= N) {
                // Second Dim: N
                _mve_set_dim_length(1, 2);
            }

            while (n + 2 <= N) {

                // Loading bias - Dim1.length = 2 - Dim0.length = 8, Stride: 0 (dim0) and 1 (dim1)
                __mdvdw acc_v = _mve_set1_dw(0);
                _mve_set_only_element(1, 0);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 1);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_all_elements(1);

                bias_addr += 2;

                input_addr = in;
                int32_t *weight_addr_tmp = weight_addr;
                weight_addr += 2 * K;

                for (int k = 0; k < K; k++) {

                    // Loading input - Dim1.length = 2 - Dim0.length = 8, Stride: 1 (dim0) and 0 (dim1)
                    // Loading weight - Dim1.length = 2 - Dim0.length = 8, Stride: 0 (dim0) and 3 (K) (dim1)
                    __mdvdw input_v = _mve_set1_dw(0);
                    __mdvdw weight_v = _mve_set1_dw(0);
                    _mve_set_only_element(1, 0);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 1);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_all_elements(1);

                    input_addr += M;
                    weight_addr_tmp += 1;

                    __mdvdw mult_v = _mve_mul_dw(input_v, weight_v);

                    acc_v = _mve_add_dw(acc_v, mult_v);
                }

                // Caculating Min and Max

                // R4 = R2 min R1
                acc_v = _mve_min_dw(acc_v, max_v);
                acc_v = _mve_max_dw(acc_v, min_v);

                // Storing the results, Stride: 1 (dim0) and 3 (M) (dim1)
                _mve_set_only_element(1, 0);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 1);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_all_elements(1);

                output_addr += 2 * M;

                mve_flusher();
                n += 2;
            }

            if (n + 1 <= N) {
                // Second Dim: N
                _mve_set_dim_length(1, 1);
            }

            while (n + 1 <= N) {

                // Loading bias - Dim1.length = 1 - Dim0.length = 8, Stride: 0 (dim0) and 1 (dim1)
                __mdvdw acc_v = _mve_set1_dw(0);
                _mve_set_only_element(1, 0);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_all_elements(1);

                bias_addr += 1;

                input_addr = in;
                int32_t *weight_addr_tmp = weight_addr;
                weight_addr += 1 * K;

                for (int k = 0; k < K; k++) {

                    // Loading input - Dim1.length = 1 - Dim0.length = 8, Stride: 1 (dim0) and 0 (dim1)
                    // Loading weight - Dim1.length = 1 - Dim0.length = 8, Stride: 0 (dim0) and 3 (K) (dim1)
                    __mdvdw input_v = _mve_set1_dw(0);
                    __mdvdw weight_v = _mve_set1_dw(0);
                    _mve_set_only_element(1, 0);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_all_elements(1);

                    input_addr += M;
                    weight_addr_tmp += 1;

                    __mdvdw mult_v = _mve_mul_dw(input_v, weight_v);

                    acc_v = _mve_add_dw(acc_v, mult_v);
                }

                // Caculating Min and Max

                // R4 = R2 min R1
                acc_v = _mve_min_dw(acc_v, max_v);
                acc_v = _mve_max_dw(acc_v, min_v);

                // Storing the results, Stride: 1 (dim0) and 3 (M) (dim1)
                _mve_set_only_element(1, 0);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_all_elements(1);

                output_addr += 1 * M;

                mve_flusher();
                n += 1;
            }

            in += 8;
            out += 8;
            m += 8;
        }
        if (M > m) {
            _mve_set_dim_length(0, M - m);

            int n_per_iter = 32 * (int)(16 / (M - m));

            bias_addr = bias;
            weight_addr = weights;
            output_addr = out;

            int n = 0;

            while (n < N) {

                int curr_n_per_iter = (N - n) < n_per_iter ? (N - n) : n_per_iter;

                _mve_set_dim_length(1, curr_n_per_iter);

                // Loading bias - Dim1.length = curr_n_per_iter - Dim0.length = (M - m), Stride: 0 (dim0) and 1 (dim1)
                __mdvdw acc_v = _mve_set1_dw(0);
                for (int n_idx = 0; n_idx < curr_n_per_iter; n_idx++) {
                    _mve_set_only_element(1, n_idx);
                    acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                }
                _mve_set_all_elements(1);

                bias_addr += curr_n_per_iter;

                input_addr = in;
                int32_t *weight_addr_tmp = weight_addr;
                weight_addr += curr_n_per_iter * K;

                for (int k = 0; k < K; k++) {

                    // Loading input - Dim1.length = curr_n_per_iter - Dim0.length = (M - m), Stride: 1 (dim0) and 0 (dim1)
                    // Loading weight - Dim1.length = curr_n_per_iter - Dim0.length = (M - m), Stride: 0 (dim0) and 3 (K) (dim1)
                    __mdvdw input_v = _mve_set1_dw(0);
                    __mdvdw weight_v = _mve_set1_dw(0);
                    for (int n_idx = 0; n_idx < curr_n_per_iter; n_idx++) {
                        _mve_set_only_element(1, n_idx);
                        input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                        weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    }
                    _mve_set_all_elements(1);

                    input_addr += M;
                    weight_addr_tmp += 1;

                    __mdvdw mult_v = _mve_mul_dw(input_v, weight_v);

                    acc_v = _mve_add_dw(acc_v, mult_v);

                    // replace R3 and R2 for acc_v
                }

                // Caculating Min and Max

                // R4 = R2 min R1
                acc_v = _mve_min_dw(acc_v, max_v);
                acc_v = _mve_max_dw(acc_v, min_v);

                // Storing the results, Stride: 1 (dim0), 3 or M (dim1)
                for (int n_idx = 0; n_idx < curr_n_per_iter; n_idx++) {
                    _mve_set_only_element(1, n_idx);
                    _mve_store_dw(output_addr, acc_v, output_stride);
                }
                _mve_set_all_elements(1);

                output_addr += curr_n_per_iter * M;

                mve_flusher();
                n += curr_n_per_iter;
            }
        }
    } else if (LANE_NUM == 256) {
        if (m + 256 <= M) {
            // First Dim: M
            _mve_set_dim_length(0, 256);
        }
        while (m + 256 <= M) {

            bias_addr = bias;
            weight_addr = weights;
            output_addr = out;

            int n = 0;

            if (n + 1 <= N) {
                // Second Dim: N
                _mve_set_dim_length(1, 1);
            }

            while (n + 1 <= N) {

                // Loading bias - Dim1.length = 1 - Dim0.length = 256, Stride: 0 (dim0) and 1 (dim1)
                __mdvdw acc_v = _mve_set1_dw(0);
                _mve_set_only_element(1, 0);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_all_elements(1);

                bias_addr += 1;

                input_addr = in;
                int32_t *weight_addr_tmp = weight_addr;
                weight_addr += 1 * K;

                for (int k = 0; k < K; k++) {

                    // Loading input - Dim1.length = 1 - Dim0.length = 256, Stride: 1 (dim0) and 0 (dim1)
                    // Loading weight - Dim1.length = 1 - Dim0.length = 256, Stride: 0 (dim0) and 3 (K) (dim1)
                    __mdvdw input_v = _mve_set1_dw(0);
                    __mdvdw weight_v = _mve_set1_dw(0);
                    _mve_set_only_element(1, 0);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_all_elements(1);

                    input_addr += M;
                    weight_addr_tmp += 1;

                    __mdvdw mult_v = _mve_mul_dw(input_v, weight_v);

                    acc_v = _mve_add_dw(acc_v, mult_v);
                }

                // Caculating Min and Max

                // R4 = R2 min R1
                acc_v = _mve_min_dw(acc_v, max_v);
                acc_v = _mve_max_dw(acc_v, min_v);

                // Storing the results, Stride: 1 (dim0) and 3 (M) (dim1)
                _mve_set_only_element(1, 0);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_all_elements(1);

                output_addr += 1 * M;

                mve_flusher();
                n += 1;
            }

            in += 256;
            out += 256;
            m += 256;
        }
        if (m + 128 <= M) {
            // First Dim: M
            _mve_set_dim_length(0, 128);
        }
        while (m + 128 <= M) {

            bias_addr = bias;
            weight_addr = weights;
            output_addr = out;

            int n = 0;

            if (n + 2 <= N) {
                // Second Dim: N
                _mve_set_dim_length(1, 2);
            }

            while (n + 2 <= N) {

                // Loading bias - Dim1.length = 2 - Dim0.length = 128, Stride: 0 (dim0) and 1 (dim1)
                __mdvdw acc_v = _mve_set1_dw(0);
                _mve_set_only_element(1, 0);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 1);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_all_elements(1);

                bias_addr += 2;

                input_addr = in;
                int32_t *weight_addr_tmp = weight_addr;
                weight_addr += 2 * K;

                for (int k = 0; k < K; k++) {

                    // Loading input - Dim1.length = 2 - Dim0.length = 128, Stride: 1 (dim0) and 0 (dim1)
                    // Loading weight - Dim1.length = 2 - Dim0.length = 128, Stride: 0 (dim0) and 3 (K) (dim1)
                    __mdvdw input_v = _mve_set1_dw(0);
                    __mdvdw weight_v = _mve_set1_dw(0);
                    _mve_set_only_element(1, 0);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 1);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_all_elements(1);

                    input_addr += M;
                    weight_addr_tmp += 1;

                    __mdvdw mult_v = _mve_mul_dw(input_v, weight_v);

                    acc_v = _mve_add_dw(acc_v, mult_v);
                }

                // Caculating Min and Max

                // R4 = R2 min R1
                acc_v = _mve_min_dw(acc_v, max_v);
                acc_v = _mve_max_dw(acc_v, min_v);

                // Storing the results, Stride: 1 (dim0) and 3 (M) (dim1)
                _mve_set_only_element(1, 0);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 1);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_all_elements(1);

                output_addr += 2 * M;

                mve_flusher();
                n += 2;
            }

            if (n + 1 <= N) {
                // Second Dim: N
                _mve_set_dim_length(1, 1);
            }

            while (n + 1 <= N) {

                // Loading bias - Dim1.length = 1 - Dim0.length = 128, Stride: 0 (dim0) and 1 (dim1)
                __mdvdw acc_v = _mve_set1_dw(0);
                _mve_set_only_element(1, 0);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_all_elements(1);

                bias_addr += 1;

                input_addr = in;
                int32_t *weight_addr_tmp = weight_addr;
                weight_addr += 1 * K;

                for (int k = 0; k < K; k++) {

                    // Loading input - Dim1.length = 1 - Dim0.length = 128, Stride: 1 (dim0) and 0 (dim1)
                    // Loading weight - Dim1.length = 1 - Dim0.length = 128, Stride: 0 (dim0) and 3 (K) (dim1)
                    __mdvdw input_v = _mve_set1_dw(0);
                    __mdvdw weight_v = _mve_set1_dw(0);
                    _mve_set_only_element(1, 0);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_all_elements(1);

                    input_addr += M;
                    weight_addr_tmp += 1;

                    __mdvdw mult_v = _mve_mul_dw(input_v, weight_v);

                    acc_v = _mve_add_dw(acc_v, mult_v);
                }

                // Caculating Min and Max

                // R4 = R2 min R1
                acc_v = _mve_min_dw(acc_v, max_v);
                acc_v = _mve_max_dw(acc_v, min_v);

                // Storing the results, Stride: 1 (dim0) and 3 (M) (dim1)
                _mve_set_only_element(1, 0);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_all_elements(1);

                output_addr += 1 * M;

                mve_flusher();
                n += 1;
            }

            in += 128;
            out += 128;
            m += 128;
        }
        if (m + 64 <= M) {
            // First Dim: M
            _mve_set_dim_length(0, 64);
        }
        while (m + 64 <= M) {

            bias_addr = bias;
            weight_addr = weights;
            output_addr = out;

            int n = 0;

            if (n + 4 <= N) {
                // Second Dim: N
                _mve_set_dim_length(1, 4);
            }

            while (n + 4 <= N) {

                // Loading bias - Dim1.length = 4 - Dim0.length = 64, Stride: 0 (dim0) and 1 (dim1)
                __mdvdw acc_v = _mve_set1_dw(0);
                _mve_set_only_element(1, 0);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 1);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 2);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 3);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_all_elements(1);

                bias_addr += 4;

                input_addr = in;
                int32_t *weight_addr_tmp = weight_addr;
                weight_addr += 4 * K;

                for (int k = 0; k < K; k++) {

                    // Loading input - Dim1.length = 4 - Dim0.length = 64, Stride: 1 (dim0) and 0 (dim1)
                    // Loading weight - Dim1.length = 4 - Dim0.length = 64, Stride: 0 (dim0) and 3 (K) (dim1)
                    __mdvdw input_v = _mve_set1_dw(0);
                    __mdvdw weight_v = _mve_set1_dw(0);
                    _mve_set_only_element(1, 0);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 1);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 2);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 3);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_all_elements(1);

                    input_addr += M;
                    weight_addr_tmp += 1;

                    __mdvdw mult_v = _mve_mul_dw(input_v, weight_v);

                    acc_v = _mve_add_dw(acc_v, mult_v);
                }

                // Caculating Min and Max

                // R4 = R2 min R1
                acc_v = _mve_min_dw(acc_v, max_v);
                acc_v = _mve_max_dw(acc_v, min_v);

                // Storing the results, Stride: 1 (dim0) and 3 (M) (dim1)
                _mve_set_only_element(1, 0);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 1);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 2);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 3);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_all_elements(1);

                output_addr += 4 * M;

                mve_flusher();
                n += 4;
            }

            if (n + 2 <= N) {
                // Second Dim: N
                _mve_set_dim_length(1, 2);
            }

            while (n + 2 <= N) {

                // Loading bias - Dim1.length = 2 - Dim0.length = 64, Stride: 0 (dim0) and 1 (dim1)
                __mdvdw acc_v = _mve_set1_dw(0);
                _mve_set_only_element(1, 0);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 1);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_all_elements(1);

                bias_addr += 2;

                input_addr = in;
                int32_t *weight_addr_tmp = weight_addr;
                weight_addr += 2 * K;

                for (int k = 0; k < K; k++) {

                    // Loading input - Dim1.length = 2 - Dim0.length = 64, Stride: 1 (dim0) and 0 (dim1)
                    // Loading weight - Dim1.length = 2 - Dim0.length = 64, Stride: 0 (dim0) and 3 (K) (dim1)
                    __mdvdw input_v = _mve_set1_dw(0);
                    __mdvdw weight_v = _mve_set1_dw(0);
                    _mve_set_only_element(1, 0);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 1);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_all_elements(1);

                    input_addr += M;
                    weight_addr_tmp += 1;

                    __mdvdw mult_v = _mve_mul_dw(input_v, weight_v);

                    acc_v = _mve_add_dw(acc_v, mult_v);
                }

                // Caculating Min and Max

                // R4 = R2 min R1
                acc_v = _mve_min_dw(acc_v, max_v);
                acc_v = _mve_max_dw(acc_v, min_v);

                // Storing the results, Stride: 1 (dim0) and 3 (M) (dim1)
                _mve_set_only_element(1, 0);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 1);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_all_elements(1);

                output_addr += 2 * M;

                mve_flusher();
                n += 2;
            }

            if (n + 1 <= N) {
                // Second Dim: N
                _mve_set_dim_length(1, 1);
            }

            while (n + 1 <= N) {

                // Loading bias - Dim1.length = 1 - Dim0.length = 64, Stride: 0 (dim0) and 1 (dim1)
                __mdvdw acc_v = _mve_set1_dw(0);
                _mve_set_only_element(1, 0);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_all_elements(1);

                bias_addr += 1;

                input_addr = in;
                int32_t *weight_addr_tmp = weight_addr;
                weight_addr += 1 * K;

                for (int k = 0; k < K; k++) {

                    // Loading input - Dim1.length = 1 - Dim0.length = 64, Stride: 1 (dim0) and 0 (dim1)
                    // Loading weight - Dim1.length = 1 - Dim0.length = 64, Stride: 0 (dim0) and 3 (K) (dim1)
                    __mdvdw input_v = _mve_set1_dw(0);
                    __mdvdw weight_v = _mve_set1_dw(0);
                    _mve_set_only_element(1, 0);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_all_elements(1);

                    input_addr += M;
                    weight_addr_tmp += 1;

                    __mdvdw mult_v = _mve_mul_dw(input_v, weight_v);

                    acc_v = _mve_add_dw(acc_v, mult_v);
                }

                // Caculating Min and Max

                // R4 = R2 min R1
                acc_v = _mve_min_dw(acc_v, max_v);
                acc_v = _mve_max_dw(acc_v, min_v);

                // Storing the results, Stride: 1 (dim0) and 3 (M) (dim1)
                _mve_set_only_element(1, 0);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_all_elements(1);

                output_addr += 1 * M;

                mve_flusher();
                n += 1;
            }

            in += 64;
            out += 64;
            m += 64;
        }
        if (m + 32 <= M) {
            // First Dim: M
            _mve_set_dim_length(0, 32);
        }
        while (m + 32 <= M) {

            bias_addr = bias;
            weight_addr = weights;
            output_addr = out;

            int n = 0;

            if (n + 8 <= N) {
                // Second Dim: N
                _mve_set_dim_length(1, 8);
            }

            while (n + 8 <= N) {

                // Loading bias - Dim1.length = 8 - Dim0.length = 32, Stride: 0 (dim0) and 1 (dim1)
                __mdvdw acc_v = _mve_set1_dw(0);
                _mve_set_only_element(1, 0);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 1);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 2);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 3);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 4);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 5);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 6);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 7);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_all_elements(1);

                bias_addr += 8;

                input_addr = in;
                int32_t *weight_addr_tmp = weight_addr;
                weight_addr += 8 * K;

                for (int k = 0; k < K; k++) {

                    // Loading input - Dim1.length = 8 - Dim0.length = 32, Stride: 1 (dim0) and 0 (dim1)
                    // Loading weight - Dim1.length = 8 - Dim0.length = 32, Stride: 0 (dim0) and 3 (K) (dim1)
                    __mdvdw input_v = _mve_set1_dw(0);
                    __mdvdw weight_v = _mve_set1_dw(0);
                    _mve_set_only_element(1, 0);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 1);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 2);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 3);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 4);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 5);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 6);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 7);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_all_elements(1);

                    input_addr += M;
                    weight_addr_tmp += 1;

                    __mdvdw mult_v = _mve_mul_dw(input_v, weight_v);

                    acc_v = _mve_add_dw(acc_v, mult_v);
                }

                // Caculating Min and Max

                // R4 = R2 min R1
                acc_v = _mve_min_dw(acc_v, max_v);
                acc_v = _mve_max_dw(acc_v, min_v);

                // Storing the results, Stride: 1 (dim0) and 3 (M) (dim1)
                _mve_set_only_element(1, 0);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 1);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 2);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 3);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 4);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 5);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 6);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 7);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_all_elements(1);

                output_addr += 8 * M;

                mve_flusher();
                n += 8;
            }

            if (n + 4 <= N) {
                // Second Dim: N
                _mve_set_dim_length(1, 4);
            }

            while (n + 4 <= N) {

                // Loading bias - Dim1.length = 4 - Dim0.length = 32, Stride: 0 (dim0) and 1 (dim1)
                __mdvdw acc_v = _mve_set1_dw(0);
                _mve_set_only_element(1, 0);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 1);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 2);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 3);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_all_elements(1);

                bias_addr += 4;

                input_addr = in;
                int32_t *weight_addr_tmp = weight_addr;
                weight_addr += 4 * K;

                for (int k = 0; k < K; k++) {

                    // Loading input - Dim1.length = 4 - Dim0.length = 32, Stride: 1 (dim0) and 0 (dim1)
                    // Loading weight - Dim1.length = 4 - Dim0.length = 32, Stride: 0 (dim0) and 3 (K) (dim1)
                    __mdvdw input_v = _mve_set1_dw(0);
                    __mdvdw weight_v = _mve_set1_dw(0);
                    _mve_set_only_element(1, 0);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 1);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 2);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 3);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_all_elements(1);

                    input_addr += M;
                    weight_addr_tmp += 1;

                    __mdvdw mult_v = _mve_mul_dw(input_v, weight_v);

                    acc_v = _mve_add_dw(acc_v, mult_v);
                }

                // Caculating Min and Max

                // R4 = R2 min R1
                acc_v = _mve_min_dw(acc_v, max_v);
                acc_v = _mve_max_dw(acc_v, min_v);

                // Storing the results, Stride: 1 (dim0) and 3 (M) (dim1)
                _mve_set_only_element(1, 0);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 1);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 2);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 3);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_all_elements(1);

                output_addr += 4 * M;

                mve_flusher();
                n += 4;
            }

            if (n + 2 <= N) {
                // Second Dim: N
                _mve_set_dim_length(1, 2);
            }

            while (n + 2 <= N) {

                // Loading bias - Dim1.length = 2 - Dim0.length = 32, Stride: 0 (dim0) and 1 (dim1)
                __mdvdw acc_v = _mve_set1_dw(0);
                _mve_set_only_element(1, 0);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 1);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_all_elements(1);

                bias_addr += 2;

                input_addr = in;
                int32_t *weight_addr_tmp = weight_addr;
                weight_addr += 2 * K;

                for (int k = 0; k < K; k++) {

                    // Loading input - Dim1.length = 2 - Dim0.length = 32, Stride: 1 (dim0) and 0 (dim1)
                    // Loading weight - Dim1.length = 2 - Dim0.length = 32, Stride: 0 (dim0) and 3 (K) (dim1)
                    __mdvdw input_v = _mve_set1_dw(0);
                    __mdvdw weight_v = _mve_set1_dw(0);
                    _mve_set_only_element(1, 0);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 1);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_all_elements(1);

                    input_addr += M;
                    weight_addr_tmp += 1;

                    __mdvdw mult_v = _mve_mul_dw(input_v, weight_v);

                    acc_v = _mve_add_dw(acc_v, mult_v);
                }

                // Caculating Min and Max

                // R4 = R2 min R1
                acc_v = _mve_min_dw(acc_v, max_v);
                acc_v = _mve_max_dw(acc_v, min_v);

                // Storing the results, Stride: 1 (dim0) and 3 (M) (dim1)
                _mve_set_only_element(1, 0);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 1);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_all_elements(1);

                output_addr += 2 * M;

                mve_flusher();
                n += 2;
            }

            if (n + 1 <= N) {
                // Second Dim: N
                _mve_set_dim_length(1, 1);
            }

            while (n + 1 <= N) {

                // Loading bias - Dim1.length = 1 - Dim0.length = 32, Stride: 0 (dim0) and 1 (dim1)
                __mdvdw acc_v = _mve_set1_dw(0);
                _mve_set_only_element(1, 0);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_all_elements(1);

                bias_addr += 1;

                input_addr = in;
                int32_t *weight_addr_tmp = weight_addr;
                weight_addr += 1 * K;

                for (int k = 0; k < K; k++) {

                    // Loading input - Dim1.length = 1 - Dim0.length = 32, Stride: 1 (dim0) and 0 (dim1)
                    // Loading weight - Dim1.length = 1 - Dim0.length = 32, Stride: 0 (dim0) and 3 (K) (dim1)
                    __mdvdw input_v = _mve_set1_dw(0);
                    __mdvdw weight_v = _mve_set1_dw(0);
                    _mve_set_only_element(1, 0);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_all_elements(1);

                    input_addr += M;
                    weight_addr_tmp += 1;

                    __mdvdw mult_v = _mve_mul_dw(input_v, weight_v);

                    acc_v = _mve_add_dw(acc_v, mult_v);
                }

                // Caculating Min and Max

                // R4 = R2 min R1
                acc_v = _mve_min_dw(acc_v, max_v);
                acc_v = _mve_max_dw(acc_v, min_v);

                // Storing the results, Stride: 1 (dim0) and 3 (M) (dim1)
                _mve_set_only_element(1, 0);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_all_elements(1);

                output_addr += 1 * M;

                mve_flusher();
                n += 1;
            }

            in += 32;
            out += 32;
            m += 32;
        }
        if (m + 16 <= M) {
            // First Dim: M
            _mve_set_dim_length(0, 16);
        }
        while (m + 16 <= M) {

            bias_addr = bias;
            weight_addr = weights;
            output_addr = out;

            int n = 0;

            if (n + 16 <= N) {
                // Second Dim: N
                _mve_set_dim_length(1, 16);
            }

            while (n + 16 <= N) {

                // Loading bias - Dim1.length = 16 - Dim0.length = 16, Stride: 0 (dim0) and 1 (dim1)
                __mdvdw acc_v = _mve_set1_dw(0);
                _mve_set_only_element(1, 0);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 1);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 2);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 3);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 4);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 5);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 6);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 7);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 8);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 9);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 10);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 11);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 12);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 13);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 14);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 15);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_all_elements(1);

                bias_addr += 16;

                input_addr = in;
                int32_t *weight_addr_tmp = weight_addr;
                weight_addr += 16 * K;

                for (int k = 0; k < K; k++) {

                    // Loading input - Dim1.length = 16 - Dim0.length = 16, Stride: 1 (dim0) and 0 (dim1)
                    // Loading weight - Dim1.length = 16 - Dim0.length = 16, Stride: 0 (dim0) and 3 (K) (dim1)
                    __mdvdw input_v = _mve_set1_dw(0);
                    __mdvdw weight_v = _mve_set1_dw(0);
                    _mve_set_only_element(1, 0);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 1);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 2);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 3);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 4);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 5);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 6);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 7);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 8);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 9);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 10);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 11);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 12);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 13);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 14);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 15);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_all_elements(1);

                    input_addr += M;
                    weight_addr_tmp += 1;

                    __mdvdw mult_v = _mve_mul_dw(input_v, weight_v);

                    acc_v = _mve_add_dw(acc_v, mult_v);
                }

                // Caculating Min and Max

                // R4 = R2 min R1
                acc_v = _mve_min_dw(acc_v, max_v);
                acc_v = _mve_max_dw(acc_v, min_v);

                // Storing the results, Stride: 1 (dim0) and 3 (M) (dim1)
                _mve_set_only_element(1, 0);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 1);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 2);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 3);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 4);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 5);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 6);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 7);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 8);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 9);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 10);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 11);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 12);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 13);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 14);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 15);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_all_elements(1);

                output_addr += 16 * M;

                mve_flusher();
                n += 16;
            }

            if (n + 8 <= N) {
                // Second Dim: N
                _mve_set_dim_length(1, 8);
            }

            while (n + 8 <= N) {

                // Loading bias - Dim1.length = 8 - Dim0.length = 16, Stride: 0 (dim0) and 1 (dim1)
                __mdvdw acc_v = _mve_set1_dw(0);
                _mve_set_only_element(1, 0);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 1);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 2);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 3);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 4);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 5);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 6);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 7);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_all_elements(1);

                bias_addr += 8;

                input_addr = in;
                int32_t *weight_addr_tmp = weight_addr;
                weight_addr += 8 * K;

                for (int k = 0; k < K; k++) {

                    // Loading input - Dim1.length = 8 - Dim0.length = 16, Stride: 1 (dim0) and 0 (dim1)
                    // Loading weight - Dim1.length = 8 - Dim0.length = 16, Stride: 0 (dim0) and 3 (K) (dim1)
                    __mdvdw input_v = _mve_set1_dw(0);
                    __mdvdw weight_v = _mve_set1_dw(0);
                    _mve_set_only_element(1, 0);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 1);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 2);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 3);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 4);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 5);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 6);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 7);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_all_elements(1);

                    input_addr += M;
                    weight_addr_tmp += 1;

                    __mdvdw mult_v = _mve_mul_dw(input_v, weight_v);

                    acc_v = _mve_add_dw(acc_v, mult_v);
                }

                // Caculating Min and Max

                // R4 = R2 min R1
                acc_v = _mve_min_dw(acc_v, max_v);
                acc_v = _mve_max_dw(acc_v, min_v);

                // Storing the results, Stride: 1 (dim0) and 3 (M) (dim1)
                _mve_set_only_element(1, 0);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 1);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 2);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 3);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 4);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 5);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 6);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 7);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_all_elements(1);

                output_addr += 8 * M;

                mve_flusher();
                n += 8;
            }

            if (n + 4 <= N) {
                // Second Dim: N
                _mve_set_dim_length(1, 4);
            }

            while (n + 4 <= N) {

                // Loading bias - Dim1.length = 4 - Dim0.length = 16, Stride: 0 (dim0) and 1 (dim1)
                __mdvdw acc_v = _mve_set1_dw(0);
                _mve_set_only_element(1, 0);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 1);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 2);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 3);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_all_elements(1);

                bias_addr += 4;

                input_addr = in;
                int32_t *weight_addr_tmp = weight_addr;
                weight_addr += 4 * K;

                for (int k = 0; k < K; k++) {

                    // Loading input - Dim1.length = 4 - Dim0.length = 16, Stride: 1 (dim0) and 0 (dim1)
                    // Loading weight - Dim1.length = 4 - Dim0.length = 16, Stride: 0 (dim0) and 3 (K) (dim1)
                    __mdvdw input_v = _mve_set1_dw(0);
                    __mdvdw weight_v = _mve_set1_dw(0);
                    _mve_set_only_element(1, 0);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 1);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 2);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 3);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_all_elements(1);

                    input_addr += M;
                    weight_addr_tmp += 1;

                    __mdvdw mult_v = _mve_mul_dw(input_v, weight_v);

                    acc_v = _mve_add_dw(acc_v, mult_v);
                }

                // Caculating Min and Max

                // R4 = R2 min R1
                acc_v = _mve_min_dw(acc_v, max_v);
                acc_v = _mve_max_dw(acc_v, min_v);

                // Storing the results, Stride: 1 (dim0) and 3 (M) (dim1)
                _mve_set_only_element(1, 0);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 1);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 2);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 3);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_all_elements(1);

                output_addr += 4 * M;

                mve_flusher();
                n += 4;
            }

            if (n + 2 <= N) {
                // Second Dim: N
                _mve_set_dim_length(1, 2);
            }

            while (n + 2 <= N) {

                // Loading bias - Dim1.length = 2 - Dim0.length = 16, Stride: 0 (dim0) and 1 (dim1)
                __mdvdw acc_v = _mve_set1_dw(0);
                _mve_set_only_element(1, 0);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 1);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_all_elements(1);

                bias_addr += 2;

                input_addr = in;
                int32_t *weight_addr_tmp = weight_addr;
                weight_addr += 2 * K;

                for (int k = 0; k < K; k++) {

                    // Loading input - Dim1.length = 2 - Dim0.length = 16, Stride: 1 (dim0) and 0 (dim1)
                    // Loading weight - Dim1.length = 2 - Dim0.length = 16, Stride: 0 (dim0) and 3 (K) (dim1)
                    __mdvdw input_v = _mve_set1_dw(0);
                    __mdvdw weight_v = _mve_set1_dw(0);
                    _mve_set_only_element(1, 0);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 1);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_all_elements(1);

                    input_addr += M;
                    weight_addr_tmp += 1;

                    __mdvdw mult_v = _mve_mul_dw(input_v, weight_v);

                    acc_v = _mve_add_dw(acc_v, mult_v);
                }

                // Caculating Min and Max

                // R4 = R2 min R1
                acc_v = _mve_min_dw(acc_v, max_v);
                acc_v = _mve_max_dw(acc_v, min_v);

                // Storing the results, Stride: 1 (dim0) and 3 (M) (dim1)
                _mve_set_only_element(1, 0);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 1);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_all_elements(1);

                output_addr += 2 * M;

                mve_flusher();
                n += 2;
            }

            if (n + 1 <= N) {
                // Second Dim: N
                _mve_set_dim_length(1, 1);
            }

            while (n + 1 <= N) {

                // Loading bias - Dim1.length = 1 - Dim0.length = 16, Stride: 0 (dim0) and 1 (dim1)
                __mdvdw acc_v = _mve_set1_dw(0);
                _mve_set_only_element(1, 0);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_all_elements(1);

                bias_addr += 1;

                input_addr = in;
                int32_t *weight_addr_tmp = weight_addr;
                weight_addr += 1 * K;

                for (int k = 0; k < K; k++) {

                    // Loading input - Dim1.length = 1 - Dim0.length = 16, Stride: 1 (dim0) and 0 (dim1)
                    // Loading weight - Dim1.length = 1 - Dim0.length = 16, Stride: 0 (dim0) and 3 (K) (dim1)
                    __mdvdw input_v = _mve_set1_dw(0);
                    __mdvdw weight_v = _mve_set1_dw(0);
                    _mve_set_only_element(1, 0);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_all_elements(1);

                    input_addr += M;
                    weight_addr_tmp += 1;

                    __mdvdw mult_v = _mve_mul_dw(input_v, weight_v);

                    acc_v = _mve_add_dw(acc_v, mult_v);
                }

                // Caculating Min and Max

                // R4 = R2 min R1
                acc_v = _mve_min_dw(acc_v, max_v);
                acc_v = _mve_max_dw(acc_v, min_v);

                // Storing the results, Stride: 1 (dim0) and 3 (M) (dim1)
                _mve_set_only_element(1, 0);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_all_elements(1);

                output_addr += 1 * M;

                mve_flusher();
                n += 1;
            }

            in += 16;
            out += 16;
            m += 16;
        }
        if (m + 8 <= M) {
            // First Dim: M
            _mve_set_dim_length(0, 8);
        }
        while (m + 8 <= M) {

            bias_addr = bias;
            weight_addr = weights;
            output_addr = out;

            int n = 0;

            if (n + 32 <= N) {
                // Second Dim: N
                _mve_set_dim_length(1, 32);
            }

            while (n + 32 <= N) {

                // Loading bias - Dim1.length = 32 - Dim0.length = 8, Stride: 0 (dim0) and 1 (dim1)
                __mdvdw acc_v = _mve_set1_dw(0);
                _mve_set_only_element(1, 0);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 1);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 2);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 3);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 4);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 5);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 6);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 7);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 8);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 9);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 10);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 11);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 12);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 13);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 14);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 15);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 16);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 17);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 18);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 19);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 20);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 21);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 22);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 23);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 24);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 25);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 26);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 27);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 28);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 29);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 30);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 31);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_all_elements(1);

                bias_addr += 32;

                input_addr = in;
                int32_t *weight_addr_tmp = weight_addr;
                weight_addr += 32 * K;

                for (int k = 0; k < K; k++) {

                    // Loading input - Dim1.length = 32 - Dim0.length = 8, Stride: 1 (dim0) and 0 (dim1)
                    // Loading weight - Dim1.length = 32 - Dim0.length = 8, Stride: 0 (dim0) and 3 (K) (dim1)
                    __mdvdw input_v = _mve_set1_dw(0);
                    __mdvdw weight_v = _mve_set1_dw(0);
                    _mve_set_only_element(1, 0);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 1);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 2);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 3);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 4);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 5);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 6);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 7);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 8);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 9);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 10);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 11);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 12);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 13);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 14);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 15);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 16);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 17);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 18);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 19);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 20);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 21);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 22);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 23);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 24);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 25);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 26);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 27);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 28);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 29);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 30);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 31);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_all_elements(1);

                    input_addr += M;
                    weight_addr_tmp += 1;

                    __mdvdw mult_v = _mve_mul_dw(input_v, weight_v);

                    acc_v = _mve_add_dw(acc_v, mult_v);
                }

                // Caculating Min and Max

                // R4 = R2 min R1
                acc_v = _mve_min_dw(acc_v, max_v);
                acc_v = _mve_max_dw(acc_v, min_v);

                // Storing the results, Stride: 1 (dim0) and 3 (M) (dim1)
                _mve_set_only_element(1, 0);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 1);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 2);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 3);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 4);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 5);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 6);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 7);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 8);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 9);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 10);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 11);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 12);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 13);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 14);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 15);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 16);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 17);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 18);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 19);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 20);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 21);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 22);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 23);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 24);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 25);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 26);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 27);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 28);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 29);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 30);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 31);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_all_elements(1);

                output_addr += 32 * M;

                mve_flusher();
                n += 32;
            }

            if (n + 16 <= N) {
                // Second Dim: N
                _mve_set_dim_length(1, 16);
            }

            while (n + 16 <= N) {

                // Loading bias - Dim1.length = 16 - Dim0.length = 8, Stride: 0 (dim0) and 1 (dim1)
                __mdvdw acc_v = _mve_set1_dw(0);
                _mve_set_only_element(1, 0);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 1);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 2);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 3);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 4);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 5);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 6);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 7);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 8);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 9);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 10);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 11);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 12);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 13);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 14);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 15);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_all_elements(1);

                bias_addr += 16;

                input_addr = in;
                int32_t *weight_addr_tmp = weight_addr;
                weight_addr += 16 * K;

                for (int k = 0; k < K; k++) {

                    // Loading input - Dim1.length = 16 - Dim0.length = 8, Stride: 1 (dim0) and 0 (dim1)
                    // Loading weight - Dim1.length = 16 - Dim0.length = 8, Stride: 0 (dim0) and 3 (K) (dim1)
                    __mdvdw input_v = _mve_set1_dw(0);
                    __mdvdw weight_v = _mve_set1_dw(0);
                    _mve_set_only_element(1, 0);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 1);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 2);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 3);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 4);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 5);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 6);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 7);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 8);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 9);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 10);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 11);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 12);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 13);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 14);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 15);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_all_elements(1);

                    input_addr += M;
                    weight_addr_tmp += 1;

                    __mdvdw mult_v = _mve_mul_dw(input_v, weight_v);

                    acc_v = _mve_add_dw(acc_v, mult_v);
                }

                // Caculating Min and Max

                // R4 = R2 min R1
                acc_v = _mve_min_dw(acc_v, max_v);
                acc_v = _mve_max_dw(acc_v, min_v);

                // Storing the results, Stride: 1 (dim0) and 3 (M) (dim1)
                _mve_set_only_element(1, 0);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 1);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 2);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 3);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 4);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 5);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 6);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 7);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 8);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 9);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 10);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 11);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 12);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 13);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 14);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 15);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_all_elements(1);

                output_addr += 16 * M;

                mve_flusher();
                n += 16;
            }

            if (n + 8 <= N) {
                // Second Dim: N
                _mve_set_dim_length(1, 8);
            }

            while (n + 8 <= N) {

                // Loading bias - Dim1.length = 8 - Dim0.length = 8, Stride: 0 (dim0) and 1 (dim1)
                __mdvdw acc_v = _mve_set1_dw(0);
                _mve_set_only_element(1, 0);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 1);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 2);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 3);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 4);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 5);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 6);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 7);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_all_elements(1);

                bias_addr += 8;

                input_addr = in;
                int32_t *weight_addr_tmp = weight_addr;
                weight_addr += 8 * K;

                for (int k = 0; k < K; k++) {

                    // Loading input - Dim1.length = 8 - Dim0.length = 8, Stride: 1 (dim0) and 0 (dim1)
                    // Loading weight - Dim1.length = 8 - Dim0.length = 8, Stride: 0 (dim0) and 3 (K) (dim1)
                    __mdvdw input_v = _mve_set1_dw(0);
                    __mdvdw weight_v = _mve_set1_dw(0);
                    _mve_set_only_element(1, 0);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 1);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 2);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 3);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 4);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 5);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 6);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 7);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_all_elements(1);

                    input_addr += M;
                    weight_addr_tmp += 1;

                    __mdvdw mult_v = _mve_mul_dw(input_v, weight_v);

                    acc_v = _mve_add_dw(acc_v, mult_v);
                }

                // Caculating Min and Max

                // R4 = R2 min R1
                acc_v = _mve_min_dw(acc_v, max_v);
                acc_v = _mve_max_dw(acc_v, min_v);

                // Storing the results, Stride: 1 (dim0) and 3 (M) (dim1)
                _mve_set_only_element(1, 0);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 1);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 2);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 3);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 4);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 5);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 6);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 7);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_all_elements(1);

                output_addr += 8 * M;

                mve_flusher();
                n += 8;
            }

            if (n + 4 <= N) {
                // Second Dim: N
                _mve_set_dim_length(1, 4);
            }

            while (n + 4 <= N) {

                // Loading bias - Dim1.length = 4 - Dim0.length = 8, Stride: 0 (dim0) and 1 (dim1)
                __mdvdw acc_v = _mve_set1_dw(0);
                _mve_set_only_element(1, 0);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 1);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 2);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 3);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_all_elements(1);

                bias_addr += 4;

                input_addr = in;
                int32_t *weight_addr_tmp = weight_addr;
                weight_addr += 4 * K;

                for (int k = 0; k < K; k++) {

                    // Loading input - Dim1.length = 4 - Dim0.length = 8, Stride: 1 (dim0) and 0 (dim1)
                    // Loading weight - Dim1.length = 4 - Dim0.length = 8, Stride: 0 (dim0) and 3 (K) (dim1)
                    __mdvdw input_v = _mve_set1_dw(0);
                    __mdvdw weight_v = _mve_set1_dw(0);
                    _mve_set_only_element(1, 0);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 1);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 2);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 3);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_all_elements(1);

                    input_addr += M;
                    weight_addr_tmp += 1;

                    __mdvdw mult_v = _mve_mul_dw(input_v, weight_v);

                    acc_v = _mve_add_dw(acc_v, mult_v);
                }

                // Caculating Min and Max

                // R4 = R2 min R1
                acc_v = _mve_min_dw(acc_v, max_v);
                acc_v = _mve_max_dw(acc_v, min_v);

                // Storing the results, Stride: 1 (dim0) and 3 (M) (dim1)
                _mve_set_only_element(1, 0);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 1);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 2);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 3);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_all_elements(1);

                output_addr += 4 * M;

                mve_flusher();
                n += 4;
            }

            if (n + 2 <= N) {
                // Second Dim: N
                _mve_set_dim_length(1, 2);
            }

            while (n + 2 <= N) {

                // Loading bias - Dim1.length = 2 - Dim0.length = 8, Stride: 0 (dim0) and 1 (dim1)
                __mdvdw acc_v = _mve_set1_dw(0);
                _mve_set_only_element(1, 0);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_only_element(1, 1);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_all_elements(1);

                bias_addr += 2;

                input_addr = in;
                int32_t *weight_addr_tmp = weight_addr;
                weight_addr += 2 * K;

                for (int k = 0; k < K; k++) {

                    // Loading input - Dim1.length = 2 - Dim0.length = 8, Stride: 1 (dim0) and 0 (dim1)
                    // Loading weight - Dim1.length = 2 - Dim0.length = 8, Stride: 0 (dim0) and 3 (K) (dim1)
                    __mdvdw input_v = _mve_set1_dw(0);
                    __mdvdw weight_v = _mve_set1_dw(0);
                    _mve_set_only_element(1, 0);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_only_element(1, 1);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_all_elements(1);

                    input_addr += M;
                    weight_addr_tmp += 1;

                    __mdvdw mult_v = _mve_mul_dw(input_v, weight_v);

                    acc_v = _mve_add_dw(acc_v, mult_v);
                }

                // Caculating Min and Max

                // R4 = R2 min R1
                acc_v = _mve_min_dw(acc_v, max_v);
                acc_v = _mve_max_dw(acc_v, min_v);

                // Storing the results, Stride: 1 (dim0) and 3 (M) (dim1)
                _mve_set_only_element(1, 0);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_only_element(1, 1);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_all_elements(1);

                output_addr += 2 * M;

                mve_flusher();
                n += 2;
            }

            if (n + 1 <= N) {
                // Second Dim: N
                _mve_set_dim_length(1, 1);
            }

            while (n + 1 <= N) {

                // Loading bias - Dim1.length = 1 - Dim0.length = 8, Stride: 0 (dim0) and 1 (dim1)
                __mdvdw acc_v = _mve_set1_dw(0);
                _mve_set_only_element(1, 0);
                acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                _mve_set_all_elements(1);

                bias_addr += 1;

                input_addr = in;
                int32_t *weight_addr_tmp = weight_addr;
                weight_addr += 1 * K;

                for (int k = 0; k < K; k++) {

                    // Loading input - Dim1.length = 1 - Dim0.length = 8, Stride: 1 (dim0) and 0 (dim1)
                    // Loading weight - Dim1.length = 1 - Dim0.length = 8, Stride: 0 (dim0) and 3 (K) (dim1)
                    __mdvdw input_v = _mve_set1_dw(0);
                    __mdvdw weight_v = _mve_set1_dw(0);
                    _mve_set_only_element(1, 0);
                    input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                    weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    _mve_set_all_elements(1);

                    input_addr += M;
                    weight_addr_tmp += 1;

                    __mdvdw mult_v = _mve_mul_dw(input_v, weight_v);

                    acc_v = _mve_add_dw(acc_v, mult_v);
                }

                // Caculating Min and Max

                // R4 = R2 min R1
                acc_v = _mve_min_dw(acc_v, max_v);
                acc_v = _mve_max_dw(acc_v, min_v);

                // Storing the results, Stride: 1 (dim0) and 3 (M) (dim1)
                _mve_set_only_element(1, 0);
                _mve_store_dw(output_addr, acc_v, output_stride);
                _mve_set_all_elements(1);

                output_addr += 1 * M;

                mve_flusher();
                n += 1;
            }

            in += 8;
            out += 8;
            m += 8;
        }
        if (M > m) {
            _mve_set_dim_length(0, M - m);

            int n_per_iter = 32 * (int)(8 / (M - m));

            bias_addr = bias;
            weight_addr = weights;
            output_addr = out;

            int n = 0;

            while (n < N) {

                int curr_n_per_iter = (N - n) < n_per_iter ? (N - n) : n_per_iter;

                _mve_set_dim_length(1, curr_n_per_iter);

                // Loading bias - Dim1.length = curr_n_per_iter - Dim0.length = (M - m), Stride: 0 (dim0) and 1 (dim1)
                __mdvdw acc_v = _mve_set1_dw(0);
                for (int n_idx = 0; n_idx < curr_n_per_iter; n_idx++) {
                    _mve_set_only_element(1, n_idx);
                    acc_v = _mve_assign_dw(acc_v, _mve_load_dw(bias_addr, bias_stride));
                }
                _mve_set_all_elements(1);

                bias_addr += curr_n_per_iter;

                input_addr = in;
                int32_t *weight_addr_tmp = weight_addr;
                weight_addr += curr_n_per_iter * K;

                for (int k = 0; k < K; k++) {

                    // Loading input - Dim1.length = curr_n_per_iter - Dim0.length = (M - m), Stride: 1 (dim0) and 0 (dim1)
                    // Loading weight - Dim1.length = curr_n_per_iter - Dim0.length = (M - m), Stride: 0 (dim0) and 3 (K) (dim1)
                    __mdvdw input_v = _mve_set1_dw(0);
                    __mdvdw weight_v = _mve_set1_dw(0);
                    for (int n_idx = 0; n_idx < curr_n_per_iter; n_idx++) {
                        _mve_set_only_element(1, n_idx);
                        input_v = _mve_assign_dw(input_v, _mve_load_dw(input_addr, input_stride));
                        weight_v = _mve_assign_dw(weight_v, _mve_load_dw(weight_addr_tmp, weight_stride));
                    }
                    _mve_set_all_elements(1);

                    input_addr += M;
                    weight_addr_tmp += 1;

                    __mdvdw mult_v = _mve_mul_dw(input_v, weight_v);

                    acc_v = _mve_add_dw(acc_v, mult_v);

                    // replace R3 and R2 for acc_v
                }

                // Caculating Min and Max

                // R4 = R2 min R1
                acc_v = _mve_min_dw(acc_v, max_v);
                acc_v = _mve_max_dw(acc_v, min_v);

                // Storing the results, Stride: 1 (dim0), 3 or M (dim1)
                for (int n_idx = 0; n_idx < curr_n_per_iter; n_idx++) {
                    _mve_set_only_element(1, n_idx);
                    _mve_store_dw(output_addr, acc_v, output_stride);
                }
                _mve_set_all_elements(1);

                output_addr += curr_n_per_iter * M;

                mve_flusher();
                n += curr_n_per_iter;
            }
        }
    } else {
        printf("Error: unsupported LANE_NUM = %d\n", LANE_NUM);
        exit(-1);
    }
}